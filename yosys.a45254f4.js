(function () {
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequired8fe"];
if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequired8fe"] = parcelRequire;
}
parcelRequire.register("ksweO", function(module, exports) {
"use strict";

});

parcelRequire.register("bvcWa", function(module, exports) {
parcelRequire("6vt9n");
var $83MoV = parcelRequire("83MoV");
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var $iUMdb = parcelRequire("iUMdb");
function $85fc9fff2d8c2f48$var$assertPath(path) {
    if (typeof path !== 'string') throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
}
// Resolves . and .. elements in a path with directory names
function $85fc9fff2d8c2f48$var$normalizeStringPosix(path, allowAboveRoot) {
    var res = '';
    var lastSegmentLength = 0;
    var lastSlash = -1;
    var dots = 0;
    var code;
    for(var i = 0; i <= path.length; ++i){
        if (i < path.length) code = path.charCodeAt(i);
        else if (code === 47 /*/*/ ) break;
        else code = 47 /*/*/ ;
        if (code === 47 /*/*/ ) {
            if (lastSlash === i - 1 || dots === 1) ;
            else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/  || res.charCodeAt(res.length - 2) !== 46 /*.*/ ) {
                    if (res.length > 2) {
                        var lastSlashIndex = res.lastIndexOf('/');
                        if (lastSlashIndex !== res.length - 1) {
                            if (lastSlashIndex === -1) {
                                res = '';
                                lastSegmentLength = 0;
                            } else {
                                res = res.slice(0, lastSlashIndex);
                                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
                            }
                            lastSlash = i;
                            dots = 0;
                            continue;
                        }
                    } else if (res.length === 2 || res.length === 1) {
                        res = '';
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += '/..';
                    else res = '..';
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += '/' + path.slice(lastSlash + 1, i);
                else res = path.slice(lastSlash + 1, i);
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === 46 /*.*/  && dots !== -1) ++dots;
        else dots = -1;
    }
    return res;
}
function $85fc9fff2d8c2f48$var$_format(sep, pathObject) {
    var dir = pathObject.dir || pathObject.root;
    var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
    if (!dir) return base;
    if (dir === pathObject.root) return dir + base;
    return dir + sep + base;
}
var $85fc9fff2d8c2f48$var$posix = {
    // path.resolve([from ...], to)
    resolve: function resolve() {
        var resolvedPath = '';
        var resolvedAbsolute = false;
        var cwd;
        for(var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--){
            var path;
            if (i >= 0) path = arguments[i];
            else {
                if (cwd === undefined) cwd = $iUMdb.cwd();
                path = cwd;
            }
            $85fc9fff2d8c2f48$var$assertPath(path);
            // Skip empty entries
            if (path.length === 0) continue;
            resolvedPath = path + '/' + resolvedPath;
            resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/ ;
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        // Normalize the path
        resolvedPath = $85fc9fff2d8c2f48$var$normalizeStringPosix(resolvedPath, !resolvedAbsolute);
        if (resolvedAbsolute) {
            if (resolvedPath.length > 0) return '/' + resolvedPath;
            else return '/';
        } else if (resolvedPath.length > 0) return resolvedPath;
        else return '.';
    },
    normalize: function normalize(path) {
        $85fc9fff2d8c2f48$var$assertPath(path);
        if (path.length === 0) return '.';
        var isAbsolute = path.charCodeAt(0) === 47 /*/*/ ;
        var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/ ;
        // Normalize the path
        path = $85fc9fff2d8c2f48$var$normalizeStringPosix(path, !isAbsolute);
        if (path.length === 0 && !isAbsolute) path = '.';
        if (path.length > 0 && trailingSeparator) path += '/';
        if (isAbsolute) return '/' + path;
        return path;
    },
    isAbsolute: function isAbsolute(path) {
        $85fc9fff2d8c2f48$var$assertPath(path);
        return path.length > 0 && path.charCodeAt(0) === 47 /*/*/ ;
    },
    join: function join() {
        if (arguments.length === 0) return '.';
        var joined;
        for(var i = 0; i < arguments.length; ++i){
            var arg = arguments[i];
            $85fc9fff2d8c2f48$var$assertPath(arg);
            if (arg.length > 0) {
                if (joined === undefined) joined = arg;
                else joined += '/' + arg;
            }
        }
        if (joined === undefined) return '.';
        return $85fc9fff2d8c2f48$var$posix.normalize(joined);
    },
    relative: function relative(from, to) {
        $85fc9fff2d8c2f48$var$assertPath(from);
        $85fc9fff2d8c2f48$var$assertPath(to);
        if (from === to) return '';
        from = $85fc9fff2d8c2f48$var$posix.resolve(from);
        to = $85fc9fff2d8c2f48$var$posix.resolve(to);
        if (from === to) return '';
        // Trim any leading backslashes
        var fromStart = 1;
        for(; fromStart < from.length; ++fromStart){
            if (from.charCodeAt(fromStart) !== 47 /*/*/ ) break;
        }
        var fromEnd = from.length;
        var fromLen = fromEnd - fromStart;
        // Trim any leading backslashes
        var toStart = 1;
        for(; toStart < to.length; ++toStart){
            if (to.charCodeAt(toStart) !== 47 /*/*/ ) break;
        }
        var toEnd = to.length;
        var toLen = toEnd - toStart;
        // Compare paths to find the longest common path from root
        var length = fromLen < toLen ? fromLen : toLen;
        var lastCommonSep = -1;
        var i = 0;
        for(; i <= length; ++i){
            if (i === length) {
                if (toLen > length) {
                    if (to.charCodeAt(toStart + i) === 47 /*/*/ ) // We get here if `from` is the exact base path for `to`.
                    // For example: from='/foo/bar'; to='/foo/bar/baz'
                    return to.slice(toStart + i + 1);
                    else if (i === 0) // We get here if `from` is the root
                    // For example: from='/'; to='/foo'
                    return to.slice(toStart + i);
                } else if (fromLen > length) {
                    if (from.charCodeAt(fromStart + i) === 47 /*/*/ ) // We get here if `to` is the exact base path for `from`.
                    // For example: from='/foo/bar/baz'; to='/foo/bar'
                    lastCommonSep = i;
                    else if (i === 0) // We get here if `to` is the root.
                    // For example: from='/foo'; to='/'
                    lastCommonSep = 0;
                }
                break;
            }
            var fromCode = from.charCodeAt(fromStart + i);
            var toCode = to.charCodeAt(toStart + i);
            if (fromCode !== toCode) break;
            else if (fromCode === 47 /*/*/ ) lastCommonSep = i;
        }
        var out = '';
        // Generate the relative path based on the path difference between `to`
        // and `from`
        for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i)if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/ ) {
            if (out.length === 0) out += '..';
            else out += '/..';
        }
        // Lastly, append the rest of the destination (`to`) path that comes after
        // the common path parts
        if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
        else {
            toStart += lastCommonSep;
            if (to.charCodeAt(toStart) === 47 /*/*/ ) ++toStart;
            return to.slice(toStart);
        }
    },
    _makeLong: function _makeLong(path) {
        return path;
    },
    dirname: function dirname(path) {
        $85fc9fff2d8c2f48$var$assertPath(path);
        if (path.length === 0) return '.';
        var code = path.charCodeAt(0);
        var hasRoot = code === 47 /*/*/ ;
        var end = -1;
        var matchedSlash = true;
        for(var i = path.length - 1; i >= 1; --i){
            code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                if (!matchedSlash) {
                    end = i;
                    break;
                }
            } else // We saw the first non-path separator
            matchedSlash = false;
        }
        if (end === -1) return hasRoot ? '/' : '.';
        if (hasRoot && end === 1) return '//';
        return path.slice(0, end);
    },
    basename: function basename(path, ext) {
        if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
        $85fc9fff2d8c2f48$var$assertPath(path);
        var start = 0;
        var end = -1;
        var matchedSlash = true;
        var i;
        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
            if (ext.length === path.length && ext === path) return '';
            var extIdx = ext.length - 1;
            var firstNonSlashEnd = -1;
            for(i = path.length - 1; i >= 0; --i){
                var code = path.charCodeAt(i);
                if (code === 47 /*/*/ ) // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                {
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                } else {
                    if (firstNonSlashEnd === -1) {
                        // We saw the first non-path separator, remember this index in case
                        // we need it if the extension ends up not matching
                        matchedSlash = false;
                        firstNonSlashEnd = i + 1;
                    }
                    if (extIdx >= 0) {
                        // Try to match the explicit extension
                        if (code === ext.charCodeAt(extIdx)) {
                            if (--extIdx === -1) // We matched the extension, so mark this as the end of our path
                            // component
                            end = i;
                        } else {
                            // Extension does not match, so our result is the entire path
                            // component
                            extIdx = -1;
                            end = firstNonSlashEnd;
                        }
                    }
                }
            }
            if (start === end) end = firstNonSlashEnd;
            else if (end === -1) end = path.length;
            return path.slice(start, end);
        } else {
            for(i = path.length - 1; i >= 0; --i){
                if (path.charCodeAt(i) === 47 /*/*/ ) // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                {
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                } else if (end === -1) {
                    // We saw the first non-path separator, mark this as the end of our
                    // path component
                    matchedSlash = false;
                    end = i + 1;
                }
            }
            if (end === -1) return '';
            return path.slice(start, end);
        }
    },
    extname: function extname(path) {
        $85fc9fff2d8c2f48$var$assertPath(path);
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        var preDotState = 0;
        for(var i = path.length - 1; i >= 0; --i){
            var code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === 46 /*.*/ ) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) startDot = i;
                else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) // We saw a non-dot and non-path separator before our dot, so we should
            // have a good chance at having a non-empty extension
            preDotState = -1;
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) return '';
        return path.slice(startDot, end);
    },
    format: function format(pathObject) {
        if (pathObject === null || typeof pathObject !== 'object') throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + (typeof pathObject === "undefined" ? "undefined" : $83MoV.default(pathObject)));
        return $85fc9fff2d8c2f48$var$_format('/', pathObject);
    },
    parse: function parse(path) {
        $85fc9fff2d8c2f48$var$assertPath(path);
        var ret = {
            root: '',
            dir: '',
            base: '',
            ext: '',
            name: ''
        };
        if (path.length === 0) return ret;
        var code = path.charCodeAt(0);
        var isAbsolute = code === 47 /*/*/ ;
        var start;
        if (isAbsolute) {
            ret.root = '/';
            start = 1;
        } else start = 0;
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        var i = path.length - 1;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        var preDotState = 0;
        // Get non-dir info
        for(; i >= start; --i){
            code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === 46 /*.*/ ) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) startDot = i;
                else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) // We saw a non-dot and non-path separator before our dot, so we should
            // have a good chance at having a non-empty extension
            preDotState = -1;
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
            if (end !== -1) {
                if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);
                else ret.base = ret.name = path.slice(startPart, end);
            }
        } else {
            if (startPart === 0 && isAbsolute) {
                ret.name = path.slice(1, startDot);
                ret.base = path.slice(1, end);
            } else {
                ret.name = path.slice(startPart, startDot);
                ret.base = path.slice(startPart, end);
            }
            ret.ext = path.slice(startDot, end);
        }
        if (startPart > 0) ret.dir = path.slice(0, startPart - 1);
        else if (isAbsolute) ret.dir = '/';
        return ret;
    },
    sep: '/',
    delimiter: ':',
    win32: null,
    posix: null
};
$85fc9fff2d8c2f48$var$posix.posix = $85fc9fff2d8c2f48$var$posix;
module.exports = $85fc9fff2d8c2f48$var$posix;

});
parcelRequire.register("6vt9n", function(module, exports) {

$parcel$export(module.exports, "assertThisInitialized", function () { return (parcelRequire("6PDVY")).default; });
$parcel$export(module.exports, "asyncIterator", function () { return (parcelRequire("lLct5")).default; });
$parcel$export(module.exports, "asyncToGenerator", function () { return (parcelRequire("gTmwS")).default; });
$parcel$export(module.exports, "classCallCheck", function () { return (parcelRequire("347Dd")).default; });
$parcel$export(module.exports, "createClass", function () { return (parcelRequire("bguNN")).default; });
$parcel$export(module.exports, "createSuper", function () { return (parcelRequire("eHKgn")).default; });
$parcel$export(module.exports, "defineProperty", function () { return (parcelRequire("gFyhy")).default; });
$parcel$export(module.exports, "get", function () { return (parcelRequire("iZhGW")).default; });
$parcel$export(module.exports, "getPrototypeOf", function () { return (parcelRequire("clec8")).default; });
$parcel$export(module.exports, "inherits", function () { return (parcelRequire("fBBi7")).default; });
$parcel$export(module.exports, "objectSpread", function () { return (parcelRequire("9v3E5")).default; });
$parcel$export(module.exports, "objectWithoutProperties", function () { return (parcelRequire("kpZXk")).default; });
$parcel$export(module.exports, "slicedToArray", function () { return (parcelRequire("Kg1DN")).default; });
$parcel$export(module.exports, "toConsumableArray", function () { return (parcelRequire("1Q8JB")).default; });
$parcel$export(module.exports, "typeOf", function () { return (parcelRequire("83MoV")).default; });
$parcel$export(module.exports, "wrapNativeSuper", function () { return (parcelRequire("kKnyI")).default; });





var $6PDVY = parcelRequire("6PDVY");



var $lLct5 = parcelRequire("lLct5");

var $gTmwS = parcelRequire("gTmwS");







var $347Dd = parcelRequire("347Dd");

















var $bguNN = parcelRequire("bguNN");

var $eHKgn = parcelRequire("eHKgn");




var $gFyhy = parcelRequire("gFyhy");


var $iZhGW = parcelRequire("iZhGW");

var $clec8 = parcelRequire("clec8");

var $fBBi7 = parcelRequire("fBBi7");
















var $9v3E5 = parcelRequire("9v3E5");


var $kpZXk = parcelRequire("kpZXk");







var $Kg1DN = parcelRequire("Kg1DN");







var $1Q8JB = parcelRequire("1Q8JB");



var $83MoV = parcelRequire("83MoV");



var $kKnyI = parcelRequire("kKnyI");


});
parcelRequire.register("6PDVY", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $4f967b8b49260b73$export$2e2bcd8739ae039; });
function $4f967b8b49260b73$export$2e2bcd8739ae039(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}

});

parcelRequire.register("lLct5", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $fd77a8b0e4ebe33a$export$2e2bcd8739ae039; });
function $fd77a8b0e4ebe33a$export$2e2bcd8739ae039(iterable) {
    var method;
    if (typeof Symbol === "function") {
        if (Symbol.asyncIterator) {
            method = iterable[Symbol.asyncIterator];
            if (method != null) return method.call(iterable);
        }
        if (Symbol.iterator) {
            method = iterable[Symbol.iterator];
            if (method != null) return method.call(iterable);
        }
    }
    throw new TypeError("Object is not async iterable");
}

});

parcelRequire.register("gTmwS", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $c4c3424026577bc3$export$2e2bcd8739ae039; });
function $c4c3424026577bc3$var$asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) resolve(value);
    else Promise.resolve(value).then(_next, _throw);
}
function $c4c3424026577bc3$export$2e2bcd8739ae039(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                $c4c3424026577bc3$var$asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                $c4c3424026577bc3$var$asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}

});

parcelRequire.register("347Dd", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $23b7aa4d824e08f4$export$2e2bcd8739ae039; });
function $23b7aa4d824e08f4$export$2e2bcd8739ae039(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

});

parcelRequire.register("bguNN", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $833915062990dfa9$export$2e2bcd8739ae039; });
function $833915062990dfa9$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $833915062990dfa9$export$2e2bcd8739ae039(Constructor, protoProps, staticProps) {
    if (protoProps) $833915062990dfa9$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $833915062990dfa9$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}

});

parcelRequire.register("eHKgn", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $ab48f7bbb03d31c4$export$2e2bcd8739ae039; });

var $uPsoW = parcelRequire("uPsoW");

var $clec8 = parcelRequire("clec8");

var $7I8c6 = parcelRequire("7I8c6");
function $ab48f7bbb03d31c4$export$2e2bcd8739ae039(Derived) {
    var hasNativeReflectConstruct = $uPsoW.default();
    return function _createSuperInternal() {
        var Super = $clec8.default(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = $clec8.default(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return $7I8c6.default(this, result);
    };
}

});
parcelRequire.register("uPsoW", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $05cab7c2f0fff33b$export$2e2bcd8739ae039; });
function $05cab7c2f0fff33b$export$2e2bcd8739ae039() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}

});

parcelRequire.register("clec8", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $8fc274f4688cc357$export$2e2bcd8739ae039; });
function $8fc274f4688cc357$var$getPrototypeOf(o1) {
    $8fc274f4688cc357$var$getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return $8fc274f4688cc357$var$getPrototypeOf(o1);
}
function $8fc274f4688cc357$export$2e2bcd8739ae039(o) {
    return $8fc274f4688cc357$var$getPrototypeOf(o);
}

});

parcelRequire.register("7I8c6", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $59d2ffacad084b35$export$2e2bcd8739ae039; });

var $6PDVY = parcelRequire("6PDVY");

var $83MoV = parcelRequire("83MoV");
function $59d2ffacad084b35$export$2e2bcd8739ae039(self, call) {
    if (call && ($83MoV.default(call) === "object" || typeof call === "function")) return call;
    return $6PDVY.default(self);
}

});
parcelRequire.register("83MoV", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $5de425fd05c83803$export$2e2bcd8739ae039; });
function $5de425fd05c83803$export$2e2bcd8739ae039(obj) {
    return obj && obj.constructor === Symbol ? "symbol" : typeof obj;
}

});



parcelRequire.register("gFyhy", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $c22b11613519774c$export$2e2bcd8739ae039; });
function $c22b11613519774c$export$2e2bcd8739ae039(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}

});

parcelRequire.register("iZhGW", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $dd2ba5aa2618a3b6$export$2e2bcd8739ae039; });

var $e9ppn = parcelRequire("e9ppn");
function $dd2ba5aa2618a3b6$var$get(target1, property1, receiver1) {
    if (typeof Reflect !== "undefined" && Reflect.get) $dd2ba5aa2618a3b6$var$get = Reflect.get;
    else $dd2ba5aa2618a3b6$var$get = function get(target, property, receiver) {
        var base = $e9ppn.default(target, property);
        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) return desc.get.call(receiver || target);
        return desc.value;
    };
    return $dd2ba5aa2618a3b6$var$get(target1, property1, receiver1);
}
function $dd2ba5aa2618a3b6$export$2e2bcd8739ae039(target, property, receiver) {
    return $dd2ba5aa2618a3b6$var$get(target, property, receiver);
}

});
parcelRequire.register("e9ppn", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $a4d59d882de08da2$export$2e2bcd8739ae039; });

var $clec8 = parcelRequire("clec8");
function $a4d59d882de08da2$export$2e2bcd8739ae039(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = $clec8.default(object);
        if (object === null) break;
    }
    return object;
}

});


parcelRequire.register("fBBi7", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $b5c73cf9ff8013ed$export$2e2bcd8739ae039; });

var $lnAcz = parcelRequire("lnAcz");
function $b5c73cf9ff8013ed$export$2e2bcd8739ae039(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) $lnAcz.default(subClass, superClass);
}

});
parcelRequire.register("lnAcz", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $f907d3e39de2a7d6$export$2e2bcd8739ae039; });
function $f907d3e39de2a7d6$var$setPrototypeOf(o1, p1) {
    $f907d3e39de2a7d6$var$setPrototypeOf = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return $f907d3e39de2a7d6$var$setPrototypeOf(o1, p1);
}
function $f907d3e39de2a7d6$export$2e2bcd8739ae039(o, p) {
    return $f907d3e39de2a7d6$var$setPrototypeOf(o, p);
}

});


parcelRequire.register("9v3E5", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $6ea9d6424c0286f8$export$2e2bcd8739ae039; });

var $gFyhy = parcelRequire("gFyhy");
function $6ea9d6424c0286f8$export$2e2bcd8739ae039(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === 'function') ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
        ownKeys.forEach(function(key) {
            $gFyhy.default(target, key, source[key]);
        });
    }
    return target;
}

});

parcelRequire.register("kpZXk", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $edd6339f03a127f2$export$2e2bcd8739ae039; });

var $fWfym = parcelRequire("fWfym");
function $edd6339f03a127f2$export$2e2bcd8739ae039(source, excluded) {
    if (source == null) return {};
    var target = $fWfym.default(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}

});
parcelRequire.register("fWfym", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $b9a85655d0a3f495$export$2e2bcd8739ae039; });
function $b9a85655d0a3f495$export$2e2bcd8739ae039(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}

});


parcelRequire.register("Kg1DN", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $08b0ba51066c9db5$export$2e2bcd8739ae039; });

var $1N4JP = parcelRequire("1N4JP");

var $jAwNj = parcelRequire("jAwNj");

var $lPmls = parcelRequire("lPmls");

var $234zt = parcelRequire("234zt");
function $08b0ba51066c9db5$export$2e2bcd8739ae039(arr, i) {
    return $1N4JP.default(arr) || $jAwNj.default(arr, i) || $234zt.default(arr, i) || $lPmls.default();
}

});
parcelRequire.register("1N4JP", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $14de0af28e3f77d6$export$2e2bcd8739ae039; });
function $14de0af28e3f77d6$export$2e2bcd8739ae039(arr) {
    if (Array.isArray(arr)) return arr;
}

});

parcelRequire.register("jAwNj", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $e42ad1683f01bbca$export$2e2bcd8739ae039; });
function $e42ad1683f01bbca$export$2e2bcd8739ae039(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

});

parcelRequire.register("lPmls", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $fe3fb1aeda91f4f3$export$2e2bcd8739ae039; });
function $fe3fb1aeda91f4f3$export$2e2bcd8739ae039() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

});

parcelRequire.register("234zt", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $17df6856a9111e17$export$2e2bcd8739ae039; });

var $PAxkN = parcelRequire("PAxkN");
function $17df6856a9111e17$export$2e2bcd8739ae039(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return $PAxkN.default(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return $PAxkN.default(o, minLen);
}

});
parcelRequire.register("PAxkN", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $09b11af3f0985fe1$export$2e2bcd8739ae039; });
function $09b11af3f0985fe1$export$2e2bcd8739ae039(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}

});



parcelRequire.register("1Q8JB", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $15716c3e9a1c3620$export$2e2bcd8739ae039; });

var $aAUlf = parcelRequire("aAUlf");

var $jAwNj = parcelRequire("jAwNj");

var $aSsnH = parcelRequire("aSsnH");

var $234zt = parcelRequire("234zt");
function $15716c3e9a1c3620$export$2e2bcd8739ae039(arr) {
    return $aAUlf.default(arr) || $jAwNj.default(arr) || $234zt.default(arr) || $aSsnH.default();
}

});
parcelRequire.register("aAUlf", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $7b68f874f49d29a7$export$2e2bcd8739ae039; });

var $PAxkN = parcelRequire("PAxkN");
function $7b68f874f49d29a7$export$2e2bcd8739ae039(arr) {
    if (Array.isArray(arr)) return $PAxkN.default(arr);
}

});

parcelRequire.register("aSsnH", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $7eb4f672844f1b99$export$2e2bcd8739ae039; });
function $7eb4f672844f1b99$export$2e2bcd8739ae039() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

});


parcelRequire.register("kKnyI", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $f1aa60d7b2140a12$export$2e2bcd8739ae039; });

var $tVzZk = parcelRequire("tVzZk");

var $4FG4b = parcelRequire("4FG4b");

var $clec8 = parcelRequire("clec8");

var $lnAcz = parcelRequire("lnAcz");
function $f1aa60d7b2140a12$var$wrapNativeSuper(Class1) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    $f1aa60d7b2140a12$var$wrapNativeSuper = function wrapNativeSuper(Class) {
        if (Class === null || !$4FG4b.default(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return $tVzZk.default(Class, arguments, $clec8.default(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return $lnAcz.default(Wrapper, Class);
    };
    return $f1aa60d7b2140a12$var$wrapNativeSuper(Class1);
}
function $f1aa60d7b2140a12$export$2e2bcd8739ae039(Class) {
    return $f1aa60d7b2140a12$var$wrapNativeSuper(Class);
}

});
parcelRequire.register("tVzZk", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $059f5fa0c6f284ff$export$2e2bcd8739ae039; });

var $lnAcz = parcelRequire("lnAcz");
function $059f5fa0c6f284ff$var$isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function $059f5fa0c6f284ff$var$construct(Parent1, args1, Class1) {
    if ($059f5fa0c6f284ff$var$isNativeReflectConstruct()) $059f5fa0c6f284ff$var$construct = Reflect.construct;
    else $059f5fa0c6f284ff$var$construct = function construct(Parent, args, Class) {
        var a = [
            null
        ];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) $lnAcz.default(instance, Class.prototype);
        return instance;
    };
    return $059f5fa0c6f284ff$var$construct.apply(null, arguments);
}
function $059f5fa0c6f284ff$export$2e2bcd8739ae039(Parent, args, Class) {
    return $059f5fa0c6f284ff$var$construct.apply(null, arguments);
}

});

parcelRequire.register("4FG4b", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $366b9f45248c4b49$export$2e2bcd8739ae039; });
function $366b9f45248c4b49$export$2e2bcd8739ae039(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

});



parcelRequire.register("iUMdb", function(module, exports) {
// shim for using process in browser
var $dc52dacc58743001$var$process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var $dc52dacc58743001$var$cachedSetTimeout;
var $dc52dacc58743001$var$cachedClearTimeout;
function $dc52dacc58743001$var$defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function $dc52dacc58743001$var$defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') $dc52dacc58743001$var$cachedSetTimeout = setTimeout;
        else $dc52dacc58743001$var$cachedSetTimeout = $dc52dacc58743001$var$defaultSetTimout;
    } catch (e) {
        $dc52dacc58743001$var$cachedSetTimeout = $dc52dacc58743001$var$defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') $dc52dacc58743001$var$cachedClearTimeout = clearTimeout;
        else $dc52dacc58743001$var$cachedClearTimeout = $dc52dacc58743001$var$defaultClearTimeout;
    } catch (e1) {
        $dc52dacc58743001$var$cachedClearTimeout = $dc52dacc58743001$var$defaultClearTimeout;
    }
})();
function $dc52dacc58743001$var$runTimeout(fun) {
    if ($dc52dacc58743001$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if (($dc52dacc58743001$var$cachedSetTimeout === $dc52dacc58743001$var$defaultSetTimout || !$dc52dacc58743001$var$cachedSetTimeout) && setTimeout) {
        $dc52dacc58743001$var$cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $dc52dacc58743001$var$cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return $dc52dacc58743001$var$cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return $dc52dacc58743001$var$cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function $dc52dacc58743001$var$runClearTimeout(marker) {
    if ($dc52dacc58743001$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if (($dc52dacc58743001$var$cachedClearTimeout === $dc52dacc58743001$var$defaultClearTimeout || !$dc52dacc58743001$var$cachedClearTimeout) && clearTimeout) {
        $dc52dacc58743001$var$cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $dc52dacc58743001$var$cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return $dc52dacc58743001$var$cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return $dc52dacc58743001$var$cachedClearTimeout.call(this, marker);
        }
    }
}
var $dc52dacc58743001$var$queue = [];
var $dc52dacc58743001$var$draining = false;
var $dc52dacc58743001$var$currentQueue;
var $dc52dacc58743001$var$queueIndex = -1;
function $dc52dacc58743001$var$cleanUpNextTick() {
    if (!$dc52dacc58743001$var$draining || !$dc52dacc58743001$var$currentQueue) return;
    $dc52dacc58743001$var$draining = false;
    if ($dc52dacc58743001$var$currentQueue.length) $dc52dacc58743001$var$queue = $dc52dacc58743001$var$currentQueue.concat($dc52dacc58743001$var$queue);
    else $dc52dacc58743001$var$queueIndex = -1;
    if ($dc52dacc58743001$var$queue.length) $dc52dacc58743001$var$drainQueue();
}
function $dc52dacc58743001$var$drainQueue() {
    if ($dc52dacc58743001$var$draining) return;
    var timeout = $dc52dacc58743001$var$runTimeout($dc52dacc58743001$var$cleanUpNextTick);
    $dc52dacc58743001$var$draining = true;
    var len = $dc52dacc58743001$var$queue.length;
    while(len){
        $dc52dacc58743001$var$currentQueue = $dc52dacc58743001$var$queue;
        $dc52dacc58743001$var$queue = [];
        while(++$dc52dacc58743001$var$queueIndex < len)if ($dc52dacc58743001$var$currentQueue) $dc52dacc58743001$var$currentQueue[$dc52dacc58743001$var$queueIndex].run();
        $dc52dacc58743001$var$queueIndex = -1;
        len = $dc52dacc58743001$var$queue.length;
    }
    $dc52dacc58743001$var$currentQueue = null;
    $dc52dacc58743001$var$draining = false;
    $dc52dacc58743001$var$runClearTimeout(timeout);
}
$dc52dacc58743001$var$process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    $dc52dacc58743001$var$queue.push(new $dc52dacc58743001$var$Item(fun, args));
    if ($dc52dacc58743001$var$queue.length === 1 && !$dc52dacc58743001$var$draining) $dc52dacc58743001$var$runTimeout($dc52dacc58743001$var$drainQueue);
};
// v8 likes predictible objects
function $dc52dacc58743001$var$Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
$dc52dacc58743001$var$Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
$dc52dacc58743001$var$process.title = 'browser';
$dc52dacc58743001$var$process.browser = true;
$dc52dacc58743001$var$process.env = {};
$dc52dacc58743001$var$process.argv = [];
$dc52dacc58743001$var$process.version = ''; // empty string to avoid regexp issues
$dc52dacc58743001$var$process.versions = {};
function $dc52dacc58743001$var$noop() {}
$dc52dacc58743001$var$process.on = $dc52dacc58743001$var$noop;
$dc52dacc58743001$var$process.addListener = $dc52dacc58743001$var$noop;
$dc52dacc58743001$var$process.once = $dc52dacc58743001$var$noop;
$dc52dacc58743001$var$process.off = $dc52dacc58743001$var$noop;
$dc52dacc58743001$var$process.removeListener = $dc52dacc58743001$var$noop;
$dc52dacc58743001$var$process.removeAllListeners = $dc52dacc58743001$var$noop;
$dc52dacc58743001$var$process.emit = $dc52dacc58743001$var$noop;
$dc52dacc58743001$var$process.prependListener = $dc52dacc58743001$var$noop;
$dc52dacc58743001$var$process.prependOnceListener = $dc52dacc58743001$var$noop;
$dc52dacc58743001$var$process.listeners = function(name) {
    return [];
};
$dc52dacc58743001$var$process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
$dc52dacc58743001$var$process.cwd = function() {
    return '/';
};
$dc52dacc58743001$var$process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
$dc52dacc58743001$var$process.umask = function() {
    return 0;
};

});


parcelRequire.register("5vuHX", function(module, exports) {

$parcel$export(module.exports, "Buffer", function () { return $4027aaf31ab03040$export$a143d493d941bafc; }, function (v) { return $4027aaf31ab03040$export$a143d493d941bafc = v; });
$parcel$export(module.exports, "SlowBuffer", function () { return $4027aaf31ab03040$export$e4cf37d7f6fb9e0a; }, function (v) { return $4027aaf31ab03040$export$e4cf37d7f6fb9e0a = v; });
$parcel$export(module.exports, "INSPECT_MAX_BYTES", function () { return $4027aaf31ab03040$export$f99ded8fe4b79145; }, function (v) { return $4027aaf31ab03040$export$f99ded8fe4b79145 = v; });
$parcel$export(module.exports, "kMaxLength", function () { return $4027aaf31ab03040$export$599f31c3813fae4d; }, function (v) { return $4027aaf31ab03040$export$599f31c3813fae4d = v; });
parcelRequire("6vt9n");
var $83MoV = parcelRequire("83MoV");
var $fBBi7 = parcelRequire("fBBi7");
var $eHKgn = parcelRequire("eHKgn");
var $347Dd = parcelRequire("347Dd");
var $6PDVY = parcelRequire("6PDVY");
var $bguNN = parcelRequire("bguNN");
var $4027aaf31ab03040$export$a143d493d941bafc;
var $4027aaf31ab03040$export$e4cf37d7f6fb9e0a;
var $4027aaf31ab03040$export$f99ded8fe4b79145;
var $4027aaf31ab03040$export$599f31c3813fae4d;
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';

var $4mfYw = parcelRequire("4mfYw");

var $iIC95 = parcelRequire("iIC95");
var $4027aaf31ab03040$var$customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation
 ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
$4027aaf31ab03040$export$a143d493d941bafc = $4027aaf31ab03040$var$Buffer;
$4027aaf31ab03040$export$e4cf37d7f6fb9e0a = $4027aaf31ab03040$var$SlowBuffer;
$4027aaf31ab03040$export$f99ded8fe4b79145 = 50;
var $4027aaf31ab03040$var$K_MAX_LENGTH = 0x7fffffff;
$4027aaf31ab03040$export$599f31c3813fae4d = $4027aaf31ab03040$var$K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ $4027aaf31ab03040$var$Buffer.TYPED_ARRAY_SUPPORT = $4027aaf31ab03040$var$typedArraySupport();
if (!$4027aaf31ab03040$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function $4027aaf31ab03040$var$typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function foo() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty($4027aaf31ab03040$var$Buffer.prototype, 'parent', {
    enumerable: true,
    get: function get() {
        if (!$4027aaf31ab03040$var$Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty($4027aaf31ab03040$var$Buffer.prototype, 'offset', {
    enumerable: true,
    get: function get() {
        if (!$4027aaf31ab03040$var$Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function $4027aaf31ab03040$var$createBuffer(length) {
    if (length > $4027aaf31ab03040$var$K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, $4027aaf31ab03040$var$Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function $4027aaf31ab03040$var$Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return $4027aaf31ab03040$var$allocUnsafe(arg);
    }
    return $4027aaf31ab03040$var$from(arg, encodingOrOffset, length);
}
$4027aaf31ab03040$var$Buffer.poolSize = 8192 // not used by this implementation
;
function $4027aaf31ab03040$var$from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return $4027aaf31ab03040$var$fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return $4027aaf31ab03040$var$fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + (typeof value === "undefined" ? "undefined" : $83MoV.default(value)));
    if ($4027aaf31ab03040$var$isInstance(value, ArrayBuffer) || value && $4027aaf31ab03040$var$isInstance(value.buffer, ArrayBuffer)) return $4027aaf31ab03040$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && ($4027aaf31ab03040$var$isInstance(value, SharedArrayBuffer) || value && $4027aaf31ab03040$var$isInstance(value.buffer, SharedArrayBuffer))) return $4027aaf31ab03040$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return $4027aaf31ab03040$var$Buffer.from(valueOf, encodingOrOffset, length);
    var b = $4027aaf31ab03040$var$fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return $4027aaf31ab03040$var$Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + (typeof value === "undefined" ? "undefined" : $83MoV.default(value)));
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ $4027aaf31ab03040$var$Buffer.from = function(value, encodingOrOffset, length) {
    return $4027aaf31ab03040$var$from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf($4027aaf31ab03040$var$Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf($4027aaf31ab03040$var$Buffer, Uint8Array);
function $4027aaf31ab03040$var$assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function $4027aaf31ab03040$var$alloc(size, fill, encoding) {
    $4027aaf31ab03040$var$assertSize(size);
    if (size <= 0) return $4027aaf31ab03040$var$createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? $4027aaf31ab03040$var$createBuffer(size).fill(fill, encoding) : $4027aaf31ab03040$var$createBuffer(size).fill(fill);
    return $4027aaf31ab03040$var$createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ $4027aaf31ab03040$var$Buffer.alloc = function(size, fill, encoding) {
    return $4027aaf31ab03040$var$alloc(size, fill, encoding);
};
function $4027aaf31ab03040$var$allocUnsafe(size) {
    $4027aaf31ab03040$var$assertSize(size);
    return $4027aaf31ab03040$var$createBuffer(size < 0 ? 0 : $4027aaf31ab03040$var$checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ $4027aaf31ab03040$var$Buffer.allocUnsafe = function(size) {
    return $4027aaf31ab03040$var$allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ $4027aaf31ab03040$var$Buffer.allocUnsafeSlow = function(size) {
    return $4027aaf31ab03040$var$allocUnsafe(size);
};
function $4027aaf31ab03040$var$fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!$4027aaf31ab03040$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    var length = $4027aaf31ab03040$var$byteLength(string, encoding) | 0;
    var buf = $4027aaf31ab03040$var$createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function $4027aaf31ab03040$var$fromArrayLike(array) {
    var length = array.length < 0 ? 0 : $4027aaf31ab03040$var$checked(array.length) | 0;
    var buf = $4027aaf31ab03040$var$createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function $4027aaf31ab03040$var$fromArrayView(arrayView) {
    if ($4027aaf31ab03040$var$isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return $4027aaf31ab03040$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return $4027aaf31ab03040$var$fromArrayLike(arrayView);
}
function $4027aaf31ab03040$var$fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, $4027aaf31ab03040$var$Buffer.prototype);
    return buf;
}
function $4027aaf31ab03040$var$fromObject(obj) {
    if ($4027aaf31ab03040$var$Buffer.isBuffer(obj)) {
        var len = $4027aaf31ab03040$var$checked(obj.length) | 0;
        var buf = $4027aaf31ab03040$var$createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || $4027aaf31ab03040$var$numberIsNaN(obj.length)) return $4027aaf31ab03040$var$createBuffer(0);
        return $4027aaf31ab03040$var$fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return $4027aaf31ab03040$var$fromArrayLike(obj.data);
}
function $4027aaf31ab03040$var$checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= $4027aaf31ab03040$var$K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $4027aaf31ab03040$var$K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function $4027aaf31ab03040$var$SlowBuffer(length) {
    if (+length != length) length = 0;
    return $4027aaf31ab03040$var$Buffer.alloc(+length);
}
$4027aaf31ab03040$var$Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== $4027aaf31ab03040$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
$4027aaf31ab03040$var$Buffer.compare = function compare(a, b) {
    if ($4027aaf31ab03040$var$isInstance(a, Uint8Array)) a = $4027aaf31ab03040$var$Buffer.from(a, a.offset, a.byteLength);
    if ($4027aaf31ab03040$var$isInstance(b, Uint8Array)) b = $4027aaf31ab03040$var$Buffer.from(b, b.offset, b.byteLength);
    if (!$4027aaf31ab03040$var$Buffer.isBuffer(a) || !$4027aaf31ab03040$var$Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
$4027aaf31ab03040$var$Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
$4027aaf31ab03040$var$Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return $4027aaf31ab03040$var$Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = $4027aaf31ab03040$var$Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if ($4027aaf31ab03040$var$isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!$4027aaf31ab03040$var$Buffer.isBuffer(buf)) buf = $4027aaf31ab03040$var$Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!$4027aaf31ab03040$var$Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function $4027aaf31ab03040$var$byteLength(string, encoding) {
    if ($4027aaf31ab03040$var$Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || $4027aaf31ab03040$var$isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + (typeof string === "undefined" ? "undefined" : $83MoV.default(string)));
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return $4027aaf31ab03040$var$utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return $4027aaf31ab03040$var$base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : $4027aaf31ab03040$var$utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
$4027aaf31ab03040$var$Buffer.byteLength = $4027aaf31ab03040$var$byteLength;
function $4027aaf31ab03040$var$slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return $4027aaf31ab03040$var$hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return $4027aaf31ab03040$var$utf8Slice(this, start, end);
        case 'ascii':
            return $4027aaf31ab03040$var$asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return $4027aaf31ab03040$var$latin1Slice(this, start, end);
        case 'base64':
            return $4027aaf31ab03040$var$base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return $4027aaf31ab03040$var$utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
$4027aaf31ab03040$var$Buffer.prototype._isBuffer = true;
function $4027aaf31ab03040$var$swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
$4027aaf31ab03040$var$Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(var i = 0; i < len; i += 2)$4027aaf31ab03040$var$swap(this, i, i + 1);
    return this;
};
$4027aaf31ab03040$var$Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(var i = 0; i < len; i += 4){
        $4027aaf31ab03040$var$swap(this, i, i + 3);
        $4027aaf31ab03040$var$swap(this, i + 1, i + 2);
    }
    return this;
};
$4027aaf31ab03040$var$Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(var i = 0; i < len; i += 8){
        $4027aaf31ab03040$var$swap(this, i, i + 7);
        $4027aaf31ab03040$var$swap(this, i + 1, i + 6);
        $4027aaf31ab03040$var$swap(this, i + 2, i + 5);
        $4027aaf31ab03040$var$swap(this, i + 3, i + 4);
    }
    return this;
};
$4027aaf31ab03040$var$Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return $4027aaf31ab03040$var$utf8Slice(this, 0, length);
    return $4027aaf31ab03040$var$slowToString.apply(this, arguments);
};
$4027aaf31ab03040$var$Buffer.prototype.toLocaleString = $4027aaf31ab03040$var$Buffer.prototype.toString;
$4027aaf31ab03040$var$Buffer.prototype.equals = function equals(b) {
    if (!$4027aaf31ab03040$var$Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return $4027aaf31ab03040$var$Buffer.compare(this, b) === 0;
};
$4027aaf31ab03040$var$Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = $4027aaf31ab03040$export$f99ded8fe4b79145;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if ($4027aaf31ab03040$var$customInspectSymbol) $4027aaf31ab03040$var$Buffer.prototype[$4027aaf31ab03040$var$customInspectSymbol] = $4027aaf31ab03040$var$Buffer.prototype.inspect;
$4027aaf31ab03040$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if ($4027aaf31ab03040$var$isInstance(target, Uint8Array)) target = $4027aaf31ab03040$var$Buffer.from(target, target.offset, target.byteLength);
    if (!$4027aaf31ab03040$var$Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + (typeof target === "undefined" ? "undefined" : $83MoV.default(target)));
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function $4027aaf31ab03040$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if ($4027aaf31ab03040$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = $4027aaf31ab03040$var$Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if ($4027aaf31ab03040$var$Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return $4027aaf31ab03040$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return $4027aaf31ab03040$var$arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function $4027aaf31ab03040$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i1;
    if (dir) {
        var foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
$4027aaf31ab03040$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
$4027aaf31ab03040$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return $4027aaf31ab03040$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
$4027aaf31ab03040$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return $4027aaf31ab03040$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function $4027aaf31ab03040$var$hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    var i;
    for(i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if ($4027aaf31ab03040$var$numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function $4027aaf31ab03040$var$utf8Write(buf, string, offset, length) {
    return $4027aaf31ab03040$var$blitBuffer($4027aaf31ab03040$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function $4027aaf31ab03040$var$asciiWrite(buf, string, offset, length) {
    return $4027aaf31ab03040$var$blitBuffer($4027aaf31ab03040$var$asciiToBytes(string), buf, offset, length);
}
function $4027aaf31ab03040$var$base64Write(buf, string, offset, length) {
    return $4027aaf31ab03040$var$blitBuffer($4027aaf31ab03040$var$base64ToBytes(string), buf, offset, length);
}
function $4027aaf31ab03040$var$ucs2Write(buf, string, offset, length) {
    return $4027aaf31ab03040$var$blitBuffer($4027aaf31ab03040$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
$4027aaf31ab03040$var$Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return $4027aaf31ab03040$var$hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return $4027aaf31ab03040$var$utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
            return $4027aaf31ab03040$var$asciiWrite(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return $4027aaf31ab03040$var$base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return $4027aaf31ab03040$var$ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
$4027aaf31ab03040$var$Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function $4027aaf31ab03040$var$base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return $4mfYw.fromByteArray(buf);
    else return $4mfYw.fromByteArray(buf.slice(start, end));
}
function $4027aaf31ab03040$var$utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte = void 0, thirdByte = void 0, fourthByte = void 0, tempCodePoint = void 0;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return $4027aaf31ab03040$var$decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var $4027aaf31ab03040$var$MAX_ARGUMENTS_LENGTH = 0x1000;
function $4027aaf31ab03040$var$decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= $4027aaf31ab03040$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $4027aaf31ab03040$var$MAX_ARGUMENTS_LENGTH));
    return res;
}
function $4027aaf31ab03040$var$asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function $4027aaf31ab03040$var$latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function $4027aaf31ab03040$var$hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';
    for(var i = start; i < end; ++i)out += $4027aaf31ab03040$var$hexSliceLookupTable[buf[i]];
    return out;
}
function $4027aaf31ab03040$var$utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
$4027aaf31ab03040$var$Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, $4027aaf31ab03040$var$Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function $4027aaf31ab03040$var$checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
$4027aaf31ab03040$var$Buffer.prototype.readUintLE = $4027aaf31ab03040$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
$4027aaf31ab03040$var$Buffer.prototype.readUintBE = $4027aaf31ab03040$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
$4027aaf31ab03040$var$Buffer.prototype.readUint8 = $4027aaf31ab03040$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, 1, this.length);
    return this[offset];
};
$4027aaf31ab03040$var$Buffer.prototype.readUint16LE = $4027aaf31ab03040$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
$4027aaf31ab03040$var$Buffer.prototype.readUint16BE = $4027aaf31ab03040$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
$4027aaf31ab03040$var$Buffer.prototype.readUint32LE = $4027aaf31ab03040$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
$4027aaf31ab03040$var$Buffer.prototype.readUint32BE = $4027aaf31ab03040$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
$4027aaf31ab03040$var$Buffer.prototype.readBigUInt64LE = $4027aaf31ab03040$var$defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    $4027aaf31ab03040$var$validateNumber(offset, 'offset');
    var first = this[offset];
    var last = this[offset + 7];
    if (first === undefined || last === undefined) $4027aaf31ab03040$var$boundsError(offset, this.length - 8);
    var lo = first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * Math.pow(2, 24);
    var hi = this[++offset] + this[++offset] * 256 + this[++offset] * 65536 + last * Math.pow(2, 24);
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
$4027aaf31ab03040$var$Buffer.prototype.readBigUInt64BE = $4027aaf31ab03040$var$defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    $4027aaf31ab03040$var$validateNumber(offset, 'offset');
    var first = this[offset];
    var last = this[offset + 7];
    if (first === undefined || last === undefined) $4027aaf31ab03040$var$boundsError(offset, this.length - 8);
    var hi = first * Math.pow(2, 24) + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    var lo = this[++offset] * Math.pow(2, 24) + this[++offset] * 65536 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
$4027aaf31ab03040$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$4027aaf31ab03040$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$4027aaf31ab03040$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
$4027aaf31ab03040$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$4027aaf31ab03040$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$4027aaf31ab03040$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
$4027aaf31ab03040$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
$4027aaf31ab03040$var$Buffer.prototype.readBigInt64LE = $4027aaf31ab03040$var$defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    $4027aaf31ab03040$var$validateNumber(offset, 'offset');
    var first = this[offset];
    var last = this[offset + 7];
    if (first === undefined || last === undefined) $4027aaf31ab03040$var$boundsError(offset, this.length - 8);
    var val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 65536 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * Math.pow(2, 24));
});
$4027aaf31ab03040$var$Buffer.prototype.readBigInt64BE = $4027aaf31ab03040$var$defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    $4027aaf31ab03040$var$validateNumber(offset, 'offset');
    var first = this[offset];
    var last = this[offset + 7];
    if (first === undefined || last === undefined) $4027aaf31ab03040$var$boundsError(offset, this.length - 8);
    var val = (first << 24) + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * Math.pow(2, 24) + this[++offset] * 65536 + this[++offset] * 256 + last);
});
$4027aaf31ab03040$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, 4, this.length);
    return $iIC95.read(this, offset, true, 23, 4);
};
$4027aaf31ab03040$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, 4, this.length);
    return $iIC95.read(this, offset, false, 23, 4);
};
$4027aaf31ab03040$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, 8, this.length);
    return $iIC95.read(this, offset, true, 52, 8);
};
$4027aaf31ab03040$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkOffset(offset, 8, this.length);
    return $iIC95.read(this, offset, false, 52, 8);
};
function $4027aaf31ab03040$var$checkInt(buf, value, offset, ext, max, min) {
    if (!$4027aaf31ab03040$var$Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
$4027aaf31ab03040$var$Buffer.prototype.writeUintLE = $4027aaf31ab03040$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $4027aaf31ab03040$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$4027aaf31ab03040$var$Buffer.prototype.writeUintBE = $4027aaf31ab03040$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $4027aaf31ab03040$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$4027aaf31ab03040$var$Buffer.prototype.writeUint8 = $4027aaf31ab03040$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
$4027aaf31ab03040$var$Buffer.prototype.writeUint16LE = $4027aaf31ab03040$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$4027aaf31ab03040$var$Buffer.prototype.writeUint16BE = $4027aaf31ab03040$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$4027aaf31ab03040$var$Buffer.prototype.writeUint32LE = $4027aaf31ab03040$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
$4027aaf31ab03040$var$Buffer.prototype.writeUint32BE = $4027aaf31ab03040$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function $4027aaf31ab03040$var$wrtBigUInt64LE(buf, value, offset, min, max) {
    $4027aaf31ab03040$var$checkIntBI(value, min, max, buf, offset, 7);
    var lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    var hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function $4027aaf31ab03040$var$wrtBigUInt64BE(buf, value, offset, min, max) {
    $4027aaf31ab03040$var$checkIntBI(value, min, max, buf, offset, 7);
    var lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    var hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
$4027aaf31ab03040$var$Buffer.prototype.writeBigUInt64LE = $4027aaf31ab03040$var$defineBigIntMethod(function writeBigUInt64LE(value) {
    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    return $4027aaf31ab03040$var$wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
$4027aaf31ab03040$var$Buffer.prototype.writeBigUInt64BE = $4027aaf31ab03040$var$defineBigIntMethod(function writeBigUInt64BE(value) {
    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    return $4027aaf31ab03040$var$wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
$4027aaf31ab03040$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $4027aaf31ab03040$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$4027aaf31ab03040$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $4027aaf31ab03040$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$4027aaf31ab03040$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
$4027aaf31ab03040$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$4027aaf31ab03040$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$4027aaf31ab03040$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
$4027aaf31ab03040$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
$4027aaf31ab03040$var$Buffer.prototype.writeBigInt64LE = $4027aaf31ab03040$var$defineBigIntMethod(function writeBigInt64LE(value) {
    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    return $4027aaf31ab03040$var$wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
$4027aaf31ab03040$var$Buffer.prototype.writeBigInt64BE = $4027aaf31ab03040$var$defineBigIntMethod(function writeBigInt64BE(value) {
    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    return $4027aaf31ab03040$var$wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
function $4027aaf31ab03040$var$checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function $4027aaf31ab03040$var$writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    $iIC95.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
$4027aaf31ab03040$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return $4027aaf31ab03040$var$writeFloat(this, value, offset, true, noAssert);
};
$4027aaf31ab03040$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return $4027aaf31ab03040$var$writeFloat(this, value, offset, false, noAssert);
};
function $4027aaf31ab03040$var$writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $4027aaf31ab03040$var$checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    $iIC95.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
$4027aaf31ab03040$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return $4027aaf31ab03040$var$writeDouble(this, value, offset, true, noAssert);
};
$4027aaf31ab03040$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return $4027aaf31ab03040$var$writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
$4027aaf31ab03040$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!$4027aaf31ab03040$var$Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
$4027aaf31ab03040$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !$4027aaf31ab03040$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = $4027aaf31ab03040$var$Buffer.isBuffer(val) ? val : $4027aaf31ab03040$var$Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
var $4027aaf31ab03040$var$errors = {};
function $4027aaf31ab03040$var$E(sym, getMessage, Base1) {
    $4027aaf31ab03040$var$errors[sym] = /*#__PURE__*/ function(Base) {
        $fBBi7.default(NodeError, Base);
        var _super = $eHKgn.default(NodeError);
        function NodeError() {
            $347Dd.default(this, NodeError);
            var _this;
            _this = _super.call(this);
            Object.defineProperty($6PDVY.default(_this), 'message', {
                value: getMessage.apply($6PDVY.default(_this), arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            _this.name = "".concat(_this.name, " [").concat(sym, "]");
            // Access the stack to generate the error message including the error code
            // from the name.
            _this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete _this.name;
            return _this;
        }
        $bguNN.default(NodeError, [
            {
                key: "code",
                get: function get() {
                    return sym;
                },
                set: function set(value) {
                    Object.defineProperty(this, 'code', {
                        configurable: true,
                        enumerable: true,
                        value: value,
                        writable: true
                    });
                }
            },
            {
                key: "toString",
                value: function toString() {
                    return "".concat(this.name, " [").concat(sym, "]: ").concat(this.message);
                }
            }
        ]);
        return NodeError;
    }(Base1);
}
$4027aaf31ab03040$var$E('ERR_BUFFER_OUT_OF_BOUNDS', function(name) {
    if (name) return "".concat(name, " is outside of buffer bounds");
    return 'Attempt to access memory outside buffer bounds';
}, RangeError);
$4027aaf31ab03040$var$E('ERR_INVALID_ARG_TYPE', function(name, actual) {
    return 'The "'.concat(name, '" argument must be of type number. Received type ').concat(typeof actual === "undefined" ? "undefined" : $83MoV.default(actual));
}, TypeError);
$4027aaf31ab03040$var$E('ERR_OUT_OF_RANGE', function(str, range, input) {
    var msg = 'The value of "'.concat(str, '" is out of range.');
    var received = input;
    if (Number.isInteger(input) && Math.abs(input) > Math.pow(2, 32)) received = $4027aaf31ab03040$var$addNumericalSeparator(String(input));
    else if ((typeof input === "undefined" ? "undefined" : $83MoV.default(input)) === 'bigint') {
        received = String(input);
        if (input > Math.pow(BigInt(2), BigInt(32)) || input < -Math.pow(BigInt(2), BigInt(32))) received = $4027aaf31ab03040$var$addNumericalSeparator(received);
        received += 'n';
    }
    msg += " It must be ".concat(range, ". Received ").concat(received);
    return msg;
}, RangeError);
function $4027aaf31ab03040$var$addNumericalSeparator(val) {
    var res = '';
    var i = val.length;
    var start = val[0] === '-' ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = "_".concat(val.slice(i - 3, i)).concat(res);
    return "".concat(val.slice(0, i)).concat(res);
}
// CHECK FUNCTIONS
// ===============
function $4027aaf31ab03040$var$checkBounds(buf, offset, byteLength) {
    $4027aaf31ab03040$var$validateNumber(offset, 'offset');
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) $4027aaf31ab03040$var$boundsError(offset, buf.length - (byteLength + 1));
}
function $4027aaf31ab03040$var$checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        var n = (typeof min === "undefined" ? "undefined" : $83MoV.default(min)) === 'bigint' ? 'n' : '';
        var range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = ">= 0".concat(n, " and < 2").concat(n, " ** ").concat((byteLength + 1) * 8).concat(n);
            else range = ">= -(2".concat(n, " ** ").concat((byteLength + 1) * 8 - 1).concat(n, ") and < 2 ** ") + "".concat((byteLength + 1) * 8 - 1).concat(n);
        } else range = ">= ".concat(min).concat(n, " and <= ").concat(max).concat(n);
        throw new $4027aaf31ab03040$var$errors.ERR_OUT_OF_RANGE('value', range, value);
    }
    $4027aaf31ab03040$var$checkBounds(buf, offset, byteLength);
}
function $4027aaf31ab03040$var$validateNumber(value, name) {
    if (typeof value !== 'number') throw new $4027aaf31ab03040$var$errors.ERR_INVALID_ARG_TYPE(name, 'number', value);
}
function $4027aaf31ab03040$var$boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        $4027aaf31ab03040$var$validateNumber(value, type);
        throw new $4027aaf31ab03040$var$errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);
    }
    if (length < 0) throw new $4027aaf31ab03040$var$errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new $4027aaf31ab03040$var$errors.ERR_OUT_OF_RANGE(type || 'offset', ">= ".concat(type ? 1 : 0, " and <= ").concat(length), value);
}
// HELPER FUNCTIONS
// ================
var $4027aaf31ab03040$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function $4027aaf31ab03040$var$base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace($4027aaf31ab03040$var$INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function $4027aaf31ab03040$var$utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function $4027aaf31ab03040$var$asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function $4027aaf31ab03040$var$utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function $4027aaf31ab03040$var$base64ToBytes(str) {
    return $4mfYw.toByteArray($4027aaf31ab03040$var$base64clean(str));
}
function $4027aaf31ab03040$var$blitBuffer(src, dst, offset, length) {
    var i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function $4027aaf31ab03040$var$isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function $4027aaf31ab03040$var$numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var $4027aaf31ab03040$var$hexSliceLookupTable = function() {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function $4027aaf31ab03040$var$defineBigIntMethod(fn) {
    return typeof BigInt === 'undefined' ? $4027aaf31ab03040$var$BufferBigIntNotDefined : fn;
}
function $4027aaf31ab03040$var$BufferBigIntNotDefined() {
    throw new Error('BigInt not supported');
}

});
parcelRequire.register("4mfYw", function(module, exports) {

$parcel$export(module.exports, "toByteArray", function () { return $32c59bceca8766ab$export$d622b2ad8d90c771; }, function (v) { return $32c59bceca8766ab$export$d622b2ad8d90c771 = v; });
$parcel$export(module.exports, "fromByteArray", function () { return $32c59bceca8766ab$export$6100ba28696e12de; }, function (v) { return $32c59bceca8766ab$export$6100ba28696e12de = v; });
var $32c59bceca8766ab$export$a48f0734ac7c2329;
var $32c59bceca8766ab$export$d622b2ad8d90c771;
var $32c59bceca8766ab$export$6100ba28696e12de;
'use strict';
$32c59bceca8766ab$export$a48f0734ac7c2329 = $32c59bceca8766ab$var$byteLength;
$32c59bceca8766ab$export$d622b2ad8d90c771 = $32c59bceca8766ab$var$toByteArray;
$32c59bceca8766ab$export$6100ba28696e12de = $32c59bceca8766ab$var$fromByteArray;
var $32c59bceca8766ab$var$lookup = [];
var $32c59bceca8766ab$var$revLookup = [];
var $32c59bceca8766ab$var$Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var $32c59bceca8766ab$var$code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var $32c59bceca8766ab$var$i = 0, $32c59bceca8766ab$var$len = $32c59bceca8766ab$var$code.length; $32c59bceca8766ab$var$i < $32c59bceca8766ab$var$len; ++$32c59bceca8766ab$var$i){
    $32c59bceca8766ab$var$lookup[$32c59bceca8766ab$var$i] = $32c59bceca8766ab$var$code[$32c59bceca8766ab$var$i];
    $32c59bceca8766ab$var$revLookup[$32c59bceca8766ab$var$code.charCodeAt($32c59bceca8766ab$var$i)] = $32c59bceca8766ab$var$i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$32c59bceca8766ab$var$revLookup['-'.charCodeAt(0)] = 62;
$32c59bceca8766ab$var$revLookup['_'.charCodeAt(0)] = 63;
function $32c59bceca8766ab$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function $32c59bceca8766ab$var$byteLength(b64) {
    var lens = $32c59bceca8766ab$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $32c59bceca8766ab$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $32c59bceca8766ab$var$toByteArray(b64) {
    var tmp;
    var lens = $32c59bceca8766ab$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $32c59bceca8766ab$var$Arr($32c59bceca8766ab$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $32c59bceca8766ab$var$revLookup[b64.charCodeAt(i)] << 18 | $32c59bceca8766ab$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $32c59bceca8766ab$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $32c59bceca8766ab$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = $32c59bceca8766ab$var$revLookup[b64.charCodeAt(i)] << 2 | $32c59bceca8766ab$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = $32c59bceca8766ab$var$revLookup[b64.charCodeAt(i)] << 10 | $32c59bceca8766ab$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $32c59bceca8766ab$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function $32c59bceca8766ab$var$tripletToBase64(num) {
    return $32c59bceca8766ab$var$lookup[num >> 18 & 0x3F] + $32c59bceca8766ab$var$lookup[num >> 12 & 0x3F] + $32c59bceca8766ab$var$lookup[num >> 6 & 0x3F] + $32c59bceca8766ab$var$lookup[num & 0x3F];
}
function $32c59bceca8766ab$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push($32c59bceca8766ab$var$tripletToBase64(tmp));
    }
    return output.join('');
}
function $32c59bceca8766ab$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($32c59bceca8766ab$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($32c59bceca8766ab$var$lookup[tmp >> 2] + $32c59bceca8766ab$var$lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($32c59bceca8766ab$var$lookup[tmp >> 10] + $32c59bceca8766ab$var$lookup[tmp >> 4 & 0x3F] + $32c59bceca8766ab$var$lookup[tmp << 2 & 0x3F] + '=');
    }
    return parts.join('');
}

});

parcelRequire.register("iIC95", function(module, exports) {

$parcel$export(module.exports, "read", function () { return $da09ecf32b0fcc69$export$aafa59e2e03f2942; }, function (v) { return $da09ecf32b0fcc69$export$aafa59e2e03f2942 = v; });
$parcel$export(module.exports, "write", function () { return $da09ecf32b0fcc69$export$68d8715fc104d294; }, function (v) { return $da09ecf32b0fcc69$export$68d8715fc104d294 = v; });
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $da09ecf32b0fcc69$export$aafa59e2e03f2942;
var $da09ecf32b0fcc69$export$68d8715fc104d294;
$da09ecf32b0fcc69$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
$da09ecf32b0fcc69$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

});


parcelRequire.register("dncZy", function(module, exports) {

$parcel$export(module.exports, "randomBytes", function () { return $9bc7803a875b8a4d$export$5f828d93ff035aa8; }, function (v) { return $9bc7803a875b8a4d$export$5f828d93ff035aa8 = v; });
$parcel$export(module.exports, "rng", function () { return $9bc7803a875b8a4d$export$cd94982b18c6332c; }, function (v) { return $9bc7803a875b8a4d$export$cd94982b18c6332c = v; });
$parcel$export(module.exports, "pseudoRandomBytes", function () { return $9bc7803a875b8a4d$export$1d518568e4f529b0; }, function (v) { return $9bc7803a875b8a4d$export$1d518568e4f529b0 = v; });
$parcel$export(module.exports, "prng", function () { return $9bc7803a875b8a4d$export$5285b6d41c912b41; }, function (v) { return $9bc7803a875b8a4d$export$5285b6d41c912b41 = v; });
$parcel$export(module.exports, "createHash", function () { return $9bc7803a875b8a4d$export$2fb37efbf6ae0c0e; }, function (v) { return $9bc7803a875b8a4d$export$2fb37efbf6ae0c0e = v; });
$parcel$export(module.exports, "Hash", function () { return $9bc7803a875b8a4d$export$ab85ecd77ce6a5cd; }, function (v) { return $9bc7803a875b8a4d$export$ab85ecd77ce6a5cd = v; });
$parcel$export(module.exports, "createHmac", function () { return $9bc7803a875b8a4d$export$da39cf97e1eb7c91; }, function (v) { return $9bc7803a875b8a4d$export$da39cf97e1eb7c91 = v; });
$parcel$export(module.exports, "Hmac", function () { return $9bc7803a875b8a4d$export$52a9039d7177394f; }, function (v) { return $9bc7803a875b8a4d$export$52a9039d7177394f = v; });
$parcel$export(module.exports, "getHashes", function () { return $9bc7803a875b8a4d$export$f7201db400317331; }, function (v) { return $9bc7803a875b8a4d$export$f7201db400317331 = v; });
$parcel$export(module.exports, "pbkdf2", function () { return $9bc7803a875b8a4d$export$448fa22aedc9dbca; }, function (v) { return $9bc7803a875b8a4d$export$448fa22aedc9dbca = v; });
$parcel$export(module.exports, "pbkdf2Sync", function () { return $9bc7803a875b8a4d$export$b80c7ba289c8fa56; }, function (v) { return $9bc7803a875b8a4d$export$b80c7ba289c8fa56 = v; });
$parcel$export(module.exports, "Cipher", function () { return $9bc7803a875b8a4d$export$26e5786e8ac8e530; }, function (v) { return $9bc7803a875b8a4d$export$26e5786e8ac8e530 = v; });
$parcel$export(module.exports, "createCipher", function () { return $9bc7803a875b8a4d$export$bdd223f16383713e; }, function (v) { return $9bc7803a875b8a4d$export$bdd223f16383713e = v; });
$parcel$export(module.exports, "Cipheriv", function () { return $9bc7803a875b8a4d$export$20533d26f07f1ee0; }, function (v) { return $9bc7803a875b8a4d$export$20533d26f07f1ee0 = v; });
$parcel$export(module.exports, "createCipheriv", function () { return $9bc7803a875b8a4d$export$2f64596b8cbf08b4; }, function (v) { return $9bc7803a875b8a4d$export$2f64596b8cbf08b4 = v; });
$parcel$export(module.exports, "Decipher", function () { return $9bc7803a875b8a4d$export$2ce6d8d0e8b04e1a; }, function (v) { return $9bc7803a875b8a4d$export$2ce6d8d0e8b04e1a = v; });
$parcel$export(module.exports, "createDecipher", function () { return $9bc7803a875b8a4d$export$12ada9414fbc594c; }, function (v) { return $9bc7803a875b8a4d$export$12ada9414fbc594c = v; });
$parcel$export(module.exports, "Decipheriv", function () { return $9bc7803a875b8a4d$export$f5e7e39d57cd9700; }, function (v) { return $9bc7803a875b8a4d$export$f5e7e39d57cd9700 = v; });
$parcel$export(module.exports, "createDecipheriv", function () { return $9bc7803a875b8a4d$export$36b6d6ef312eab39; }, function (v) { return $9bc7803a875b8a4d$export$36b6d6ef312eab39 = v; });
$parcel$export(module.exports, "getCiphers", function () { return $9bc7803a875b8a4d$export$58a258485f1e49f6; }, function (v) { return $9bc7803a875b8a4d$export$58a258485f1e49f6 = v; });
$parcel$export(module.exports, "listCiphers", function () { return $9bc7803a875b8a4d$export$dedd8dc3dc62b370; }, function (v) { return $9bc7803a875b8a4d$export$dedd8dc3dc62b370 = v; });
$parcel$export(module.exports, "DiffieHellmanGroup", function () { return $9bc7803a875b8a4d$export$971862a2fcb1bb40; }, function (v) { return $9bc7803a875b8a4d$export$971862a2fcb1bb40 = v; });
$parcel$export(module.exports, "createDiffieHellmanGroup", function () { return $9bc7803a875b8a4d$export$c6ff6a88acbeaf40; }, function (v) { return $9bc7803a875b8a4d$export$c6ff6a88acbeaf40 = v; });
$parcel$export(module.exports, "getDiffieHellman", function () { return $9bc7803a875b8a4d$export$fdc27893e98845cc; }, function (v) { return $9bc7803a875b8a4d$export$fdc27893e98845cc = v; });
$parcel$export(module.exports, "createDiffieHellman", function () { return $9bc7803a875b8a4d$export$6671fb9a1323bed; }, function (v) { return $9bc7803a875b8a4d$export$6671fb9a1323bed = v; });
$parcel$export(module.exports, "DiffieHellman", function () { return $9bc7803a875b8a4d$export$d74daf141a551db; }, function (v) { return $9bc7803a875b8a4d$export$d74daf141a551db = v; });
$parcel$export(module.exports, "createSign", function () { return $9bc7803a875b8a4d$export$45df7cae684751af; }, function (v) { return $9bc7803a875b8a4d$export$45df7cae684751af = v; });
$parcel$export(module.exports, "Sign", function () { return $9bc7803a875b8a4d$export$1db683ad541682f6; }, function (v) { return $9bc7803a875b8a4d$export$1db683ad541682f6 = v; });
$parcel$export(module.exports, "createVerify", function () { return $9bc7803a875b8a4d$export$6f65485f87568e37; }, function (v) { return $9bc7803a875b8a4d$export$6f65485f87568e37 = v; });
$parcel$export(module.exports, "Verify", function () { return $9bc7803a875b8a4d$export$91a8e56769aeb334; }, function (v) { return $9bc7803a875b8a4d$export$91a8e56769aeb334 = v; });
$parcel$export(module.exports, "createECDH", function () { return $9bc7803a875b8a4d$export$2d4117e99c2179e4; }, function (v) { return $9bc7803a875b8a4d$export$2d4117e99c2179e4 = v; });
$parcel$export(module.exports, "publicEncrypt", function () { return $9bc7803a875b8a4d$export$512823e338ddb1b7; }, function (v) { return $9bc7803a875b8a4d$export$512823e338ddb1b7 = v; });
$parcel$export(module.exports, "privateEncrypt", function () { return $9bc7803a875b8a4d$export$9d0e0c0c4a8d30f3; }, function (v) { return $9bc7803a875b8a4d$export$9d0e0c0c4a8d30f3 = v; });
$parcel$export(module.exports, "publicDecrypt", function () { return $9bc7803a875b8a4d$export$b9d55ff329113abd; }, function (v) { return $9bc7803a875b8a4d$export$b9d55ff329113abd = v; });
$parcel$export(module.exports, "privateDecrypt", function () { return $9bc7803a875b8a4d$export$7efb24e2fddf99b9; }, function (v) { return $9bc7803a875b8a4d$export$7efb24e2fddf99b9 = v; });
$parcel$export(module.exports, "randomFill", function () { return $9bc7803a875b8a4d$export$bb1abf2ce84fc7e8; }, function (v) { return $9bc7803a875b8a4d$export$bb1abf2ce84fc7e8 = v; });
$parcel$export(module.exports, "randomFillSync", function () { return $9bc7803a875b8a4d$export$2f7171e78e524d5e; }, function (v) { return $9bc7803a875b8a4d$export$2f7171e78e524d5e = v; });
$parcel$export(module.exports, "createCredentials", function () { return $9bc7803a875b8a4d$export$e1d879b482f37d98; }, function (v) { return $9bc7803a875b8a4d$export$e1d879b482f37d98 = v; });
$parcel$export(module.exports, "constants", function () { return $9bc7803a875b8a4d$export$1a988e7317c65621; }, function (v) { return $9bc7803a875b8a4d$export$1a988e7317c65621 = v; });
var $9bc7803a875b8a4d$export$5f828d93ff035aa8;
var $9bc7803a875b8a4d$export$cd94982b18c6332c;
var $9bc7803a875b8a4d$export$1d518568e4f529b0;
var $9bc7803a875b8a4d$export$5285b6d41c912b41;
var $9bc7803a875b8a4d$export$2fb37efbf6ae0c0e;
var $9bc7803a875b8a4d$export$ab85ecd77ce6a5cd;
var $9bc7803a875b8a4d$export$da39cf97e1eb7c91;
var $9bc7803a875b8a4d$export$52a9039d7177394f;
var $9bc7803a875b8a4d$export$f7201db400317331;
var $9bc7803a875b8a4d$export$448fa22aedc9dbca;
var $9bc7803a875b8a4d$export$b80c7ba289c8fa56;
var $9bc7803a875b8a4d$export$26e5786e8ac8e530;
var $9bc7803a875b8a4d$export$bdd223f16383713e;
var $9bc7803a875b8a4d$export$20533d26f07f1ee0;
var $9bc7803a875b8a4d$export$2f64596b8cbf08b4;
var $9bc7803a875b8a4d$export$2ce6d8d0e8b04e1a;
var $9bc7803a875b8a4d$export$12ada9414fbc594c;
var $9bc7803a875b8a4d$export$f5e7e39d57cd9700;
var $9bc7803a875b8a4d$export$36b6d6ef312eab39;
var $9bc7803a875b8a4d$export$58a258485f1e49f6;
var $9bc7803a875b8a4d$export$dedd8dc3dc62b370;
var $9bc7803a875b8a4d$export$971862a2fcb1bb40;
var $9bc7803a875b8a4d$export$c6ff6a88acbeaf40;
var $9bc7803a875b8a4d$export$fdc27893e98845cc;
var $9bc7803a875b8a4d$export$6671fb9a1323bed;
var $9bc7803a875b8a4d$export$d74daf141a551db;
var $9bc7803a875b8a4d$export$45df7cae684751af;
var $9bc7803a875b8a4d$export$1db683ad541682f6;
var $9bc7803a875b8a4d$export$6f65485f87568e37;
var $9bc7803a875b8a4d$export$91a8e56769aeb334;
var $9bc7803a875b8a4d$export$2d4117e99c2179e4;
var $9bc7803a875b8a4d$export$512823e338ddb1b7;
var $9bc7803a875b8a4d$export$9d0e0c0c4a8d30f3;
var $9bc7803a875b8a4d$export$b9d55ff329113abd;
var $9bc7803a875b8a4d$export$7efb24e2fddf99b9;
var $9bc7803a875b8a4d$export$bb1abf2ce84fc7e8;
var $9bc7803a875b8a4d$export$2f7171e78e524d5e;
var $9bc7803a875b8a4d$export$e1d879b482f37d98;
var $9bc7803a875b8a4d$export$1a988e7317c65621;
'use strict';

$9bc7803a875b8a4d$export$5f828d93ff035aa8 = $9bc7803a875b8a4d$export$cd94982b18c6332c = $9bc7803a875b8a4d$export$1d518568e4f529b0 = $9bc7803a875b8a4d$export$5285b6d41c912b41 = (parcelRequire("1umH4"));

$9bc7803a875b8a4d$export$2fb37efbf6ae0c0e = $9bc7803a875b8a4d$export$ab85ecd77ce6a5cd = (parcelRequire("c9fiB"));

$9bc7803a875b8a4d$export$da39cf97e1eb7c91 = $9bc7803a875b8a4d$export$52a9039d7177394f = (parcelRequire("80tDi"));

var $dTFmk = parcelRequire("dTFmk");
var $9bc7803a875b8a4d$var$algoKeys = Object.keys($dTFmk);
var $9bc7803a875b8a4d$var$hashes = [
    'sha1',
    'sha224',
    'sha256',
    'sha384',
    'sha512',
    'md5',
    'rmd160'
].concat($9bc7803a875b8a4d$var$algoKeys);
$9bc7803a875b8a4d$export$f7201db400317331 = function() {
    return $9bc7803a875b8a4d$var$hashes;
};

var $fFjQO = parcelRequire("fFjQO");
$9bc7803a875b8a4d$export$448fa22aedc9dbca = $fFjQO.pbkdf2;
$9bc7803a875b8a4d$export$b80c7ba289c8fa56 = $fFjQO.pbkdf2Sync;

var $4cKqJ = parcelRequire("4cKqJ");
$9bc7803a875b8a4d$export$26e5786e8ac8e530 = $4cKqJ.Cipher;
$9bc7803a875b8a4d$export$bdd223f16383713e = $4cKqJ.createCipher;
$9bc7803a875b8a4d$export$20533d26f07f1ee0 = $4cKqJ.Cipheriv;
$9bc7803a875b8a4d$export$2f64596b8cbf08b4 = $4cKqJ.createCipheriv;
$9bc7803a875b8a4d$export$2ce6d8d0e8b04e1a = $4cKqJ.Decipher;
$9bc7803a875b8a4d$export$12ada9414fbc594c = $4cKqJ.createDecipher;
$9bc7803a875b8a4d$export$f5e7e39d57cd9700 = $4cKqJ.Decipheriv;
$9bc7803a875b8a4d$export$36b6d6ef312eab39 = $4cKqJ.createDecipheriv;
$9bc7803a875b8a4d$export$58a258485f1e49f6 = $4cKqJ.getCiphers;
$9bc7803a875b8a4d$export$dedd8dc3dc62b370 = $4cKqJ.listCiphers;

var $lPZFS = parcelRequire("lPZFS");
$9bc7803a875b8a4d$export$971862a2fcb1bb40 = $lPZFS.DiffieHellmanGroup;
$9bc7803a875b8a4d$export$c6ff6a88acbeaf40 = $lPZFS.createDiffieHellmanGroup;
$9bc7803a875b8a4d$export$fdc27893e98845cc = $lPZFS.getDiffieHellman;
$9bc7803a875b8a4d$export$6671fb9a1323bed = $lPZFS.createDiffieHellman;
$9bc7803a875b8a4d$export$d74daf141a551db = $lPZFS.DiffieHellman;

var $78zD0 = parcelRequire("78zD0");
$9bc7803a875b8a4d$export$45df7cae684751af = $78zD0.createSign;
$9bc7803a875b8a4d$export$1db683ad541682f6 = $78zD0.Sign;
$9bc7803a875b8a4d$export$6f65485f87568e37 = $78zD0.createVerify;
$9bc7803a875b8a4d$export$91a8e56769aeb334 = $78zD0.Verify;

$9bc7803a875b8a4d$export$2d4117e99c2179e4 = (parcelRequire("5ADd5"));

var $giux8 = parcelRequire("giux8");
$9bc7803a875b8a4d$export$512823e338ddb1b7 = $giux8.publicEncrypt;
$9bc7803a875b8a4d$export$9d0e0c0c4a8d30f3 = $giux8.privateEncrypt;
$9bc7803a875b8a4d$export$b9d55ff329113abd = $giux8.publicDecrypt;
$9bc7803a875b8a4d$export$7efb24e2fddf99b9 = $giux8.privateDecrypt;

var $fLF50 = parcelRequire("fLF50");
$9bc7803a875b8a4d$export$bb1abf2ce84fc7e8 = $fLF50.randomFill;
$9bc7803a875b8a4d$export$2f7171e78e524d5e = $fLF50.randomFillSync;
$9bc7803a875b8a4d$export$e1d879b482f37d98 = function() {
    throw new Error([
        'sorry, createCredentials is not implemented yet',
        'we accept pull requests',
        'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'));
};
$9bc7803a875b8a4d$export$1a988e7317c65621 = {
    'DH_CHECK_P_NOT_SAFE_PRIME': 2,
    'DH_CHECK_P_NOT_PRIME': 1,
    'DH_UNABLE_TO_CHECK_GENERATOR': 4,
    'DH_NOT_SUITABLE_GENERATOR': 8,
    'NPN_ENABLED': 1,
    'ALPN_ENABLED': 1,
    'RSA_PKCS1_PADDING': 1,
    'RSA_SSLV23_PADDING': 2,
    'RSA_NO_PADDING': 3,
    'RSA_PKCS1_OAEP_PADDING': 4,
    'RSA_X931_PADDING': 5,
    'RSA_PKCS1_PSS_PADDING': 6,
    'POINT_CONVERSION_COMPRESSED': 2,
    'POINT_CONVERSION_UNCOMPRESSED': 4,
    'POINT_CONVERSION_HYBRID': 6
};

});
parcelRequire.register("1umH4", function(module, exports) {
'use strict';

var $iUMdb = parcelRequire("iUMdb");
// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var $115a3249e2e0df10$var$MAX_BYTES = 65536;
// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var $115a3249e2e0df10$var$MAX_UINT32 = 4294967295;
function $115a3249e2e0df10$var$oldBrowser() {
    throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
}

var $6DGcH = parcelRequire("6DGcH");
var $115a3249e2e0df10$require$Buffer = $6DGcH.Buffer;
var $115a3249e2e0df10$var$crypto = $parcel$global.crypto || $parcel$global.msCrypto;
if ($115a3249e2e0df10$var$crypto && $115a3249e2e0df10$var$crypto.getRandomValues) module.exports = $115a3249e2e0df10$var$randomBytes;
else module.exports = $115a3249e2e0df10$var$oldBrowser;
function $115a3249e2e0df10$var$randomBytes(size, cb) {
    // phantomjs needs to throw
    if (size > $115a3249e2e0df10$var$MAX_UINT32) throw new RangeError('requested too many random bytes');
    var bytes = $115a3249e2e0df10$require$Buffer.allocUnsafe(size);
    if (size > 0) {
        if (size > $115a3249e2e0df10$var$MAX_BYTES) // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for(var generated = 0; generated < size; generated += $115a3249e2e0df10$var$MAX_BYTES)// buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        $115a3249e2e0df10$var$crypto.getRandomValues(bytes.slice(generated, generated + $115a3249e2e0df10$var$MAX_BYTES));
        else $115a3249e2e0df10$var$crypto.getRandomValues(bytes);
    }
    if (typeof cb === 'function') return $iUMdb.nextTick(function() {
        cb(null, bytes);
    });
    return bytes;
}

});
parcelRequire.register("6DGcH", function(module, exports) {

var $5vuHX = parcelRequire("5vuHX");
var $4d571f636a3d21b1$var$Buffer = $5vuHX.Buffer;
// alternative to using Object.keys for old browsers
function $4d571f636a3d21b1$var$copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if ($4d571f636a3d21b1$var$Buffer.from && $4d571f636a3d21b1$var$Buffer.alloc && $4d571f636a3d21b1$var$Buffer.allocUnsafe && $4d571f636a3d21b1$var$Buffer.allocUnsafeSlow) module.exports = $5vuHX;
else {
    // Copy properties from require('buffer')
    $4d571f636a3d21b1$var$copyProps($5vuHX, module.exports);
    module.exports.Buffer = $4d571f636a3d21b1$var$SafeBuffer;
}
function $4d571f636a3d21b1$var$SafeBuffer(arg, encodingOrOffset, length) {
    return $4d571f636a3d21b1$var$Buffer(arg, encodingOrOffset, length);
}
$4d571f636a3d21b1$var$SafeBuffer.prototype = Object.create($4d571f636a3d21b1$var$Buffer.prototype);
// Copy static methods from Buffer
$4d571f636a3d21b1$var$copyProps($4d571f636a3d21b1$var$Buffer, $4d571f636a3d21b1$var$SafeBuffer);
$4d571f636a3d21b1$var$SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') throw new TypeError('Argument must not be a number');
    return $4d571f636a3d21b1$var$Buffer(arg, encodingOrOffset, length);
};
$4d571f636a3d21b1$var$SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    var buf = $4d571f636a3d21b1$var$Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === 'string') buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
$4d571f636a3d21b1$var$SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return $4d571f636a3d21b1$var$Buffer(size);
};
$4d571f636a3d21b1$var$SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return $5vuHX.SlowBuffer(size);
};

});


parcelRequire.register("c9fiB", function(module, exports) {
'use strict';

var $2gGh5 = parcelRequire("2gGh5");

var $fs1JF = parcelRequire("fs1JF");

var $9lf8s = parcelRequire("9lf8s");

var $aP0a7 = parcelRequire("aP0a7");

var $8hqjh = parcelRequire("8hqjh");
function $8d823158e11e723f$var$Hash(hash) {
    $8hqjh.call(this, 'digest');
    this._hash = hash;
}
$2gGh5($8d823158e11e723f$var$Hash, $8hqjh);
$8d823158e11e723f$var$Hash.prototype._update = function(data) {
    this._hash.update(data);
};
$8d823158e11e723f$var$Hash.prototype._final = function() {
    return this._hash.digest();
};
module.exports = function createHash(alg) {
    alg = alg.toLowerCase();
    if (alg === 'md5') return new $fs1JF();
    if (alg === 'rmd160' || alg === 'ripemd160') return new $9lf8s();
    return new $8d823158e11e723f$var$Hash($aP0a7(alg));
};

});
parcelRequire.register("2gGh5", function(module, exports) {
if (typeof Object.create === 'function') // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function TempCtor() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

});

parcelRequire.register("fs1JF", function(module, exports) {
'use strict';

var $2gGh5 = parcelRequire("2gGh5");

var $3r0y8 = parcelRequire("3r0y8");

var $6DGcH = parcelRequire("6DGcH");
var $b3fad12efdcc4833$require$Buffer = $6DGcH.Buffer;
var $b3fad12efdcc4833$var$ARRAY16 = new Array(16);
function $b3fad12efdcc4833$var$MD5() {
    $3r0y8.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
}
$2gGh5($b3fad12efdcc4833$var$MD5, $3r0y8);
$b3fad12efdcc4833$var$MD5.prototype._update = function() {
    var M = $b3fad12efdcc4833$var$ARRAY16;
    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = $b3fad12efdcc4833$var$fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = $b3fad12efdcc4833$var$fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = $b3fad12efdcc4833$var$fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = $b3fad12efdcc4833$var$fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = $b3fad12efdcc4833$var$fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = $b3fad12efdcc4833$var$fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = $b3fad12efdcc4833$var$fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = $b3fad12efdcc4833$var$fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = $b3fad12efdcc4833$var$fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = $b3fad12efdcc4833$var$fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = $b3fad12efdcc4833$var$fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = $b3fad12efdcc4833$var$fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = $b3fad12efdcc4833$var$fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = $b3fad12efdcc4833$var$fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = $b3fad12efdcc4833$var$fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = $b3fad12efdcc4833$var$fnF(b, c, d, a, M[15], 0x49b40821, 22);
    a = $b3fad12efdcc4833$var$fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = $b3fad12efdcc4833$var$fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = $b3fad12efdcc4833$var$fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = $b3fad12efdcc4833$var$fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = $b3fad12efdcc4833$var$fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = $b3fad12efdcc4833$var$fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = $b3fad12efdcc4833$var$fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = $b3fad12efdcc4833$var$fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = $b3fad12efdcc4833$var$fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = $b3fad12efdcc4833$var$fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = $b3fad12efdcc4833$var$fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = $b3fad12efdcc4833$var$fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = $b3fad12efdcc4833$var$fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = $b3fad12efdcc4833$var$fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = $b3fad12efdcc4833$var$fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = $b3fad12efdcc4833$var$fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
    a = $b3fad12efdcc4833$var$fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = $b3fad12efdcc4833$var$fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = $b3fad12efdcc4833$var$fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = $b3fad12efdcc4833$var$fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = $b3fad12efdcc4833$var$fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = $b3fad12efdcc4833$var$fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = $b3fad12efdcc4833$var$fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = $b3fad12efdcc4833$var$fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = $b3fad12efdcc4833$var$fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = $b3fad12efdcc4833$var$fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = $b3fad12efdcc4833$var$fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = $b3fad12efdcc4833$var$fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = $b3fad12efdcc4833$var$fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = $b3fad12efdcc4833$var$fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = $b3fad12efdcc4833$var$fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = $b3fad12efdcc4833$var$fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
    a = $b3fad12efdcc4833$var$fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = $b3fad12efdcc4833$var$fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = $b3fad12efdcc4833$var$fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = $b3fad12efdcc4833$var$fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = $b3fad12efdcc4833$var$fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = $b3fad12efdcc4833$var$fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = $b3fad12efdcc4833$var$fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = $b3fad12efdcc4833$var$fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = $b3fad12efdcc4833$var$fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = $b3fad12efdcc4833$var$fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = $b3fad12efdcc4833$var$fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = $b3fad12efdcc4833$var$fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = $b3fad12efdcc4833$var$fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = $b3fad12efdcc4833$var$fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = $b3fad12efdcc4833$var$fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = $b3fad12efdcc4833$var$fnI(b, c, d, a, M[9], 0xeb86d391, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
};
$b3fad12efdcc4833$var$MD5.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = $b3fad12efdcc4833$require$Buffer.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
};
function $b3fad12efdcc4833$var$rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function $b3fad12efdcc4833$var$fnF(a, b, c, d, m, k, s) {
    return $b3fad12efdcc4833$var$rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}
function $b3fad12efdcc4833$var$fnG(a, b, c, d, m, k, s) {
    return $b3fad12efdcc4833$var$rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}
function $b3fad12efdcc4833$var$fnH(a, b, c, d, m, k, s) {
    return $b3fad12efdcc4833$var$rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}
function $b3fad12efdcc4833$var$fnI(a, b, c, d, m, k, s) {
    return $b3fad12efdcc4833$var$rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}
module.exports = $b3fad12efdcc4833$var$MD5;

});
parcelRequire.register("3r0y8", function(module, exports) {
'use strict';

var $6DGcH = parcelRequire("6DGcH");
var $280451db22b5aa87$require$Buffer = $6DGcH.Buffer;

var $618GO = parcelRequire("618GO");
var $280451db22b5aa87$require$Transform = $618GO.Transform;

var $2gGh5 = parcelRequire("2gGh5");
function $280451db22b5aa87$var$throwIfNotStringOrBuffer(val, prefix) {
    if (!$280451db22b5aa87$require$Buffer.isBuffer(val) && typeof val !== 'string') throw new TypeError(prefix + ' must be a string or a buffer');
}
function $280451db22b5aa87$var$HashBase(blockSize) {
    $280451db22b5aa87$require$Transform.call(this);
    this._block = $280451db22b5aa87$require$Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [
        0,
        0,
        0,
        0
    ];
    this._finalized = false;
}
$2gGh5($280451db22b5aa87$var$HashBase, $280451db22b5aa87$require$Transform);
$280451db22b5aa87$var$HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
        this.update(chunk, encoding);
    } catch (err) {
        error = err;
    }
    callback(error);
};
$280451db22b5aa87$var$HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
        this.push(this.digest());
    } catch (err) {
        error = err;
    }
    callback(error);
};
$280451db22b5aa87$var$HashBase.prototype.update = function(data, encoding) {
    $280451db22b5aa87$var$throwIfNotStringOrBuffer(data, 'Data');
    if (this._finalized) throw new Error('Digest already called');
    if (!$280451db22b5aa87$require$Buffer.isBuffer(data)) data = $280451db22b5aa87$require$Buffer.from(data, encoding);
    // consume data
    var block = this._block;
    var offset = 0;
    while(this._blockOffset + data.length - offset >= this._blockSize){
        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
    }
    while(offset < data.length)block[this._blockOffset++] = data[offset++];
    // update length
    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
        this._length[j] += carry;
        carry = this._length[j] / 0x0100000000 | 0;
        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }
    return this;
};
$280451db22b5aa87$var$HashBase.prototype._update = function() {
    throw new Error('_update is not implemented');
};
$280451db22b5aa87$var$HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error('Digest already called');
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);
    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for(var i = 0; i < 4; ++i)this._length[i] = 0;
    return digest;
};
$280451db22b5aa87$var$HashBase.prototype._digest = function() {
    throw new Error('_digest is not implemented');
};
module.exports = $280451db22b5aa87$var$HashBase;

});
parcelRequire.register("618GO", function(module, exports) {

exports = module.exports = (parcelRequire("fuXvX"));
exports.Stream = exports;
exports.Readable = exports;

exports.Writable = (parcelRequire("l8sXb"));

exports.Duplex = (parcelRequire("go6Yu"));

exports.Transform = (parcelRequire("2yIbu"));

exports.PassThrough = (parcelRequire("l3iyS"));

exports.finished = (parcelRequire("ciyPv"));

exports.pipeline = (parcelRequire("4m9V2"));

});
parcelRequire.register("fuXvX", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var $iUMdb = parcelRequire("iUMdb");
module.exports = $b487d2a904d11a9a$var$Readable;
/*<replacement>*/ var $b487d2a904d11a9a$var$Duplex;
/*</replacement>*/ $b487d2a904d11a9a$var$Readable.ReadableState = $b487d2a904d11a9a$var$ReadableState;

var $88dPV = parcelRequire("88dPV");
var $b487d2a904d11a9a$require$EE = $88dPV.EventEmitter;
var $b487d2a904d11a9a$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $gj2zO = parcelRequire("gj2zO");

var $5vuHX = parcelRequire("5vuHX");
var $b487d2a904d11a9a$require$Buffer = $5vuHX.Buffer;
var $b487d2a904d11a9a$var$OurUint8Array = $parcel$global.Uint8Array || function() {};
function $b487d2a904d11a9a$var$_uint8ArrayToBuffer(chunk) {
    return $b487d2a904d11a9a$require$Buffer.from(chunk);
}
function $b487d2a904d11a9a$var$_isUint8Array(obj) {
    return $b487d2a904d11a9a$require$Buffer.isBuffer(obj) || obj instanceof $b487d2a904d11a9a$var$OurUint8Array;
}

var $ksweO = parcelRequire("ksweO");
var $b487d2a904d11a9a$var$debug;
if ($ksweO && $ksweO.debuglog) $b487d2a904d11a9a$var$debug = $ksweO.debuglog('stream');
else $b487d2a904d11a9a$var$debug = function debug() {};

var $cGZbk = parcelRequire("cGZbk");

var $8q5r5 = parcelRequire("8q5r5");

var $3Atuv = parcelRequire("3Atuv");
var $b487d2a904d11a9a$var$getHighWaterMark = $3Atuv.getHighWaterMark;

var $6imWb = parcelRequire("6imWb");
var $b487d2a904d11a9a$require$_require$codes = $6imWb.codes;
var $b487d2a904d11a9a$var$ERR_INVALID_ARG_TYPE = $b487d2a904d11a9a$require$_require$codes.ERR_INVALID_ARG_TYPE, $b487d2a904d11a9a$var$ERR_STREAM_PUSH_AFTER_EOF = $b487d2a904d11a9a$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $b487d2a904d11a9a$var$ERR_METHOD_NOT_IMPLEMENTED = $b487d2a904d11a9a$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $b487d2a904d11a9a$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $b487d2a904d11a9a$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var $b487d2a904d11a9a$var$StringDecoder;
var $b487d2a904d11a9a$var$createReadableStreamAsyncIterator;
var $b487d2a904d11a9a$var$from;

(parcelRequire("2gGh5"))($b487d2a904d11a9a$var$Readable, $gj2zO);
var $b487d2a904d11a9a$var$errorOrDestroy = $8q5r5.errorOrDestroy;
var $b487d2a904d11a9a$var$kProxyEvents = [
    'error',
    'close',
    'destroy',
    'pause',
    'resume'
];
function $b487d2a904d11a9a$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $b487d2a904d11a9a$var$ReadableState(options, stream, isDuplex) {
    $b487d2a904d11a9a$var$Duplex = $b487d2a904d11a9a$var$Duplex || (parcelRequire("go6Yu"));
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $b487d2a904d11a9a$var$Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $b487d2a904d11a9a$var$getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $cGZbk();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$b487d2a904d11a9a$var$StringDecoder) $b487d2a904d11a9a$var$StringDecoder = (parcelRequire("2bCBN")).StringDecoder;
        this.decoder = new $b487d2a904d11a9a$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $b487d2a904d11a9a$var$Readable(options) {
    $b487d2a904d11a9a$var$Duplex = $b487d2a904d11a9a$var$Duplex || (parcelRequire("go6Yu"));
    if (!(this instanceof $b487d2a904d11a9a$var$Readable)) return new $b487d2a904d11a9a$var$Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $b487d2a904d11a9a$var$Duplex;
    this._readableState = new $b487d2a904d11a9a$var$ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
    $gj2zO.call(this);
}
Object.defineProperty($b487d2a904d11a9a$var$Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$b487d2a904d11a9a$var$Readable.prototype.destroy = $8q5r5.destroy;
$b487d2a904d11a9a$var$Readable.prototype._undestroy = $8q5r5.undestroy;
$b487d2a904d11a9a$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$b487d2a904d11a9a$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $b487d2a904d11a9a$require$Buffer.from(chunk, encoding);
                encoding = '';
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $b487d2a904d11a9a$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
$b487d2a904d11a9a$var$Readable.prototype.unshift = function(chunk) {
    return $b487d2a904d11a9a$var$readableAddChunk(this, chunk, null, true, false);
};
function $b487d2a904d11a9a$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $b487d2a904d11a9a$var$debug('readableAddChunk', chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $b487d2a904d11a9a$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $b487d2a904d11a9a$var$chunkInvalid(state, chunk);
        if (er) $b487d2a904d11a9a$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== $b487d2a904d11a9a$require$Buffer.prototype) chunk = $b487d2a904d11a9a$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $b487d2a904d11a9a$var$errorOrDestroy(stream, new $b487d2a904d11a9a$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $b487d2a904d11a9a$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $b487d2a904d11a9a$var$errorOrDestroy(stream, new $b487d2a904d11a9a$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $b487d2a904d11a9a$var$addChunk(stream, state, chunk, false);
                    else $b487d2a904d11a9a$var$maybeReadMore(stream, state);
                } else $b487d2a904d11a9a$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $b487d2a904d11a9a$var$maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $b487d2a904d11a9a$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $b487d2a904d11a9a$var$emitReadable(stream);
    }
    $b487d2a904d11a9a$var$maybeReadMore(stream, state);
}
function $b487d2a904d11a9a$var$chunkInvalid(state, chunk) {
    var er;
    if (!$b487d2a904d11a9a$var$_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new $b487d2a904d11a9a$var$ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer',
        'Uint8Array'
    ], chunk);
    return er;
}
$b487d2a904d11a9a$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.

$b487d2a904d11a9a$var$Readable.prototype.setEncoding = function(enc) {
    if (!$b487d2a904d11a9a$var$StringDecoder) $b487d2a904d11a9a$var$StringDecoder = (parcelRequire("2bCBN")).StringDecoder;
    var decoder = new $b487d2a904d11a9a$var$StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = '';
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var $b487d2a904d11a9a$var$MAX_HWM = 0x40000000;
function $b487d2a904d11a9a$var$computeNewHighWaterMark(n) {
    if (n >= $b487d2a904d11a9a$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $b487d2a904d11a9a$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $b487d2a904d11a9a$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $b487d2a904d11a9a$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
$b487d2a904d11a9a$var$Readable.prototype.read = function(n) {
    $b487d2a904d11a9a$var$debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $b487d2a904d11a9a$var$debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) $b487d2a904d11a9a$var$endReadable(this);
        else $b487d2a904d11a9a$var$emitReadable(this);
        return null;
    }
    n = $b487d2a904d11a9a$var$howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $b487d2a904d11a9a$var$endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $b487d2a904d11a9a$var$debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $b487d2a904d11a9a$var$debug('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $b487d2a904d11a9a$var$debug('reading or ended', doRead);
    } else if (doRead) {
        $b487d2a904d11a9a$var$debug('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $b487d2a904d11a9a$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $b487d2a904d11a9a$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $b487d2a904d11a9a$var$endReadable(this);
    }
    if (ret !== null) this.emit('data', ret);
    return ret;
};
function $b487d2a904d11a9a$var$onEofChunk(stream, state) {
    $b487d2a904d11a9a$var$debug('onEofChunk');
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $b487d2a904d11a9a$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $b487d2a904d11a9a$var$emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $b487d2a904d11a9a$var$emitReadable(stream) {
    var state = stream._readableState;
    $b487d2a904d11a9a$var$debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $b487d2a904d11a9a$var$debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        $iUMdb.nextTick($b487d2a904d11a9a$var$emitReadable_, stream);
    }
}
function $b487d2a904d11a9a$var$emitReadable_(stream) {
    var state = stream._readableState;
    $b487d2a904d11a9a$var$debug('emitReadable_', state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $b487d2a904d11a9a$var$flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $b487d2a904d11a9a$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $iUMdb.nextTick($b487d2a904d11a9a$var$maybeReadMore_, stream, state);
    }
}
function $b487d2a904d11a9a$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        $b487d2a904d11a9a$var$debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$b487d2a904d11a9a$var$Readable.prototype._read = function(n) {
    $b487d2a904d11a9a$var$errorOrDestroy(this, new $b487d2a904d11a9a$var$ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
$b487d2a904d11a9a$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $b487d2a904d11a9a$var$debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $iUMdb.stdout && dest !== $iUMdb.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $iUMdb.nextTick(endFn);
    else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
        $b487d2a904d11a9a$var$debug('onunpipe');
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        $b487d2a904d11a9a$var$debug('onend');
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $b487d2a904d11a9a$var$pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
        $b487d2a904d11a9a$var$debug('cleanup'); // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on('data', ondata);
    function ondata(chunk) {
        $b487d2a904d11a9a$var$debug('ondata');
        var ret = dest.write(chunk);
        $b487d2a904d11a9a$var$debug('dest.write', ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $b487d2a904d11a9a$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $b487d2a904d11a9a$var$debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $b487d2a904d11a9a$var$debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if ($b487d2a904d11a9a$var$EElistenerCount(dest, 'error') === 0) $b487d2a904d11a9a$var$errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    $b487d2a904d11a9a$var$prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
        $b487d2a904d11a9a$var$debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
        $b487d2a904d11a9a$var$debug('unpipe');
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit('pipe', src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $b487d2a904d11a9a$var$debug('pipe resume');
        src.resume();
    }
    return dest;
};
function $b487d2a904d11a9a$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $b487d2a904d11a9a$var$debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $b487d2a904d11a9a$var$EElistenerCount(src, 'data')) {
            state.flowing = true;
            $b487d2a904d11a9a$var$flow(src);
        }
    };
}
$b487d2a904d11a9a$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = $b487d2a904d11a9a$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
$b487d2a904d11a9a$var$Readable.prototype.on = function(ev, fn) {
    var res = $gj2zO.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $b487d2a904d11a9a$var$debug('on readable', state.length, state.reading);
            if (state.length) $b487d2a904d11a9a$var$emitReadable(this);
            else if (!state.reading) $iUMdb.nextTick($b487d2a904d11a9a$var$nReadingNextTick, this);
        }
    }
    return res;
};
$b487d2a904d11a9a$var$Readable.prototype.addListener = $b487d2a904d11a9a$var$Readable.prototype.on;
$b487d2a904d11a9a$var$Readable.prototype.removeListener = function(ev, fn) {
    var res = $gj2zO.prototype.removeListener.call(this, ev, fn);
    if (ev === 'readable') // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $iUMdb.nextTick($b487d2a904d11a9a$var$updateReadableListening, this);
    return res;
};
$b487d2a904d11a9a$var$Readable.prototype.removeAllListeners = function(ev) {
    var res = $gj2zO.prototype.removeAllListeners.apply(this, arguments);
    if (ev === 'readable' || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $iUMdb.nextTick($b487d2a904d11a9a$var$updateReadableListening, this);
    return res;
};
function $b487d2a904d11a9a$var$updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount('readable') > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount('data') > 0) self.resume();
}
function $b487d2a904d11a9a$var$nReadingNextTick(self) {
    $b487d2a904d11a9a$var$debug('readable nexttick read 0');
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$b487d2a904d11a9a$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $b487d2a904d11a9a$var$debug('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $b487d2a904d11a9a$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $b487d2a904d11a9a$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $iUMdb.nextTick($b487d2a904d11a9a$var$resume_, stream, state);
    }
}
function $b487d2a904d11a9a$var$resume_(stream, state) {
    $b487d2a904d11a9a$var$debug('resume', state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit('resume');
    $b487d2a904d11a9a$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$b487d2a904d11a9a$var$Readable.prototype.pause = function() {
    $b487d2a904d11a9a$var$debug('call pause flowing=%j', this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $b487d2a904d11a9a$var$debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
    }
    this._readableState.paused = true;
    return this;
};
function $b487d2a904d11a9a$var$flow(stream) {
    var state = stream._readableState;
    $b487d2a904d11a9a$var$debug('flow', state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$b487d2a904d11a9a$var$Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on('end', function() {
        $b487d2a904d11a9a$var$debug('wrapped end');
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on('data', function(chunk) {
        $b487d2a904d11a9a$var$debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === 'function') this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
     // proxy certain important events.
    for(var n1 = 0; n1 < $b487d2a904d11a9a$var$kProxyEvents.length; n1++)stream.on($b487d2a904d11a9a$var$kProxyEvents[n1], this.emit.bind(this, $b487d2a904d11a9a$var$kProxyEvents[n1]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        $b487d2a904d11a9a$var$debug('wrapped _read', n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === 'function') $b487d2a904d11a9a$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($b487d2a904d11a9a$var$createReadableStreamAsyncIterator === undefined) $b487d2a904d11a9a$var$createReadableStreamAsyncIterator = (parcelRequire("esxYX"));
    return $b487d2a904d11a9a$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($b487d2a904d11a9a$var$Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($b487d2a904d11a9a$var$Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($b487d2a904d11a9a$var$Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
$b487d2a904d11a9a$var$Readable._fromList = $b487d2a904d11a9a$var$fromList;
Object.defineProperty($b487d2a904d11a9a$var$Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $b487d2a904d11a9a$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $b487d2a904d11a9a$var$endReadable(stream) {
    var state = stream._readableState;
    $b487d2a904d11a9a$var$debug('endReadable', state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $iUMdb.nextTick($b487d2a904d11a9a$var$endReadableNT, state, stream);
    }
}
function $b487d2a904d11a9a$var$endReadableNT(state, stream) {
    $b487d2a904d11a9a$var$debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === 'function') $b487d2a904d11a9a$var$Readable.from = function(iterable, opts) {
    if ($b487d2a904d11a9a$var$from === undefined) $b487d2a904d11a9a$var$from = (parcelRequire("2kzVV"));
    return $b487d2a904d11a9a$var$from($b487d2a904d11a9a$var$Readable, iterable, opts);
};
function $b487d2a904d11a9a$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRequire.register("88dPV", function(module, exports) {
parcelRequire("6vt9n");
var $83MoV = parcelRequire("83MoV");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var $5eb9cdb880aa23a3$var$R = typeof Reflect === 'object' ? Reflect : null;
var $5eb9cdb880aa23a3$var$ReflectApply = $5eb9cdb880aa23a3$var$R && typeof $5eb9cdb880aa23a3$var$R.apply === 'function' ? $5eb9cdb880aa23a3$var$R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var $5eb9cdb880aa23a3$var$ReflectOwnKeys;
if ($5eb9cdb880aa23a3$var$R && typeof $5eb9cdb880aa23a3$var$R.ownKeys === 'function') $5eb9cdb880aa23a3$var$ReflectOwnKeys = $5eb9cdb880aa23a3$var$R.ownKeys;
else if (Object.getOwnPropertySymbols) $5eb9cdb880aa23a3$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else $5eb9cdb880aa23a3$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function $5eb9cdb880aa23a3$var$ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var $5eb9cdb880aa23a3$var$NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function $5eb9cdb880aa23a3$var$EventEmitter() {
    $5eb9cdb880aa23a3$var$EventEmitter.init.call(this);
}
module.exports = $5eb9cdb880aa23a3$var$EventEmitter;
module.exports.once = $5eb9cdb880aa23a3$var$once;
// Backwards-compat with node 0.10.x
$5eb9cdb880aa23a3$var$EventEmitter.EventEmitter = $5eb9cdb880aa23a3$var$EventEmitter;
$5eb9cdb880aa23a3$var$EventEmitter.prototype._events = undefined;
$5eb9cdb880aa23a3$var$EventEmitter.prototype._eventsCount = 0;
$5eb9cdb880aa23a3$var$EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var $5eb9cdb880aa23a3$var$defaultMaxListeners = 10;
function $5eb9cdb880aa23a3$var$checkListener(listener) {
    if (typeof listener !== 'function') throw new TypeError('The "listener" argument must be of type Function. Received type ' + (typeof listener === "undefined" ? "undefined" : $83MoV.default(listener)));
}
Object.defineProperty($5eb9cdb880aa23a3$var$EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function get() {
        return $5eb9cdb880aa23a3$var$defaultMaxListeners;
    },
    set: function set(arg) {
        if (typeof arg !== 'number' || arg < 0 || $5eb9cdb880aa23a3$var$NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        $5eb9cdb880aa23a3$var$defaultMaxListeners = arg;
    }
});
$5eb9cdb880aa23a3$var$EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
$5eb9cdb880aa23a3$var$EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || $5eb9cdb880aa23a3$var$NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    this._maxListeners = n;
    return this;
};
function $5eb9cdb880aa23a3$var$_getMaxListeners(that) {
    if (that._maxListeners === undefined) return $5eb9cdb880aa23a3$var$EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
$5eb9cdb880aa23a3$var$EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $5eb9cdb880aa23a3$var$_getMaxListeners(this);
};
$5eb9cdb880aa23a3$var$EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') $5eb9cdb880aa23a3$var$ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = $5eb9cdb880aa23a3$var$arrayClone(handler, len);
        for(var i = 0; i < len; ++i)$5eb9cdb880aa23a3$var$ReflectApply(listeners[i], this, args);
    }
    return true;
};
function $5eb9cdb880aa23a3$var$_addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    $5eb9cdb880aa23a3$var$checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === 'function') // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = $5eb9cdb880aa23a3$var$_getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            $5eb9cdb880aa23a3$var$ProcessEmitWarning(w);
        }
    }
    return target;
}
$5eb9cdb880aa23a3$var$EventEmitter.prototype.addListener = function addListener(type, listener) {
    return $5eb9cdb880aa23a3$var$_addListener(this, type, listener, false);
};
$5eb9cdb880aa23a3$var$EventEmitter.prototype.on = $5eb9cdb880aa23a3$var$EventEmitter.prototype.addListener;
$5eb9cdb880aa23a3$var$EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return $5eb9cdb880aa23a3$var$_addListener(this, type, listener, true);
};
function $5eb9cdb880aa23a3$var$onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function $5eb9cdb880aa23a3$var$_onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = $5eb9cdb880aa23a3$var$onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
$5eb9cdb880aa23a3$var$EventEmitter.prototype.once = function once(type, listener) {
    $5eb9cdb880aa23a3$var$checkListener(listener);
    this.on(type, $5eb9cdb880aa23a3$var$_onceWrap(this, type, listener));
    return this;
};
$5eb9cdb880aa23a3$var$EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    $5eb9cdb880aa23a3$var$checkListener(listener);
    this.prependListener(type, $5eb9cdb880aa23a3$var$_onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
$5eb9cdb880aa23a3$var$EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    $5eb9cdb880aa23a3$var$checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
    } else if (typeof list !== 'function') {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else $5eb9cdb880aa23a3$var$spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
};
$5eb9cdb880aa23a3$var$EventEmitter.prototype.off = $5eb9cdb880aa23a3$var$EventEmitter.prototype.removeListener;
$5eb9cdb880aa23a3$var$EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function $5eb9cdb880aa23a3$var$_listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? $5eb9cdb880aa23a3$var$unwrapListeners(evlistener) : $5eb9cdb880aa23a3$var$arrayClone(evlistener, evlistener.length);
}
$5eb9cdb880aa23a3$var$EventEmitter.prototype.listeners = function listeners(type) {
    return $5eb9cdb880aa23a3$var$_listeners(this, type, true);
};
$5eb9cdb880aa23a3$var$EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return $5eb9cdb880aa23a3$var$_listeners(this, type, false);
};
$5eb9cdb880aa23a3$var$EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') return emitter.listenerCount(type);
    else return $5eb9cdb880aa23a3$var$listenerCount.call(emitter, type);
};
$5eb9cdb880aa23a3$var$EventEmitter.prototype.listenerCount = $5eb9cdb880aa23a3$var$listenerCount;
function $5eb9cdb880aa23a3$var$listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
$5eb9cdb880aa23a3$var$EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? $5eb9cdb880aa23a3$var$ReflectOwnKeys(this._events) : [];
};
function $5eb9cdb880aa23a3$var$arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function $5eb9cdb880aa23a3$var$spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function $5eb9cdb880aa23a3$var$unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function $5eb9cdb880aa23a3$var$once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === 'function') emitter.removeListener('error', errorListener);
            resolve([].slice.call(arguments));
        }
        $5eb9cdb880aa23a3$var$eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== 'error') $5eb9cdb880aa23a3$var$addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function $5eb9cdb880aa23a3$var$addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') $5eb9cdb880aa23a3$var$eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
}
function $5eb9cdb880aa23a3$var$eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === 'function') // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + (typeof emitter === "undefined" ? "undefined" : $83MoV.default(emitter)));
}

});

parcelRequire.register("gj2zO", function(module, exports) {

module.exports = (parcelRequire("88dPV")).EventEmitter;

});

parcelRequire.register("cGZbk", function(module, exports) {
'use strict';
function $93d8ddb794538ff0$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function $93d8ddb794538ff0$var$_objectSpread(target) {
    var _arguments = arguments, _loop = function(i) {
        var source = _arguments[i] != null ? _arguments[i] : {};
        if (i % 2) $93d8ddb794538ff0$var$ownKeys(Object(source), true).forEach(function(key) {
            $93d8ddb794538ff0$var$_defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else $93d8ddb794538ff0$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    };
    for(var i = 1; i < arguments.length; i++)_loop(i);
    return target;
}
function $93d8ddb794538ff0$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $93d8ddb794538ff0$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $93d8ddb794538ff0$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $93d8ddb794538ff0$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $93d8ddb794538ff0$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $93d8ddb794538ff0$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}

var $5vuHX = parcelRequire("5vuHX");
var $93d8ddb794538ff0$var$Buffer = $5vuHX.Buffer;

var $ksweO = parcelRequire("ksweO");
var $93d8ddb794538ff0$var$inspect = $ksweO.inspect;
var $93d8ddb794538ff0$var$custom = $93d8ddb794538ff0$var$inspect && $93d8ddb794538ff0$var$inspect.custom || 'inspect';
function $93d8ddb794538ff0$var$copyBuffer(src, target, offset) {
    $93d8ddb794538ff0$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        $93d8ddb794538ff0$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $93d8ddb794538ff0$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $93d8ddb794538ff0$var$Buffer.alloc(0);
                var ret = $93d8ddb794538ff0$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $93d8ddb794538ff0$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $93d8ddb794538ff0$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: $93d8ddb794538ff0$var$custom,
            value: function value(_, options) {
                return $93d8ddb794538ff0$var$inspect(this, $93d8ddb794538ff0$var$_objectSpread({}, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

});

parcelRequire.register("8q5r5", function(module, exports) {
'use strict'; // undocumented cb() API, needed for core, not for public API

var $iUMdb = parcelRequire("iUMdb");
function $6214f7de5f914746$var$destroy(err1, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err1);
        else if (err1) {
            if (!this._writableState) $iUMdb.nextTick($6214f7de5f914746$var$emitErrorNT, this, err1);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $iUMdb.nextTick($6214f7de5f914746$var$emitErrorNT, this, err1);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err1 || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) $iUMdb.nextTick($6214f7de5f914746$var$emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                $iUMdb.nextTick($6214f7de5f914746$var$emitErrorAndCloseNT, _this, err);
            } else $iUMdb.nextTick($6214f7de5f914746$var$emitCloseNT, _this);
        } else if (cb) {
            $iUMdb.nextTick($6214f7de5f914746$var$emitCloseNT, _this);
            cb(err);
        } else $iUMdb.nextTick($6214f7de5f914746$var$emitCloseNT, _this);
    });
    return this;
}
function $6214f7de5f914746$var$emitErrorAndCloseNT(self, err) {
    $6214f7de5f914746$var$emitErrorNT(self, err);
    $6214f7de5f914746$var$emitCloseNT(self);
}
function $6214f7de5f914746$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
}
function $6214f7de5f914746$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $6214f7de5f914746$var$emitErrorNT(self, err) {
    self.emit('error', err);
}
function $6214f7de5f914746$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit('error', err);
}
module.exports = {
    destroy: $6214f7de5f914746$var$destroy,
    undestroy: $6214f7de5f914746$var$undestroy,
    errorOrDestroy: $6214f7de5f914746$var$errorOrDestroy
};

});

parcelRequire.register("3Atuv", function(module, exports) {
'use strict';

var $6imWb = parcelRequire("6imWb");
var $29cb9c36b0279995$var$ERR_INVALID_OPT_VALUE = $6imWb.codes.ERR_INVALID_OPT_VALUE;
function $29cb9c36b0279995$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $29cb9c36b0279995$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = $29cb9c36b0279995$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : 'highWaterMark';
            throw new $29cb9c36b0279995$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $29cb9c36b0279995$var$getHighWaterMark
};

});
parcelRequire.register("6imWb", function(module, exports) {

$parcel$export(module.exports, "codes", function () { return $49563768baad7688$export$e45cb6485273080e; }, function (v) { return $49563768baad7688$export$e45cb6485273080e = v; });
parcelRequire("6vt9n");
var $83MoV = parcelRequire("83MoV");
var $49563768baad7688$export$e45cb6485273080e;
'use strict';
function $49563768baad7688$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $49563768baad7688$var$codes = {};
function $49563768baad7688$var$createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        $49563768baad7688$var$_inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    $49563768baad7688$var$codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $49563768baad7688$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $49563768baad7688$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $49563768baad7688$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $49563768baad7688$var$includes(str, search, start) {
    if (typeof start !== 'number') start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$49563768baad7688$var$createErrorType('ERR_INVALID_OPT_VALUE', function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$49563768baad7688$var$createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === 'string' && $49563768baad7688$var$startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
    } else determiner = 'must be';
    var msg;
    if ($49563768baad7688$var$endsWith(name, ' argument')) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($49563768baad7688$var$oneOf(expected, 'type'));
    else {
        var type = $49563768baad7688$var$includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat($49563768baad7688$var$oneOf(expected, 'type'));
    }
    msg += ". Received type ".concat(typeof actual === "undefined" ? "undefined" : $83MoV.default(actual));
    return msg;
}, TypeError);
$49563768baad7688$var$createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
$49563768baad7688$var$createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function(name) {
    return 'The ' + name + ' method is not implemented';
});
$49563768baad7688$var$createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
$49563768baad7688$var$createErrorType('ERR_STREAM_DESTROYED', function(name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
});
$49563768baad7688$var$createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
$49563768baad7688$var$createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
$49563768baad7688$var$createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
$49563768baad7688$var$createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
$49563768baad7688$var$createErrorType('ERR_UNKNOWN_ENCODING', function(arg) {
    return 'Unknown encoding: ' + arg;
}, TypeError);
$49563768baad7688$var$createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
$49563768baad7688$export$e45cb6485273080e = $49563768baad7688$var$codes;

});


parcelRequire.register("go6Yu", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';

var $iUMdb = parcelRequire("iUMdb");
/*<replacement>*/ var $bee44c402aa78cd8$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $bee44c402aa78cd8$var$Duplex;

var $fuXvX = parcelRequire("fuXvX");

var $l8sXb = parcelRequire("l8sXb");

(parcelRequire("2gGh5"))($bee44c402aa78cd8$var$Duplex, $fuXvX);
// Allow the keys array to be GC'ed.
var $bee44c402aa78cd8$var$keys = $bee44c402aa78cd8$var$objectKeys($l8sXb.prototype);
for(var $bee44c402aa78cd8$var$v = 0; $bee44c402aa78cd8$var$v < $bee44c402aa78cd8$var$keys.length; $bee44c402aa78cd8$var$v++){
    var $bee44c402aa78cd8$var$method = $bee44c402aa78cd8$var$keys[$bee44c402aa78cd8$var$v];
    if (!$bee44c402aa78cd8$var$Duplex.prototype[$bee44c402aa78cd8$var$method]) $bee44c402aa78cd8$var$Duplex.prototype[$bee44c402aa78cd8$var$method] = $l8sXb.prototype[$bee44c402aa78cd8$var$method];
}
function $bee44c402aa78cd8$var$Duplex(options) {
    if (!(this instanceof $bee44c402aa78cd8$var$Duplex)) return new $bee44c402aa78cd8$var$Duplex(options);
    $fuXvX.call(this, options);
    $l8sXb.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once('end', $bee44c402aa78cd8$var$onend);
        }
    }
}
Object.defineProperty($bee44c402aa78cd8$var$Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($bee44c402aa78cd8$var$Duplex.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($bee44c402aa78cd8$var$Duplex.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function $bee44c402aa78cd8$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    $iUMdb.nextTick($bee44c402aa78cd8$var$onEndNT, this);
}
function $bee44c402aa78cd8$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($bee44c402aa78cd8$var$Duplex.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRequire.register("l8sXb", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

var $iUMdb = parcelRequire("iUMdb");
module.exports = $f630cdedc5560f2d$var$Writable;
/* <replacement> */ function $f630cdedc5560f2d$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function $f630cdedc5560f2d$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $f630cdedc5560f2d$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $f630cdedc5560f2d$var$Duplex;
/*</replacement>*/ $f630cdedc5560f2d$var$Writable.WritableState = $f630cdedc5560f2d$var$WritableState;

/*<replacement>*/ var $f630cdedc5560f2d$var$internalUtil = {
    deprecate: (parcelRequire("ikftJ"))
};

var $gj2zO = parcelRequire("gj2zO");

var $5vuHX = parcelRequire("5vuHX");
var $f630cdedc5560f2d$require$Buffer = $5vuHX.Buffer;
var $f630cdedc5560f2d$var$OurUint8Array = $parcel$global.Uint8Array || function() {};
function $f630cdedc5560f2d$var$_uint8ArrayToBuffer(chunk) {
    return $f630cdedc5560f2d$require$Buffer.from(chunk);
}
function $f630cdedc5560f2d$var$_isUint8Array(obj) {
    return $f630cdedc5560f2d$require$Buffer.isBuffer(obj) || obj instanceof $f630cdedc5560f2d$var$OurUint8Array;
}

var $8q5r5 = parcelRequire("8q5r5");

var $3Atuv = parcelRequire("3Atuv");
var $f630cdedc5560f2d$var$getHighWaterMark = $3Atuv.getHighWaterMark;

var $6imWb = parcelRequire("6imWb");
var $f630cdedc5560f2d$require$_require$codes = $6imWb.codes;
var $f630cdedc5560f2d$var$ERR_INVALID_ARG_TYPE = $f630cdedc5560f2d$require$_require$codes.ERR_INVALID_ARG_TYPE, $f630cdedc5560f2d$var$ERR_METHOD_NOT_IMPLEMENTED = $f630cdedc5560f2d$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $f630cdedc5560f2d$var$ERR_MULTIPLE_CALLBACK = $f630cdedc5560f2d$require$_require$codes.ERR_MULTIPLE_CALLBACK, $f630cdedc5560f2d$var$ERR_STREAM_CANNOT_PIPE = $f630cdedc5560f2d$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $f630cdedc5560f2d$var$ERR_STREAM_DESTROYED = $f630cdedc5560f2d$require$_require$codes.ERR_STREAM_DESTROYED, $f630cdedc5560f2d$var$ERR_STREAM_NULL_VALUES = $f630cdedc5560f2d$require$_require$codes.ERR_STREAM_NULL_VALUES, $f630cdedc5560f2d$var$ERR_STREAM_WRITE_AFTER_END = $f630cdedc5560f2d$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $f630cdedc5560f2d$var$ERR_UNKNOWN_ENCODING = $f630cdedc5560f2d$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $f630cdedc5560f2d$var$errorOrDestroy = $8q5r5.errorOrDestroy;

(parcelRequire("2gGh5"))($f630cdedc5560f2d$var$Writable, $gj2zO);
function $f630cdedc5560f2d$var$nop() {}

function $f630cdedc5560f2d$var$WritableState(options, stream, isDuplex) {
    $f630cdedc5560f2d$var$Duplex = $f630cdedc5560f2d$var$Duplex || (parcelRequire("go6Yu"));
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $f630cdedc5560f2d$var$Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $f630cdedc5560f2d$var$getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $f630cdedc5560f2d$var$onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $f630cdedc5560f2d$var$CorkedRequest(this);
}
$f630cdedc5560f2d$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($f630cdedc5560f2d$var$WritableState.prototype, 'buffer', {
            get: $f630cdedc5560f2d$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $f630cdedc5560f2d$var$realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    $f630cdedc5560f2d$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($f630cdedc5560f2d$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($f630cdedc5560f2d$var$realHasInstance.call(this, object)) return true;
            if (this !== $f630cdedc5560f2d$var$Writable) return false;
            return object && object._writableState instanceof $f630cdedc5560f2d$var$WritableState;
        }
    });
} else $f630cdedc5560f2d$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $f630cdedc5560f2d$var$Writable(options) {
    $f630cdedc5560f2d$var$Duplex = $f630cdedc5560f2d$var$Duplex || (parcelRequire("go6Yu")); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $f630cdedc5560f2d$var$Duplex;
    if (!isDuplex && !$f630cdedc5560f2d$var$realHasInstance.call($f630cdedc5560f2d$var$Writable, this)) return new $f630cdedc5560f2d$var$Writable(options);
    this._writableState = new $f630cdedc5560f2d$var$WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    $gj2zO.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
$f630cdedc5560f2d$var$Writable.prototype.pipe = function() {
    $f630cdedc5560f2d$var$errorOrDestroy(this, new $f630cdedc5560f2d$var$ERR_STREAM_CANNOT_PIPE());
};
function $f630cdedc5560f2d$var$writeAfterEnd(stream, cb) {
    var er = new $f630cdedc5560f2d$var$ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    $f630cdedc5560f2d$var$errorOrDestroy(stream, er);
    $iUMdb.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $f630cdedc5560f2d$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $f630cdedc5560f2d$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== 'string' && !state.objectMode) er = new $f630cdedc5560f2d$var$ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer'
    ], chunk);
    if (er) {
        $f630cdedc5560f2d$var$errorOrDestroy(stream, er);
        $iUMdb.nextTick(cb, er);
        return false;
    }
    return true;
}
$f630cdedc5560f2d$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $f630cdedc5560f2d$var$_isUint8Array(chunk);
    if (isBuf && !$f630cdedc5560f2d$require$Buffer.isBuffer(chunk)) chunk = $f630cdedc5560f2d$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = $f630cdedc5560f2d$var$nop;
    if (state.ending) $f630cdedc5560f2d$var$writeAfterEnd(this, cb);
    else if (isBuf || $f630cdedc5560f2d$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $f630cdedc5560f2d$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$f630cdedc5560f2d$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$f630cdedc5560f2d$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $f630cdedc5560f2d$var$clearBuffer(this, state);
    }
};
$f630cdedc5560f2d$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new $f630cdedc5560f2d$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($f630cdedc5560f2d$var$Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $f630cdedc5560f2d$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = $f630cdedc5560f2d$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($f630cdedc5560f2d$var$Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $f630cdedc5560f2d$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $f630cdedc5560f2d$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $f630cdedc5560f2d$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $f630cdedc5560f2d$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $f630cdedc5560f2d$var$ERR_STREAM_DESTROYED('write'));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $f630cdedc5560f2d$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $iUMdb.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        $iUMdb.nextTick($f630cdedc5560f2d$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $f630cdedc5560f2d$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $f630cdedc5560f2d$var$errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        $f630cdedc5560f2d$var$finishMaybe(stream, state);
    }
}
function $f630cdedc5560f2d$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $f630cdedc5560f2d$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new $f630cdedc5560f2d$var$ERR_MULTIPLE_CALLBACK();
    $f630cdedc5560f2d$var$onwriteStateUpdate(state);
    if (er) $f630cdedc5560f2d$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $f630cdedc5560f2d$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $f630cdedc5560f2d$var$clearBuffer(stream, state);
        if (sync) $iUMdb.nextTick($f630cdedc5560f2d$var$afterWrite, stream, state, finished, cb);
        else $f630cdedc5560f2d$var$afterWrite(stream, state, finished, cb);
    }
}
function $f630cdedc5560f2d$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $f630cdedc5560f2d$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $f630cdedc5560f2d$var$finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $f630cdedc5560f2d$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
} // if there's something in the buffer waiting, then process it
function $f630cdedc5560f2d$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $f630cdedc5560f2d$var$doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $f630cdedc5560f2d$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $f630cdedc5560f2d$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$f630cdedc5560f2d$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $f630cdedc5560f2d$var$ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
$f630cdedc5560f2d$var$Writable.prototype._writev = null;
$f630cdedc5560f2d$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) $f630cdedc5560f2d$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($f630cdedc5560f2d$var$Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $f630cdedc5560f2d$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $f630cdedc5560f2d$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $f630cdedc5560f2d$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit('prefinish');
        $f630cdedc5560f2d$var$finishMaybe(stream, state);
    });
}
function $f630cdedc5560f2d$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $iUMdb.nextTick($f630cdedc5560f2d$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function $f630cdedc5560f2d$var$finishMaybe(stream, state) {
    var need = $f630cdedc5560f2d$var$needFinish(state);
    if (need) {
        $f630cdedc5560f2d$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $f630cdedc5560f2d$var$endWritable(stream, state, cb) {
    state.ending = true;
    $f630cdedc5560f2d$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $iUMdb.nextTick(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $f630cdedc5560f2d$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($f630cdedc5560f2d$var$Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$f630cdedc5560f2d$var$Writable.prototype.destroy = $8q5r5.destroy;
$f630cdedc5560f2d$var$Writable.prototype._undestroy = $8q5r5.undestroy;
$f630cdedc5560f2d$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});
parcelRequire.register("ikftJ", function(module, exports) {
/**
 * Module exports.
 */ module.exports = $d57619f6d7fca7fd$var$deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function $d57619f6d7fca7fd$var$deprecate(fn, msg) {
    if ($d57619f6d7fca7fd$var$config('noDeprecation')) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if ($d57619f6d7fca7fd$var$config('throwDeprecation')) throw new Error(msg);
            else if ($d57619f6d7fca7fd$var$config('traceDeprecation')) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function $d57619f6d7fca7fd$var$config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!$parcel$global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = $parcel$global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === 'true';
}

});



parcelRequire.register("2bCBN", function(module, exports) {

$parcel$export(module.exports, "StringDecoder", function () { return $197a8ebad3155b6a$export$63a7aa211a91ed69; }, function (v) { return $197a8ebad3155b6a$export$63a7aa211a91ed69 = v; });
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
var $197a8ebad3155b6a$export$63a7aa211a91ed69;
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var $6DGcH = parcelRequire("6DGcH");
var $197a8ebad3155b6a$require$Buffer = $6DGcH.Buffer;
/*</replacement>*/ var $197a8ebad3155b6a$var$isEncoding = $197a8ebad3155b6a$require$Buffer.isEncoding || function(encoding) {
    encoding = '' + encoding;
    switch(encoding && encoding.toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
            return true;
        default:
            return false;
    }
};
function $197a8ebad3155b6a$var$_normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while(true)switch(enc){
        case 'utf8':
        case 'utf-8':
            return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return 'utf16le';
        case 'latin1':
        case 'binary':
            return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
            return enc;
        default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function $197a8ebad3155b6a$var$normalizeEncoding(enc) {
    var nenc = $197a8ebad3155b6a$var$_normalizeEncoding(enc);
    if (typeof nenc !== 'string' && ($197a8ebad3155b6a$require$Buffer.isEncoding === $197a8ebad3155b6a$var$isEncoding || !$197a8ebad3155b6a$var$isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
}
$197a8ebad3155b6a$export$63a7aa211a91ed69 = $197a8ebad3155b6a$var$StringDecoder;
function $197a8ebad3155b6a$var$StringDecoder(encoding) {
    this.encoding = $197a8ebad3155b6a$var$normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case 'utf16le':
            this.text = $197a8ebad3155b6a$var$utf16Text;
            this.end = $197a8ebad3155b6a$var$utf16End;
            nb = 4;
            break;
        case 'utf8':
            this.fillLast = $197a8ebad3155b6a$var$utf8FillLast;
            nb = 4;
            break;
        case 'base64':
            this.text = $197a8ebad3155b6a$var$base64Text;
            this.end = $197a8ebad3155b6a$var$base64End;
            nb = 3;
            break;
        default:
            this.write = $197a8ebad3155b6a$var$simpleWrite;
            this.end = $197a8ebad3155b6a$var$simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = $197a8ebad3155b6a$require$Buffer.allocUnsafe(nb);
}
$197a8ebad3155b6a$var$StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
};
$197a8ebad3155b6a$var$StringDecoder.prototype.end = $197a8ebad3155b6a$var$utf8End;
// Returns only complete characters in a Buffer
$197a8ebad3155b6a$var$StringDecoder.prototype.text = $197a8ebad3155b6a$var$utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
$197a8ebad3155b6a$var$StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function $197a8ebad3155b6a$var$utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function $197a8ebad3155b6a$var$utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = $197a8ebad3155b6a$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $197a8ebad3155b6a$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $197a8ebad3155b6a$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function $197a8ebad3155b6a$var$utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return '\ufffd';
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function $197a8ebad3155b6a$var$utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = $197a8ebad3155b6a$var$utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function $197a8ebad3155b6a$var$utf8Text(buf, i) {
    var total = $197a8ebad3155b6a$var$utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function $197a8ebad3155b6a$var$utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function $197a8ebad3155b6a$var$utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function $197a8ebad3155b6a$var$utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
}
function $197a8ebad3155b6a$var$base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
}
function $197a8ebad3155b6a$var$base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function $197a8ebad3155b6a$var$simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function $197a8ebad3155b6a$var$simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
}

});

parcelRequire.register("esxYX", function(module, exports) {
'use strict';

var $iUMdb = parcelRequire("iUMdb");
var $a86e0a5fbffad576$var$_Object$setPrototypeO;
function $a86e0a5fbffad576$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}

var $ciyPv = parcelRequire("ciyPv");
var $a86e0a5fbffad576$var$kLastResolve = Symbol('lastResolve');
var $a86e0a5fbffad576$var$kLastReject = Symbol('lastReject');
var $a86e0a5fbffad576$var$kError = Symbol('error');
var $a86e0a5fbffad576$var$kEnded = Symbol('ended');
var $a86e0a5fbffad576$var$kLastPromise = Symbol('lastPromise');
var $a86e0a5fbffad576$var$kHandlePromise = Symbol('handlePromise');
var $a86e0a5fbffad576$var$kStream = Symbol('stream');
function $a86e0a5fbffad576$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $a86e0a5fbffad576$var$readAndResolve(iter) {
    var resolve = iter[$a86e0a5fbffad576$var$kLastResolve];
    if (resolve !== null) {
        var data = iter[$a86e0a5fbffad576$var$kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$a86e0a5fbffad576$var$kLastPromise] = null;
            iter[$a86e0a5fbffad576$var$kLastResolve] = null;
            iter[$a86e0a5fbffad576$var$kLastReject] = null;
            resolve($a86e0a5fbffad576$var$createIterResult(data, false));
        }
    }
}
function $a86e0a5fbffad576$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $iUMdb.nextTick($a86e0a5fbffad576$var$readAndResolve, iter);
}
function $a86e0a5fbffad576$var$wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[$a86e0a5fbffad576$var$kEnded]) {
                resolve($a86e0a5fbffad576$var$createIterResult(undefined, true));
                return;
            }
            iter[$a86e0a5fbffad576$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
var $a86e0a5fbffad576$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var $a86e0a5fbffad576$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(($a86e0a5fbffad576$var$_Object$setPrototypeO = {
    get stream () {
        return this[$a86e0a5fbffad576$var$kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[$a86e0a5fbffad576$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$a86e0a5fbffad576$var$kEnded]) return Promise.resolve($a86e0a5fbffad576$var$createIterResult(undefined, true));
        if (this[$a86e0a5fbffad576$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            $iUMdb.nextTick(function() {
                if (_this[$a86e0a5fbffad576$var$kError]) reject(_this[$a86e0a5fbffad576$var$kError]);
                else resolve($a86e0a5fbffad576$var$createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[$a86e0a5fbffad576$var$kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise($a86e0a5fbffad576$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[$a86e0a5fbffad576$var$kStream].read();
            if (data !== null) return Promise.resolve($a86e0a5fbffad576$var$createIterResult(data, false));
            promise = new Promise(this[$a86e0a5fbffad576$var$kHandlePromise]);
        }
        this[$a86e0a5fbffad576$var$kLastPromise] = promise;
        return promise;
    }
}, $a86e0a5fbffad576$var$_defineProperty($a86e0a5fbffad576$var$_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), $a86e0a5fbffad576$var$_defineProperty($a86e0a5fbffad576$var$_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[$a86e0a5fbffad576$var$kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve($a86e0a5fbffad576$var$createIterResult(undefined, true));
        });
    });
}), $a86e0a5fbffad576$var$_Object$setPrototypeO), $a86e0a5fbffad576$var$AsyncIteratorPrototype);
var $a86e0a5fbffad576$var$createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create($a86e0a5fbffad576$var$ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, $a86e0a5fbffad576$var$_defineProperty(_Object$create, $a86e0a5fbffad576$var$kStream, {
        value: stream,
        writable: true
    }), $a86e0a5fbffad576$var$_defineProperty(_Object$create, $a86e0a5fbffad576$var$kLastResolve, {
        value: null,
        writable: true
    }), $a86e0a5fbffad576$var$_defineProperty(_Object$create, $a86e0a5fbffad576$var$kLastReject, {
        value: null,
        writable: true
    }), $a86e0a5fbffad576$var$_defineProperty(_Object$create, $a86e0a5fbffad576$var$kError, {
        value: null,
        writable: true
    }), $a86e0a5fbffad576$var$_defineProperty(_Object$create, $a86e0a5fbffad576$var$kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), $a86e0a5fbffad576$var$_defineProperty(_Object$create, $a86e0a5fbffad576$var$kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[$a86e0a5fbffad576$var$kStream].read();
            if (data) {
                iterator[$a86e0a5fbffad576$var$kLastPromise] = null;
                iterator[$a86e0a5fbffad576$var$kLastResolve] = null;
                iterator[$a86e0a5fbffad576$var$kLastReject] = null;
                resolve($a86e0a5fbffad576$var$createIterResult(data, false));
            } else {
                iterator[$a86e0a5fbffad576$var$kLastResolve] = resolve;
                iterator[$a86e0a5fbffad576$var$kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[$a86e0a5fbffad576$var$kLastPromise] = null;
    $ciyPv(stream, function(err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
            var reject = iterator[$a86e0a5fbffad576$var$kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$a86e0a5fbffad576$var$kLastPromise] = null;
                iterator[$a86e0a5fbffad576$var$kLastResolve] = null;
                iterator[$a86e0a5fbffad576$var$kLastReject] = null;
                reject(err);
            }
            iterator[$a86e0a5fbffad576$var$kError] = err;
            return;
        }
        var resolve = iterator[$a86e0a5fbffad576$var$kLastResolve];
        if (resolve !== null) {
            iterator[$a86e0a5fbffad576$var$kLastPromise] = null;
            iterator[$a86e0a5fbffad576$var$kLastResolve] = null;
            iterator[$a86e0a5fbffad576$var$kLastReject] = null;
            resolve($a86e0a5fbffad576$var$createIterResult(undefined, true));
        }
        iterator[$a86e0a5fbffad576$var$kEnded] = true;
    });
    stream.on('readable', $a86e0a5fbffad576$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $a86e0a5fbffad576$var$createReadableStreamAsyncIterator;

});
parcelRequire.register("ciyPv", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var $6imWb = parcelRequire("6imWb");
var $8f422eeddb996176$var$ERR_STREAM_PREMATURE_CLOSE = $6imWb.codes.ERR_STREAM_PREMATURE_CLOSE;
function $8f422eeddb996176$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $8f422eeddb996176$var$noop() {}
function $8f422eeddb996176$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function $8f422eeddb996176$var$eos(stream, opts, callback) {
    if (typeof opts === 'function') return $8f422eeddb996176$var$eos(stream, null, opts);
    if (!opts) opts = {};
    callback = $8f422eeddb996176$var$once(callback || $8f422eeddb996176$var$noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $8f422eeddb996176$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $8f422eeddb996176$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
    };
    if ($8f422eeddb996176$var$isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();
        else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
    }
    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function() {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
    };
}
module.exports = $8f422eeddb996176$var$eos;

});


parcelRequire.register("2kzVV", function(module, exports) {
module.exports = function() {
    throw new Error('Readable.from is not available in the browser');
};

});


parcelRequire.register("2yIbu", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = $1dd107d40e4f2194$var$Transform;

var $6imWb = parcelRequire("6imWb");
var $1dd107d40e4f2194$require$_require$codes = $6imWb.codes;
var $1dd107d40e4f2194$var$ERR_METHOD_NOT_IMPLEMENTED = $1dd107d40e4f2194$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $1dd107d40e4f2194$var$ERR_MULTIPLE_CALLBACK = $1dd107d40e4f2194$require$_require$codes.ERR_MULTIPLE_CALLBACK, $1dd107d40e4f2194$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $1dd107d40e4f2194$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $1dd107d40e4f2194$var$ERR_TRANSFORM_WITH_LENGTH_0 = $1dd107d40e4f2194$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $go6Yu = parcelRequire("go6Yu");

(parcelRequire("2gGh5"))($1dd107d40e4f2194$var$Transform, $go6Yu);
function $1dd107d40e4f2194$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit('error', new $1dd107d40e4f2194$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $1dd107d40e4f2194$var$Transform(options) {
    if (!(this instanceof $1dd107d40e4f2194$var$Transform)) return new $1dd107d40e4f2194$var$Transform(options);
    $go6Yu.call(this, options);
    this._transformState = {
        afterTransform: $1dd107d40e4f2194$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', $1dd107d40e4f2194$var$prefinish);
}
function $1dd107d40e4f2194$var$prefinish() {
    var _this = this;
    if (typeof this._flush === 'function' && !this._readableState.destroyed) this._flush(function(er, data) {
        $1dd107d40e4f2194$var$done(_this, er, data);
    });
    else $1dd107d40e4f2194$var$done(this, null, null);
}
$1dd107d40e4f2194$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $go6Yu.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$1dd107d40e4f2194$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $1dd107d40e4f2194$var$ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
$1dd107d40e4f2194$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$1dd107d40e4f2194$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$1dd107d40e4f2194$var$Transform.prototype._destroy = function(err, cb) {
    $go6Yu.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function $1dd107d40e4f2194$var$done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $1dd107d40e4f2194$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $1dd107d40e4f2194$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRequire.register("l3iyS", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = $f53846ba34c27c8e$var$PassThrough;

var $2yIbu = parcelRequire("2yIbu");

(parcelRequire("2gGh5"))($f53846ba34c27c8e$var$PassThrough, $2yIbu);
function $f53846ba34c27c8e$var$PassThrough(options) {
    if (!(this instanceof $f53846ba34c27c8e$var$PassThrough)) return new $f53846ba34c27c8e$var$PassThrough(options);
    $2yIbu.call(this, options);
}
$f53846ba34c27c8e$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRequire.register("4m9V2", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var $32c0e92d2ca9c862$var$eos;
function $32c0e92d2ca9c862$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}

var $6imWb = parcelRequire("6imWb");
var $32c0e92d2ca9c862$require$_require$codes = $6imWb.codes;
var $32c0e92d2ca9c862$var$ERR_MISSING_ARGS = $32c0e92d2ca9c862$require$_require$codes.ERR_MISSING_ARGS, $32c0e92d2ca9c862$var$ERR_STREAM_DESTROYED = $32c0e92d2ca9c862$require$_require$codes.ERR_STREAM_DESTROYED;
function $32c0e92d2ca9c862$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $32c0e92d2ca9c862$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}

function $32c0e92d2ca9c862$var$destroyer(stream, reading, writing, callback) {
    callback = $32c0e92d2ca9c862$var$once(callback);
    var closed = false;
    stream.on('close', function() {
        closed = true;
    });
    if ($32c0e92d2ca9c862$var$eos === undefined) $32c0e92d2ca9c862$var$eos = (parcelRequire("ciyPv"));
    $32c0e92d2ca9c862$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if ($32c0e92d2ca9c862$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new $32c0e92d2ca9c862$var$ERR_STREAM_DESTROYED('pipe'));
    };
}
function $32c0e92d2ca9c862$var$call(fn) {
    fn();
}
function $32c0e92d2ca9c862$var$pipe(from, to) {
    return from.pipe(to);
}
function $32c0e92d2ca9c862$var$popCallback(streams) {
    if (!streams.length) return $32c0e92d2ca9c862$var$noop;
    if (typeof streams[streams.length - 1] !== 'function') return $32c0e92d2ca9c862$var$noop;
    return streams.pop();
}
function $32c0e92d2ca9c862$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $32c0e92d2ca9c862$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $32c0e92d2ca9c862$var$ERR_MISSING_ARGS('streams');
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $32c0e92d2ca9c862$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($32c0e92d2ca9c862$var$call);
            if (reading) return;
            destroys.forEach($32c0e92d2ca9c862$var$call);
            callback(error);
        });
    });
    return streams.reduce($32c0e92d2ca9c862$var$pipe);
}
module.exports = $32c0e92d2ca9c862$var$pipeline;

});




parcelRequire.register("9lf8s", function(module, exports) {
'use strict';

var $5vuHX = parcelRequire("5vuHX");
var $6cd1d0d113af02fd$require$Buffer = $5vuHX.Buffer;

var $2gGh5 = parcelRequire("2gGh5");

var $3r0y8 = parcelRequire("3r0y8");
var $6cd1d0d113af02fd$var$ARRAY16 = new Array(16);
var $6cd1d0d113af02fd$var$zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var $6cd1d0d113af02fd$var$zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var $6cd1d0d113af02fd$var$sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var $6cd1d0d113af02fd$var$sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var $6cd1d0d113af02fd$var$hl = [
    0x00000000,
    0x5a827999,
    0x6ed9eba1,
    0x8f1bbcdc,
    0xa953fd4e
];
var $6cd1d0d113af02fd$var$hr = [
    0x50a28be6,
    0x5c4dd124,
    0x6d703ef3,
    0x7a6d76e9,
    0x00000000
];
function $6cd1d0d113af02fd$var$RIPEMD160() {
    $3r0y8.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
}
$2gGh5($6cd1d0d113af02fd$var$RIPEMD160, $3r0y8);
$6cd1d0d113af02fd$var$RIPEMD160.prototype._update = function() {
    var words = $6cd1d0d113af02fd$var$ARRAY16;
    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    // computation
    for(var i = 0; i < 80; i += 1){
        var tl;
        var tr;
        if (i < 16) {
            tl = $6cd1d0d113af02fd$var$fn1(al, bl, cl, dl, el, words[$6cd1d0d113af02fd$var$zl[i]], $6cd1d0d113af02fd$var$hl[0], $6cd1d0d113af02fd$var$sl[i]);
            tr = $6cd1d0d113af02fd$var$fn5(ar, br, cr, dr, er, words[$6cd1d0d113af02fd$var$zr[i]], $6cd1d0d113af02fd$var$hr[0], $6cd1d0d113af02fd$var$sr[i]);
        } else if (i < 32) {
            tl = $6cd1d0d113af02fd$var$fn2(al, bl, cl, dl, el, words[$6cd1d0d113af02fd$var$zl[i]], $6cd1d0d113af02fd$var$hl[1], $6cd1d0d113af02fd$var$sl[i]);
            tr = $6cd1d0d113af02fd$var$fn4(ar, br, cr, dr, er, words[$6cd1d0d113af02fd$var$zr[i]], $6cd1d0d113af02fd$var$hr[1], $6cd1d0d113af02fd$var$sr[i]);
        } else if (i < 48) {
            tl = $6cd1d0d113af02fd$var$fn3(al, bl, cl, dl, el, words[$6cd1d0d113af02fd$var$zl[i]], $6cd1d0d113af02fd$var$hl[2], $6cd1d0d113af02fd$var$sl[i]);
            tr = $6cd1d0d113af02fd$var$fn3(ar, br, cr, dr, er, words[$6cd1d0d113af02fd$var$zr[i]], $6cd1d0d113af02fd$var$hr[2], $6cd1d0d113af02fd$var$sr[i]);
        } else if (i < 64) {
            tl = $6cd1d0d113af02fd$var$fn4(al, bl, cl, dl, el, words[$6cd1d0d113af02fd$var$zl[i]], $6cd1d0d113af02fd$var$hl[3], $6cd1d0d113af02fd$var$sl[i]);
            tr = $6cd1d0d113af02fd$var$fn2(ar, br, cr, dr, er, words[$6cd1d0d113af02fd$var$zr[i]], $6cd1d0d113af02fd$var$hr[3], $6cd1d0d113af02fd$var$sr[i]);
        } else {
            tl = $6cd1d0d113af02fd$var$fn5(al, bl, cl, dl, el, words[$6cd1d0d113af02fd$var$zl[i]], $6cd1d0d113af02fd$var$hl[4], $6cd1d0d113af02fd$var$sl[i]);
            tr = $6cd1d0d113af02fd$var$fn1(ar, br, cr, dr, er, words[$6cd1d0d113af02fd$var$zr[i]], $6cd1d0d113af02fd$var$hr[4], $6cd1d0d113af02fd$var$sr[i]);
        }
        al = el;
        el = dl;
        dl = $6cd1d0d113af02fd$var$rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = $6cd1d0d113af02fd$var$rotl(cr, 10);
        cr = br;
        br = tr;
    }
    // update state
    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
};
$6cd1d0d113af02fd$var$RIPEMD160.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = $6cd1d0d113af02fd$require$Buffer.alloc ? $6cd1d0d113af02fd$require$Buffer.alloc(20) : new $6cd1d0d113af02fd$require$Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
};
function $6cd1d0d113af02fd$var$rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function $6cd1d0d113af02fd$var$fn1(a, b, c, d, e, m, k, s) {
    return $6cd1d0d113af02fd$var$rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}
function $6cd1d0d113af02fd$var$fn2(a, b, c, d, e, m, k, s) {
    return $6cd1d0d113af02fd$var$rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}
function $6cd1d0d113af02fd$var$fn3(a, b, c, d, e, m, k, s) {
    return $6cd1d0d113af02fd$var$rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}
function $6cd1d0d113af02fd$var$fn4(a, b, c, d, e, m, k, s) {
    return $6cd1d0d113af02fd$var$rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}
function $6cd1d0d113af02fd$var$fn5(a, b, c, d, e, m, k, s) {
    return $6cd1d0d113af02fd$var$rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}
module.exports = $6cd1d0d113af02fd$var$RIPEMD160;

});

parcelRequire.register("aP0a7", function(module, exports) {
var $7e0ecafd3edf3575$var$exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = $7e0ecafd3edf3575$var$exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');
    return new Algorithm();
};

$7e0ecafd3edf3575$var$exports.sha = (parcelRequire("2ry0Q"));

$7e0ecafd3edf3575$var$exports.sha1 = (parcelRequire("16gZm"));

$7e0ecafd3edf3575$var$exports.sha224 = (parcelRequire("frh91"));

$7e0ecafd3edf3575$var$exports.sha256 = (parcelRequire("9DX3N"));

$7e0ecafd3edf3575$var$exports.sha384 = (parcelRequire("axo4n"));

$7e0ecafd3edf3575$var$exports.sha512 = (parcelRequire("cFcso"));

});
parcelRequire.register("2ry0Q", function(module, exports) {

var $2gGh5 = parcelRequire("2gGh5");

var $5tbhD = parcelRequire("5tbhD");

var $6DGcH = parcelRequire("6DGcH");
var $1c787c97064ef9b4$require$Buffer = $6DGcH.Buffer;
var $1c787c97064ef9b4$var$K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var $1c787c97064ef9b4$var$W = new Array(80);
function $1c787c97064ef9b4$var$Sha() {
    this.init();
    this._w = $1c787c97064ef9b4$var$W;
    $5tbhD.call(this, 64, 56);
}
$2gGh5($1c787c97064ef9b4$var$Sha, $5tbhD);
$1c787c97064ef9b4$var$Sha.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function $1c787c97064ef9b4$var$rotl5(num) {
    return num << 5 | num >>> 27;
}
function $1c787c97064ef9b4$var$rotl30(num) {
    return num << 30 | num >>> 2;
}
function $1c787c97064ef9b4$var$ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
$1c787c97064ef9b4$var$Sha.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = $1c787c97064ef9b4$var$rotl5(a) + $1c787c97064ef9b4$var$ft(s, b, c, d) + e + W[j] + $1c787c97064ef9b4$var$K[s] | 0;
        e = d;
        d = c;
        c = $1c787c97064ef9b4$var$rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
$1c787c97064ef9b4$var$Sha.prototype._hash = function() {
    var H = $1c787c97064ef9b4$require$Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = $1c787c97064ef9b4$var$Sha;

});
parcelRequire.register("5tbhD", function(module, exports) {

var $6DGcH = parcelRequire("6DGcH");
var $3fb869da479af8fd$require$Buffer = $6DGcH.Buffer;
// prototype class for hash functions
function $3fb869da479af8fd$var$Hash(blockSize, finalSize) {
    this._block = $3fb869da479af8fd$require$Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
}
$3fb869da479af8fd$var$Hash.prototype.update = function(data, enc) {
    if (typeof data === 'string') {
        enc = enc || 'utf8';
        data = $3fb869da479af8fd$require$Buffer.from(data, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for(var offset = 0; offset < length;){
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) this._update(block);
    }
    this._len += length;
    return this;
};
$3fb869da479af8fd$var$Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 0x80;
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
    }
    var bits = this._len * 8;
    // uint32
    if (bits <= 0xffffffff) this._block.writeUInt32BE(bits, this._blockSize - 4);
    else {
        var lowBits = (bits & 0xffffffff) >>> 0;
        var highBits = (bits - lowBits) / 0x100000000;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
};
$3fb869da479af8fd$var$Hash.prototype._update = function() {
    throw new Error('_update must be implemented by subclass');
};
module.exports = $3fb869da479af8fd$var$Hash;

});


parcelRequire.register("16gZm", function(module, exports) {

var $2gGh5 = parcelRequire("2gGh5");

var $5tbhD = parcelRequire("5tbhD");

var $6DGcH = parcelRequire("6DGcH");
var $0cd38796441edecd$require$Buffer = $6DGcH.Buffer;
var $0cd38796441edecd$var$K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var $0cd38796441edecd$var$W = new Array(80);
function $0cd38796441edecd$var$Sha1() {
    this.init();
    this._w = $0cd38796441edecd$var$W;
    $5tbhD.call(this, 64, 56);
}
$2gGh5($0cd38796441edecd$var$Sha1, $5tbhD);
$0cd38796441edecd$var$Sha1.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function $0cd38796441edecd$var$rotl1(num) {
    return num << 1 | num >>> 31;
}
function $0cd38796441edecd$var$rotl5(num) {
    return num << 5 | num >>> 27;
}
function $0cd38796441edecd$var$rotl30(num) {
    return num << 30 | num >>> 2;
}
function $0cd38796441edecd$var$ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
$0cd38796441edecd$var$Sha1.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = $0cd38796441edecd$var$rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = $0cd38796441edecd$var$rotl5(a) + $0cd38796441edecd$var$ft(s, b, c, d) + e + W[j] + $0cd38796441edecd$var$K[s] | 0;
        e = d;
        d = c;
        c = $0cd38796441edecd$var$rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
$0cd38796441edecd$var$Sha1.prototype._hash = function() {
    var H = $0cd38796441edecd$require$Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = $0cd38796441edecd$var$Sha1;

});

parcelRequire.register("frh91", function(module, exports) {

var $2gGh5 = parcelRequire("2gGh5");

var $9DX3N = parcelRequire("9DX3N");

var $5tbhD = parcelRequire("5tbhD");

var $6DGcH = parcelRequire("6DGcH");
var $b3d6ad268a384c2f$require$Buffer = $6DGcH.Buffer;
var $b3d6ad268a384c2f$var$W = new Array(64);
function $b3d6ad268a384c2f$var$Sha224() {
    this.init();
    this._w = $b3d6ad268a384c2f$var$W // new Array(64)
    ;
    $5tbhD.call(this, 64, 56);
}
$2gGh5($b3d6ad268a384c2f$var$Sha224, $9DX3N);
$b3d6ad268a384c2f$var$Sha224.prototype.init = function() {
    this._a = 0xc1059ed8;
    this._b = 0x367cd507;
    this._c = 0x3070dd17;
    this._d = 0xf70e5939;
    this._e = 0xffc00b31;
    this._f = 0x68581511;
    this._g = 0x64f98fa7;
    this._h = 0xbefa4fa4;
    return this;
};
$b3d6ad268a384c2f$var$Sha224.prototype._hash = function() {
    var H = $b3d6ad268a384c2f$require$Buffer.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
};
module.exports = $b3d6ad268a384c2f$var$Sha224;

});
parcelRequire.register("9DX3N", function(module, exports) {

var $2gGh5 = parcelRequire("2gGh5");

var $5tbhD = parcelRequire("5tbhD");

var $6DGcH = parcelRequire("6DGcH");
var $705591b1b033afb1$require$Buffer = $6DGcH.Buffer;
var $705591b1b033afb1$var$K = [
    0x428A2F98,
    0x71374491,
    0xB5C0FBCF,
    0xE9B5DBA5,
    0x3956C25B,
    0x59F111F1,
    0x923F82A4,
    0xAB1C5ED5,
    0xD807AA98,
    0x12835B01,
    0x243185BE,
    0x550C7DC3,
    0x72BE5D74,
    0x80DEB1FE,
    0x9BDC06A7,
    0xC19BF174,
    0xE49B69C1,
    0xEFBE4786,
    0x0FC19DC6,
    0x240CA1CC,
    0x2DE92C6F,
    0x4A7484AA,
    0x5CB0A9DC,
    0x76F988DA,
    0x983E5152,
    0xA831C66D,
    0xB00327C8,
    0xBF597FC7,
    0xC6E00BF3,
    0xD5A79147,
    0x06CA6351,
    0x14292967,
    0x27B70A85,
    0x2E1B2138,
    0x4D2C6DFC,
    0x53380D13,
    0x650A7354,
    0x766A0ABB,
    0x81C2C92E,
    0x92722C85,
    0xA2BFE8A1,
    0xA81A664B,
    0xC24B8B70,
    0xC76C51A3,
    0xD192E819,
    0xD6990624,
    0xF40E3585,
    0x106AA070,
    0x19A4C116,
    0x1E376C08,
    0x2748774C,
    0x34B0BCB5,
    0x391C0CB3,
    0x4ED8AA4A,
    0x5B9CCA4F,
    0x682E6FF3,
    0x748F82EE,
    0x78A5636F,
    0x84C87814,
    0x8CC70208,
    0x90BEFFFA,
    0xA4506CEB,
    0xBEF9A3F7,
    0xC67178F2
];
var $705591b1b033afb1$var$W = new Array(64);
function $705591b1b033afb1$var$Sha256() {
    this.init();
    this._w = $705591b1b033afb1$var$W // new Array(64)
    ;
    $5tbhD.call(this, 64, 56);
}
$2gGh5($705591b1b033afb1$var$Sha256, $5tbhD);
$705591b1b033afb1$var$Sha256.prototype.init = function() {
    this._a = 0x6a09e667;
    this._b = 0xbb67ae85;
    this._c = 0x3c6ef372;
    this._d = 0xa54ff53a;
    this._e = 0x510e527f;
    this._f = 0x9b05688c;
    this._g = 0x1f83d9ab;
    this._h = 0x5be0cd19;
    return this;
};
function $705591b1b033afb1$var$ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function $705591b1b033afb1$var$maj(x, y, z) {
    return x & y | z & (x | y);
}
function $705591b1b033afb1$var$sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}
function $705591b1b033afb1$var$sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}
function $705591b1b033afb1$var$gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}
function $705591b1b033afb1$var$gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}
$705591b1b033afb1$var$Sha256.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 64; ++i)W[i] = $705591b1b033afb1$var$gamma1(W[i - 2]) + W[i - 7] + $705591b1b033afb1$var$gamma0(W[i - 15]) + W[i - 16] | 0;
    for(var j = 0; j < 64; ++j){
        var T1 = h + $705591b1b033afb1$var$sigma1(e) + $705591b1b033afb1$var$ch(e, f, g) + $705591b1b033afb1$var$K[j] + W[j] | 0;
        var T2 = $705591b1b033afb1$var$sigma0(a) + $705591b1b033afb1$var$maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
};
$705591b1b033afb1$var$Sha256.prototype._hash = function() {
    var H = $705591b1b033afb1$require$Buffer.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
};
module.exports = $705591b1b033afb1$var$Sha256;

});


parcelRequire.register("axo4n", function(module, exports) {

var $2gGh5 = parcelRequire("2gGh5");

var $cFcso = parcelRequire("cFcso");

var $5tbhD = parcelRequire("5tbhD");

var $6DGcH = parcelRequire("6DGcH");
var $7abfa82f43decdb5$require$Buffer = $6DGcH.Buffer;
var $7abfa82f43decdb5$var$W = new Array(160);
function $7abfa82f43decdb5$var$Sha384() {
    this.init();
    this._w = $7abfa82f43decdb5$var$W;
    $5tbhD.call(this, 128, 112);
}
$2gGh5($7abfa82f43decdb5$var$Sha384, $cFcso);
$7abfa82f43decdb5$var$Sha384.prototype.init = function() {
    this._ah = 0xcbbb9d5d;
    this._bh = 0x629a292a;
    this._ch = 0x9159015a;
    this._dh = 0x152fecd8;
    this._eh = 0x67332667;
    this._fh = 0x8eb44a87;
    this._gh = 0xdb0c2e0d;
    this._hh = 0x47b5481d;
    this._al = 0xc1059ed8;
    this._bl = 0x367cd507;
    this._cl = 0x3070dd17;
    this._dl = 0xf70e5939;
    this._el = 0xffc00b31;
    this._fl = 0x68581511;
    this._gl = 0x64f98fa7;
    this._hl = 0xbefa4fa4;
    return this;
};
$7abfa82f43decdb5$var$Sha384.prototype._hash = function() {
    var H = $7abfa82f43decdb5$require$Buffer.allocUnsafe(48);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
};
module.exports = $7abfa82f43decdb5$var$Sha384;

});
parcelRequire.register("cFcso", function(module, exports) {

var $2gGh5 = parcelRequire("2gGh5");

var $5tbhD = parcelRequire("5tbhD");

var $6DGcH = parcelRequire("6DGcH");
var $9382fa143be72808$require$Buffer = $6DGcH.Buffer;
var $9382fa143be72808$var$K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
var $9382fa143be72808$var$W = new Array(160);
function $9382fa143be72808$var$Sha512() {
    this.init();
    this._w = $9382fa143be72808$var$W;
    $5tbhD.call(this, 128, 112);
}
$2gGh5($9382fa143be72808$var$Sha512, $5tbhD);
$9382fa143be72808$var$Sha512.prototype.init = function() {
    this._ah = 0x6a09e667;
    this._bh = 0xbb67ae85;
    this._ch = 0x3c6ef372;
    this._dh = 0xa54ff53a;
    this._eh = 0x510e527f;
    this._fh = 0x9b05688c;
    this._gh = 0x1f83d9ab;
    this._hh = 0x5be0cd19;
    this._al = 0xf3bcc908;
    this._bl = 0x84caa73b;
    this._cl = 0xfe94f82b;
    this._dl = 0x5f1d36f1;
    this._el = 0xade682d1;
    this._fl = 0x2b3e6c1f;
    this._gl = 0xfb41bd6b;
    this._hl = 0x137e2179;
    return this;
};
function $9382fa143be72808$var$Ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function $9382fa143be72808$var$maj(x, y, z) {
    return x & y | z & (x | y);
}
function $9382fa143be72808$var$sigma0(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}
function $9382fa143be72808$var$sigma1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}
function $9382fa143be72808$var$Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}
function $9382fa143be72808$var$Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}
function $9382fa143be72808$var$Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}
function $9382fa143be72808$var$Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}
function $9382fa143be72808$var$getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
$9382fa143be72808$var$Sha512.prototype._update = function(M) {
    var W = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for(var i = 0; i < 32; i += 2){
        W[i] = M.readInt32BE(i * 4);
        W[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for(; i < 160; i += 2){
        var xh = W[i - 30];
        var xl = W[i - 30 + 1];
        var gamma0 = $9382fa143be72808$var$Gamma0(xh, xl);
        var gamma0l = $9382fa143be72808$var$Gamma0l(xl, xh);
        xh = W[i - 4];
        xl = W[i - 4 + 1];
        var gamma1 = $9382fa143be72808$var$Gamma1(xh, xl);
        var gamma1l = $9382fa143be72808$var$Gamma1l(xl, xh);
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 14];
        var Wi7l = W[i - 14 + 1];
        var Wi16h = W[i - 32];
        var Wi16l = W[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + $9382fa143be72808$var$getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + $9382fa143be72808$var$getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + $9382fa143be72808$var$getCarry(Wil, Wi16l) | 0;
        W[i] = Wih;
        W[i + 1] = Wil;
    }
    for(var j = 0; j < 160; j += 2){
        Wih = W[j];
        Wil = W[j + 1];
        var majh = $9382fa143be72808$var$maj(ah, bh, ch);
        var majl = $9382fa143be72808$var$maj(al, bl, cl);
        var sigma0h = $9382fa143be72808$var$sigma0(ah, al);
        var sigma0l = $9382fa143be72808$var$sigma0(al, ah);
        var sigma1h = $9382fa143be72808$var$sigma1(eh, el);
        var sigma1l = $9382fa143be72808$var$sigma1(el, eh);
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = $9382fa143be72808$var$K[j];
        var Kil = $9382fa143be72808$var$K[j + 1];
        var chh = $9382fa143be72808$var$Ch(eh, fh, gh);
        var chl = $9382fa143be72808$var$Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + $9382fa143be72808$var$getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + $9382fa143be72808$var$getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + $9382fa143be72808$var$getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + $9382fa143be72808$var$getCarry(t1l, Wil) | 0;
        // t2 = sigma0 + maj
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + $9382fa143be72808$var$getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + $9382fa143be72808$var$getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + $9382fa143be72808$var$getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + $9382fa143be72808$var$getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + $9382fa143be72808$var$getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + $9382fa143be72808$var$getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + $9382fa143be72808$var$getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + $9382fa143be72808$var$getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + $9382fa143be72808$var$getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + $9382fa143be72808$var$getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + $9382fa143be72808$var$getCarry(this._hl, hl) | 0;
};
$9382fa143be72808$var$Sha512.prototype._hash = function() {
    var H = $9382fa143be72808$require$Buffer.allocUnsafe(64);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
};
module.exports = $9382fa143be72808$var$Sha512;

});



parcelRequire.register("8hqjh", function(module, exports) {

var $6DGcH = parcelRequire("6DGcH");
var $607451dad7c7e5ff$require$Buffer = $6DGcH.Buffer;

var $9iwe5 = parcelRequire("9iwe5");
var $607451dad7c7e5ff$require$Transform = $9iwe5.Transform;

var $2bCBN = parcelRequire("2bCBN");
var $607451dad7c7e5ff$require$StringDecoder = $2bCBN.StringDecoder;

var $2gGh5 = parcelRequire("2gGh5");
function $607451dad7c7e5ff$var$CipherBase(hashMode) {
    $607451dad7c7e5ff$require$Transform.call(this);
    this.hashMode = typeof hashMode === 'string';
    if (this.hashMode) this[hashMode] = this._finalOrDigest;
    else this.final = this._finalOrDigest;
    if (this._final) {
        this.__final = this._final;
        this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
}
$2gGh5($607451dad7c7e5ff$var$CipherBase, $607451dad7c7e5ff$require$Transform);
$607451dad7c7e5ff$var$CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === 'string') data = $607451dad7c7e5ff$require$Buffer.from(data, inputEnc);
    var outData = this._update(data);
    if (this.hashMode) return this;
    if (outputEnc) outData = this._toString(outData, outputEnc);
    return outData;
};
$607451dad7c7e5ff$var$CipherBase.prototype.setAutoPadding = function() {};
$607451dad7c7e5ff$var$CipherBase.prototype.getAuthTag = function() {
    throw new Error('trying to get auth tag in unsupported state');
};
$607451dad7c7e5ff$var$CipherBase.prototype.setAuthTag = function() {
    throw new Error('trying to set auth tag in unsupported state');
};
$607451dad7c7e5ff$var$CipherBase.prototype.setAAD = function() {
    throw new Error('trying to set aad in unsupported state');
};
$607451dad7c7e5ff$var$CipherBase.prototype._transform = function(data, _, next) {
    var err;
    try {
        if (this.hashMode) this._update(data);
        else this.push(this._update(data));
    } catch (e) {
        err = e;
    } finally{
        next(err);
    }
};
$607451dad7c7e5ff$var$CipherBase.prototype._flush = function(done) {
    var err;
    try {
        this.push(this.__final());
    } catch (e) {
        err = e;
    }
    done(err);
};
$607451dad7c7e5ff$var$CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || $607451dad7c7e5ff$require$Buffer.alloc(0);
    if (outputEnc) outData = this._toString(outData, outputEnc, true);
    return outData;
};
$607451dad7c7e5ff$var$CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
        this._decoder = new $607451dad7c7e5ff$require$StringDecoder(enc);
        this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error('can\'t switch encodings');
    var out = this._decoder.write(value);
    if (fin) out += this._decoder.end();
    return out;
};
module.exports = $607451dad7c7e5ff$var$CipherBase;

});
parcelRequire.register("9iwe5", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = $6c4ecaf4e46bbb12$var$Stream;

var $88dPV = parcelRequire("88dPV");
var $6c4ecaf4e46bbb12$require$EE = $88dPV.EventEmitter;

var $2gGh5 = parcelRequire("2gGh5");
$2gGh5($6c4ecaf4e46bbb12$var$Stream, $6c4ecaf4e46bbb12$require$EE);

$6c4ecaf4e46bbb12$var$Stream.Readable = (parcelRequire("fuXvX"));

$6c4ecaf4e46bbb12$var$Stream.Writable = (parcelRequire("l8sXb"));

$6c4ecaf4e46bbb12$var$Stream.Duplex = (parcelRequire("go6Yu"));

$6c4ecaf4e46bbb12$var$Stream.Transform = (parcelRequire("2yIbu"));

$6c4ecaf4e46bbb12$var$Stream.PassThrough = (parcelRequire("l3iyS"));

$6c4ecaf4e46bbb12$var$Stream.finished = (parcelRequire("ciyPv"));

$6c4ecaf4e46bbb12$var$Stream.pipeline = (parcelRequire("4m9V2"));
// Backwards-compat with node 0.4.x
$6c4ecaf4e46bbb12$var$Stream.Stream = $6c4ecaf4e46bbb12$var$Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function $6c4ecaf4e46bbb12$var$Stream() {
    $6c4ecaf4e46bbb12$require$EE.call(this);
}
$6c4ecaf4e46bbb12$var$Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on('data', ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on('drain', ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === 'function') dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if ($6c4ecaf4e46bbb12$require$EE.listenerCount(this, 'error') === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on('error', onerror);
    dest.on('error', onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);
        source.removeListener('end', onend);
        source.removeListener('close', onclose);
        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);
        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);
        dest.removeListener('close', cleanup);
    }
    source.on('end', cleanup);
    source.on('close', cleanup);
    dest.on('close', cleanup);
    dest.emit('pipe', source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

});



parcelRequire.register("80tDi", function(module, exports) {
'use strict';

var $2gGh5 = parcelRequire("2gGh5");

var $92jcl = parcelRequire("92jcl");

var $8hqjh = parcelRequire("8hqjh");

var $6DGcH = parcelRequire("6DGcH");
var $5d454f4011ca3681$require$Buffer = $6DGcH.Buffer;

var $75JHe = parcelRequire("75JHe");

var $9lf8s = parcelRequire("9lf8s");

var $aP0a7 = parcelRequire("aP0a7");
var $5d454f4011ca3681$var$ZEROS = $5d454f4011ca3681$require$Buffer.alloc(128);
function $5d454f4011ca3681$var$Hmac(alg, key) {
    $8hqjh.call(this, 'digest');
    if (typeof key === 'string') key = $5d454f4011ca3681$require$Buffer.from(key);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
        var hash = alg === 'rmd160' ? new $9lf8s() : $aP0a7(alg);
        key = hash.update(key).digest();
    } else if (key.length < blocksize) key = $5d454f4011ca3681$require$Buffer.concat([
        key,
        $5d454f4011ca3681$var$ZEROS
    ], blocksize);
    var ipad = this._ipad = $5d454f4011ca3681$require$Buffer.allocUnsafe(blocksize);
    var opad = this._opad = $5d454f4011ca3681$require$Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = alg === 'rmd160' ? new $9lf8s() : $aP0a7(alg);
    this._hash.update(ipad);
}
$2gGh5($5d454f4011ca3681$var$Hmac, $8hqjh);
$5d454f4011ca3681$var$Hmac.prototype._update = function(data) {
    this._hash.update(data);
};
$5d454f4011ca3681$var$Hmac.prototype._final = function() {
    var h = this._hash.digest();
    var hash = this._alg === 'rmd160' ? new $9lf8s() : $aP0a7(this._alg);
    return hash.update(this._opad).update(h).digest();
};
module.exports = function createHmac(alg, key) {
    alg = alg.toLowerCase();
    if (alg === 'rmd160' || alg === 'ripemd160') return new $5d454f4011ca3681$var$Hmac('rmd160', key);
    if (alg === 'md5') return new $92jcl($75JHe, key);
    return new $5d454f4011ca3681$var$Hmac(alg, key);
};

});
parcelRequire.register("92jcl", function(module, exports) {
'use strict';

var $2gGh5 = parcelRequire("2gGh5");

var $6DGcH = parcelRequire("6DGcH");
var $69433152efdbee3d$require$Buffer = $6DGcH.Buffer;

var $8hqjh = parcelRequire("8hqjh");
var $69433152efdbee3d$var$ZEROS = $69433152efdbee3d$require$Buffer.alloc(128);
var $69433152efdbee3d$var$blocksize = 64;
function $69433152efdbee3d$var$Hmac(alg, key) {
    $8hqjh.call(this, 'digest');
    if (typeof key === 'string') key = $69433152efdbee3d$require$Buffer.from(key);
    this._alg = alg;
    this._key = key;
    if (key.length > $69433152efdbee3d$var$blocksize) key = alg(key);
    else if (key.length < $69433152efdbee3d$var$blocksize) key = $69433152efdbee3d$require$Buffer.concat([
        key,
        $69433152efdbee3d$var$ZEROS
    ], $69433152efdbee3d$var$blocksize);
    var ipad = this._ipad = $69433152efdbee3d$require$Buffer.allocUnsafe($69433152efdbee3d$var$blocksize);
    var opad = this._opad = $69433152efdbee3d$require$Buffer.allocUnsafe($69433152efdbee3d$var$blocksize);
    for(var i = 0; i < $69433152efdbee3d$var$blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = [
        ipad
    ];
}
$2gGh5($69433152efdbee3d$var$Hmac, $8hqjh);
$69433152efdbee3d$var$Hmac.prototype._update = function(data) {
    this._hash.push(data);
};
$69433152efdbee3d$var$Hmac.prototype._final = function() {
    var h = this._alg($69433152efdbee3d$require$Buffer.concat(this._hash));
    return this._alg($69433152efdbee3d$require$Buffer.concat([
        this._opad,
        h
    ]));
};
module.exports = $69433152efdbee3d$var$Hmac;

});

parcelRequire.register("75JHe", function(module, exports) {

var $fs1JF = parcelRequire("fs1JF");
module.exports = function(buffer) {
    return new $fs1JF().update(buffer).digest();
};

});


parcelRequire.register("dTFmk", function(module, exports) {

module.exports = (parcelRequire("ea3Gv"));

});
parcelRequire.register("ea3Gv", function(module, exports) {
module.exports = JSON.parse("{\"sha224WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"RSA-SHA224\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"sha256WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"RSA-SHA256\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"sha384WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"RSA-SHA384\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"sha512WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA512\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA1\":{\"sign\":\"rsa\",\"hash\":\"sha1\",\"id\":\"3021300906052b0e03021a05000414\"},\"ecdsa-with-SHA1\":{\"sign\":\"ecdsa\",\"hash\":\"sha1\",\"id\":\"\"},\"sha256\":{\"sign\":\"ecdsa\",\"hash\":\"sha256\",\"id\":\"\"},\"sha224\":{\"sign\":\"ecdsa\",\"hash\":\"sha224\",\"id\":\"\"},\"sha384\":{\"sign\":\"ecdsa\",\"hash\":\"sha384\",\"id\":\"\"},\"sha512\":{\"sign\":\"ecdsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-SHA1\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-WITH-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-WITH-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-WITH-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-WITH-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-RIPEMD160\":{\"sign\":\"dsa\",\"hash\":\"rmd160\",\"id\":\"\"},\"ripemd160WithRSA\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"RSA-RIPEMD160\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"md5WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"},\"RSA-MD5\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"}}");

});


parcelRequire.register("fFjQO", function(module, exports) {

$parcel$export(module.exports, "pbkdf2", function () { return $b67a154d6315840e$export$448fa22aedc9dbca; }, function (v) { return $b67a154d6315840e$export$448fa22aedc9dbca = v; });
$parcel$export(module.exports, "pbkdf2Sync", function () { return $b67a154d6315840e$export$b80c7ba289c8fa56; }, function (v) { return $b67a154d6315840e$export$b80c7ba289c8fa56 = v; });
var $b67a154d6315840e$export$448fa22aedc9dbca;
var $b67a154d6315840e$export$b80c7ba289c8fa56;

$b67a154d6315840e$export$448fa22aedc9dbca = (parcelRequire("fT9rd"));

$b67a154d6315840e$export$b80c7ba289c8fa56 = (parcelRequire("XmAb6"));

});
parcelRequire.register("fT9rd", function(module, exports) {

var $6DGcH = parcelRequire("6DGcH");
var $b913503de8e6d631$require$Buffer = $6DGcH.Buffer;

var $jlxXr = parcelRequire("jlxXr");

var $2LbfG = parcelRequire("2LbfG");

var $XmAb6 = parcelRequire("XmAb6");

var $fN1mv = parcelRequire("fN1mv");
var $b913503de8e6d631$var$ZERO_BUF;
var $b913503de8e6d631$var$subtle = $parcel$global.crypto && $parcel$global.crypto.subtle;
var $b913503de8e6d631$var$toBrowser = {
    sha: 'SHA-1',
    'sha-1': 'SHA-1',
    sha1: 'SHA-1',
    sha256: 'SHA-256',
    'sha-256': 'SHA-256',
    sha384: 'SHA-384',
    'sha-384': 'SHA-384',
    'sha-512': 'SHA-512',
    sha512: 'SHA-512'
};
var $b913503de8e6d631$var$checks = [];
function $b913503de8e6d631$var$checkNative(algo) {
    if ($parcel$global.process && !$parcel$global.process.browser) return Promise.resolve(false);
    if (!$b913503de8e6d631$var$subtle || !$b913503de8e6d631$var$subtle.importKey || !$b913503de8e6d631$var$subtle.deriveBits) return Promise.resolve(false);
    if ($b913503de8e6d631$var$checks[algo] !== undefined) return $b913503de8e6d631$var$checks[algo];
    $b913503de8e6d631$var$ZERO_BUF = $b913503de8e6d631$var$ZERO_BUF || $b913503de8e6d631$require$Buffer.alloc(8);
    var prom = $b913503de8e6d631$var$browserPbkdf2($b913503de8e6d631$var$ZERO_BUF, $b913503de8e6d631$var$ZERO_BUF, 10, 128, algo).then(function() {
        return true;
    }).catch(function() {
        return false;
    });
    $b913503de8e6d631$var$checks[algo] = prom;
    return prom;
}
var $b913503de8e6d631$var$nextTick;
function $b913503de8e6d631$var$getNextTick() {
    if ($b913503de8e6d631$var$nextTick) return $b913503de8e6d631$var$nextTick;
    if ($parcel$global.process && $parcel$global.process.nextTick) $b913503de8e6d631$var$nextTick = $parcel$global.process.nextTick;
    else if ($parcel$global.queueMicrotask) $b913503de8e6d631$var$nextTick = $parcel$global.queueMicrotask;
    else if ($parcel$global.setImmediate) $b913503de8e6d631$var$nextTick = $parcel$global.setImmediate;
    else $b913503de8e6d631$var$nextTick = $parcel$global.setTimeout;
    return $b913503de8e6d631$var$nextTick;
}
function $b913503de8e6d631$var$browserPbkdf2(password, salt, iterations, length, algo) {
    return $b913503de8e6d631$var$subtle.importKey('raw', password, {
        name: 'PBKDF2'
    }, false, [
        'deriveBits'
    ]).then(function(key) {
        return $b913503de8e6d631$var$subtle.deriveBits({
            name: 'PBKDF2',
            salt: salt,
            iterations: iterations,
            hash: {
                name: algo
            }
        }, key, length << 3);
    }).then(function(res) {
        return $b913503de8e6d631$require$Buffer.from(res);
    });
}
function $b913503de8e6d631$var$resolvePromise(promise, callback) {
    promise.then(function(out) {
        $b913503de8e6d631$var$getNextTick()(function() {
            callback(null, out);
        });
    }, function(e) {
        $b913503de8e6d631$var$getNextTick()(function() {
            callback(e);
        });
    });
}
module.exports = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === 'function') {
        callback = digest;
        digest = undefined;
    }
    digest = digest || 'sha1';
    var algo = $b913503de8e6d631$var$toBrowser[digest.toLowerCase()];
    if (!algo || typeof $parcel$global.Promise !== 'function') {
        $b913503de8e6d631$var$getNextTick()(function() {
            var out;
            try {
                out = $XmAb6(password, salt, iterations, keylen, digest);
            } catch (e) {
                return callback(e);
            }
            callback(null, out);
        });
        return;
    }
    $jlxXr(iterations, keylen);
    password = $fN1mv(password, $2LbfG, 'Password');
    salt = $fN1mv(salt, $2LbfG, 'Salt');
    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
    $b913503de8e6d631$var$resolvePromise($b913503de8e6d631$var$checkNative(algo).then(function(resp) {
        if (resp) return $b913503de8e6d631$var$browserPbkdf2(password, salt, iterations, keylen, algo);
        return $XmAb6(password, salt, iterations, keylen, digest);
    }), callback);
};

});
parcelRequire.register("jlxXr", function(module, exports) {
var $e15a51cc1dc1e9e2$var$MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
;
module.exports = function(iterations, keylen) {
    if (typeof iterations !== 'number') throw new TypeError('Iterations not a number');
    if (iterations < 0) throw new TypeError('Bad iterations');
    if (typeof keylen !== 'number') throw new TypeError('Key length not a number');
    if (keylen < 0 || keylen > $e15a51cc1dc1e9e2$var$MAX_ALLOC || keylen !== keylen) throw new TypeError('Bad key length');
};

});

parcelRequire.register("2LbfG", function(module, exports) {

var $iUMdb = parcelRequire("iUMdb");
var $2028b2f1fcd63c91$var$defaultEncoding;
/* istanbul ignore next */ if ($parcel$global.process && $parcel$global.process.browser) $2028b2f1fcd63c91$var$defaultEncoding = 'utf-8';
else if ($parcel$global.process && $parcel$global.process.version) {
    var $2028b2f1fcd63c91$var$pVersionMajor = parseInt($iUMdb.version.split('.')[0].slice(1), 10);
    $2028b2f1fcd63c91$var$defaultEncoding = $2028b2f1fcd63c91$var$pVersionMajor >= 6 ? 'utf-8' : 'binary';
} else $2028b2f1fcd63c91$var$defaultEncoding = 'utf-8';
module.exports = $2028b2f1fcd63c91$var$defaultEncoding;

});

parcelRequire.register("XmAb6", function(module, exports) {

var $75JHe = parcelRequire("75JHe");

var $9lf8s = parcelRequire("9lf8s");

var $aP0a7 = parcelRequire("aP0a7");

var $6DGcH = parcelRequire("6DGcH");
var $0b2707387648c969$require$Buffer = $6DGcH.Buffer;

var $jlxXr = parcelRequire("jlxXr");

var $2LbfG = parcelRequire("2LbfG");

var $fN1mv = parcelRequire("fN1mv");
var $0b2707387648c969$var$ZEROS = $0b2707387648c969$require$Buffer.alloc(128);
var $0b2707387648c969$var$sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
};
function $0b2707387648c969$var$Hmac(alg, key, saltLen) {
    var hash = $0b2707387648c969$var$getDigest(alg);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    if (key.length > blocksize) key = hash(key);
    else if (key.length < blocksize) key = $0b2707387648c969$require$Buffer.concat([
        key,
        $0b2707387648c969$var$ZEROS
    ], blocksize);
    var ipad = $0b2707387648c969$require$Buffer.allocUnsafe(blocksize + $0b2707387648c969$var$sizes[alg]);
    var opad = $0b2707387648c969$require$Buffer.allocUnsafe(blocksize + $0b2707387648c969$var$sizes[alg]);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    var ipad1 = $0b2707387648c969$require$Buffer.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash;
    this.size = $0b2707387648c969$var$sizes[alg];
}
$0b2707387648c969$var$Hmac.prototype.run = function(data, ipad) {
    data.copy(ipad, this.blocksize);
    var h = this.hash(ipad);
    h.copy(this.opad, this.blocksize);
    return this.hash(this.opad);
};
function $0b2707387648c969$var$getDigest(alg) {
    function shaFunc(data) {
        return $aP0a7(alg).update(data).digest();
    }
    function rmd160Func(data) {
        return new $9lf8s().update(data).digest();
    }
    if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;
    if (alg === 'md5') return $75JHe;
    return shaFunc;
}
function $0b2707387648c969$var$pbkdf2(password, salt, iterations, keylen, digest) {
    $jlxXr(iterations, keylen);
    password = $fN1mv(password, $2LbfG, 'Password');
    salt = $fN1mv(salt, $2LbfG, 'Salt');
    digest = digest || 'sha1';
    var hmac = new $0b2707387648c969$var$Hmac(digest, password, salt.length);
    var DK = $0b2707387648c969$require$Buffer.allocUnsafe(keylen);
    var block1 = $0b2707387648c969$require$Buffer.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = $0b2707387648c969$var$sizes[digest];
    var l = Math.ceil(keylen / hLen);
    for(var i = 1; i <= l; i++){
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for(var j = 1; j < iterations; j++){
            U = hmac.run(U, hmac.ipad2);
            for(var k = 0; k < hLen; k++)T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
    }
    return DK;
}
module.exports = $0b2707387648c969$var$pbkdf2;

});
parcelRequire.register("fN1mv", function(module, exports) {

var $6DGcH = parcelRequire("6DGcH");
var $b7ec7d18b8d241e5$require$Buffer = $6DGcH.Buffer;
module.exports = function(thing, encoding, name) {
    if ($b7ec7d18b8d241e5$require$Buffer.isBuffer(thing)) return thing;
    else if (typeof thing === 'string') return $b7ec7d18b8d241e5$require$Buffer.from(thing, encoding);
    else if (ArrayBuffer.isView(thing)) return $b7ec7d18b8d241e5$require$Buffer.from(thing.buffer);
    else throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView');
};

});




parcelRequire.register("4cKqJ", function(module, exports) {

$parcel$export(module.exports, "createCipher", function () { return $30fc4c73e4921ac7$export$bdd223f16383713e; }, function (v) { return $30fc4c73e4921ac7$export$bdd223f16383713e = v; });
$parcel$export(module.exports, "Cipher", function () { return $30fc4c73e4921ac7$export$26e5786e8ac8e530; }, function (v) { return $30fc4c73e4921ac7$export$26e5786e8ac8e530 = v; });
$parcel$export(module.exports, "createCipheriv", function () { return $30fc4c73e4921ac7$export$2f64596b8cbf08b4; }, function (v) { return $30fc4c73e4921ac7$export$2f64596b8cbf08b4 = v; });
$parcel$export(module.exports, "Cipheriv", function () { return $30fc4c73e4921ac7$export$20533d26f07f1ee0; }, function (v) { return $30fc4c73e4921ac7$export$20533d26f07f1ee0 = v; });
$parcel$export(module.exports, "createDecipher", function () { return $30fc4c73e4921ac7$export$12ada9414fbc594c; }, function (v) { return $30fc4c73e4921ac7$export$12ada9414fbc594c = v; });
$parcel$export(module.exports, "Decipher", function () { return $30fc4c73e4921ac7$export$2ce6d8d0e8b04e1a; }, function (v) { return $30fc4c73e4921ac7$export$2ce6d8d0e8b04e1a = v; });
$parcel$export(module.exports, "createDecipheriv", function () { return $30fc4c73e4921ac7$export$36b6d6ef312eab39; }, function (v) { return $30fc4c73e4921ac7$export$36b6d6ef312eab39 = v; });
$parcel$export(module.exports, "Decipheriv", function () { return $30fc4c73e4921ac7$export$f5e7e39d57cd9700; }, function (v) { return $30fc4c73e4921ac7$export$f5e7e39d57cd9700 = v; });
$parcel$export(module.exports, "listCiphers", function () { return $30fc4c73e4921ac7$export$dedd8dc3dc62b370; }, function (v) { return $30fc4c73e4921ac7$export$dedd8dc3dc62b370 = v; });
$parcel$export(module.exports, "getCiphers", function () { return $30fc4c73e4921ac7$export$58a258485f1e49f6; }, function (v) { return $30fc4c73e4921ac7$export$58a258485f1e49f6 = v; });
var $30fc4c73e4921ac7$export$bdd223f16383713e;
var $30fc4c73e4921ac7$export$26e5786e8ac8e530;
var $30fc4c73e4921ac7$export$2f64596b8cbf08b4;
var $30fc4c73e4921ac7$export$20533d26f07f1ee0;
var $30fc4c73e4921ac7$export$12ada9414fbc594c;
var $30fc4c73e4921ac7$export$2ce6d8d0e8b04e1a;
var $30fc4c73e4921ac7$export$36b6d6ef312eab39;
var $30fc4c73e4921ac7$export$f5e7e39d57cd9700;
var $30fc4c73e4921ac7$export$dedd8dc3dc62b370;
var $30fc4c73e4921ac7$export$58a258485f1e49f6;

var $CZn0H = parcelRequire("CZn0H");

var $2OZGO = parcelRequire("2OZGO");

var $6jLsf = parcelRequire("6jLsf");

var $aXlyv = parcelRequire("aXlyv");

var $hQ9sa = parcelRequire("hQ9sa");
function $30fc4c73e4921ac7$var$createCipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if ($6jLsf[suite]) {
        keyLen = $6jLsf[suite].key;
        ivLen = $6jLsf[suite].iv;
    } else if ($aXlyv[suite]) {
        keyLen = $aXlyv[suite].key * 8;
        ivLen = $aXlyv[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = $hQ9sa(password, false, keyLen, ivLen);
    return $30fc4c73e4921ac7$var$createCipheriv(suite, keys.key, keys.iv);
}
function $30fc4c73e4921ac7$var$createDecipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if ($6jLsf[suite]) {
        keyLen = $6jLsf[suite].key;
        ivLen = $6jLsf[suite].iv;
    } else if ($aXlyv[suite]) {
        keyLen = $aXlyv[suite].key * 8;
        ivLen = $aXlyv[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = $hQ9sa(password, false, keyLen, ivLen);
    return $30fc4c73e4921ac7$var$createDecipheriv(suite, keys.key, keys.iv);
}
function $30fc4c73e4921ac7$var$createCipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if ($6jLsf[suite]) return $2OZGO.createCipheriv(suite, key, iv);
    if ($aXlyv[suite]) return new $CZn0H({
        key: key,
        iv: iv,
        mode: suite
    });
    throw new TypeError('invalid suite type');
}
function $30fc4c73e4921ac7$var$createDecipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if ($6jLsf[suite]) return $2OZGO.createDecipheriv(suite, key, iv);
    if ($aXlyv[suite]) return new $CZn0H({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
    });
    throw new TypeError('invalid suite type');
}
function $30fc4c73e4921ac7$var$getCiphers() {
    return Object.keys($aXlyv).concat($2OZGO.getCiphers());
}
$30fc4c73e4921ac7$export$bdd223f16383713e = $30fc4c73e4921ac7$export$26e5786e8ac8e530 = $30fc4c73e4921ac7$var$createCipher;
$30fc4c73e4921ac7$export$2f64596b8cbf08b4 = $30fc4c73e4921ac7$export$20533d26f07f1ee0 = $30fc4c73e4921ac7$var$createCipheriv;
$30fc4c73e4921ac7$export$12ada9414fbc594c = $30fc4c73e4921ac7$export$2ce6d8d0e8b04e1a = $30fc4c73e4921ac7$var$createDecipher;
$30fc4c73e4921ac7$export$36b6d6ef312eab39 = $30fc4c73e4921ac7$export$f5e7e39d57cd9700 = $30fc4c73e4921ac7$var$createDecipheriv;
$30fc4c73e4921ac7$export$dedd8dc3dc62b370 = $30fc4c73e4921ac7$export$58a258485f1e49f6 = $30fc4c73e4921ac7$var$getCiphers;

});
parcelRequire.register("CZn0H", function(module, exports) {

var $8hqjh = parcelRequire("8hqjh");

var $2WlYz = parcelRequire("2WlYz");

var $2gGh5 = parcelRequire("2gGh5");

var $6DGcH = parcelRequire("6DGcH");
var $0753278e1430a118$require$Buffer = $6DGcH.Buffer;
var $0753278e1430a118$var$modes = {
    'des-ede3-cbc': $2WlYz.CBC.instantiate($2WlYz.EDE),
    'des-ede3': $2WlYz.EDE,
    'des-ede-cbc': $2WlYz.CBC.instantiate($2WlYz.EDE),
    'des-ede': $2WlYz.EDE,
    'des-cbc': $2WlYz.CBC.instantiate($2WlYz.DES),
    'des-ecb': $2WlYz.DES
};
$0753278e1430a118$var$modes.des = $0753278e1430a118$var$modes['des-cbc'];
$0753278e1430a118$var$modes.des3 = $0753278e1430a118$var$modes['des-ede3-cbc'];
module.exports = $0753278e1430a118$var$DES;
$2gGh5($0753278e1430a118$var$DES, $8hqjh);
function $0753278e1430a118$var$DES(opts) {
    $8hqjh.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = $0753278e1430a118$var$modes[modeName];
    var type;
    if (opts.decrypt) type = 'decrypt';
    else type = 'encrypt';
    var key = opts.key;
    if (!$0753278e1430a118$require$Buffer.isBuffer(key)) key = $0753278e1430a118$require$Buffer.from(key);
    if (modeName === 'des-ede' || modeName === 'des-ede-cbc') key = $0753278e1430a118$require$Buffer.concat([
        key,
        key.slice(0, 8)
    ]);
    var iv = opts.iv;
    if (!$0753278e1430a118$require$Buffer.isBuffer(iv)) iv = $0753278e1430a118$require$Buffer.from(iv);
    this._des = mode.create({
        key: key,
        iv: iv,
        type: type
    });
}
$0753278e1430a118$var$DES.prototype._update = function(data) {
    return $0753278e1430a118$require$Buffer.from(this._des.update(data));
};
$0753278e1430a118$var$DES.prototype._final = function() {
    return $0753278e1430a118$require$Buffer.from(this._des.final());
};

});
parcelRequire.register("2WlYz", function(module, exports) {

$parcel$export(module.exports, "DES", function () { return $22420b87d39f9469$export$cc8859615686b300; }, function (v) { return $22420b87d39f9469$export$cc8859615686b300 = v; });
$parcel$export(module.exports, "CBC", function () { return $22420b87d39f9469$export$8ad3f227af08fcc5; }, function (v) { return $22420b87d39f9469$export$8ad3f227af08fcc5 = v; });
$parcel$export(module.exports, "EDE", function () { return $22420b87d39f9469$export$947646e34766044f; }, function (v) { return $22420b87d39f9469$export$947646e34766044f = v; });
var $22420b87d39f9469$export$eab97d15b1788b8d;
var $22420b87d39f9469$export$26e5786e8ac8e530;
var $22420b87d39f9469$export$cc8859615686b300;
var $22420b87d39f9469$export$8ad3f227af08fcc5;
var $22420b87d39f9469$export$947646e34766044f;
'use strict';

$22420b87d39f9469$export$eab97d15b1788b8d = (parcelRequire("7ecQW"));

$22420b87d39f9469$export$26e5786e8ac8e530 = (parcelRequire("9WuQP"));

$22420b87d39f9469$export$cc8859615686b300 = (parcelRequire("9syCf"));

$22420b87d39f9469$export$8ad3f227af08fcc5 = (parcelRequire("3TyUt"));

$22420b87d39f9469$export$947646e34766044f = (parcelRequire("li0pF"));

});
parcelRequire.register("7ecQW", function(module, exports) {

$parcel$export(module.exports, "readUInt32BE", function () { return $5433cf810395cb14$export$cfaef8ed399428b0; }, function (v) { return $5433cf810395cb14$export$cfaef8ed399428b0 = v; });
$parcel$export(module.exports, "writeUInt32BE", function () { return $5433cf810395cb14$export$a80c7deaea7cbd80; }, function (v) { return $5433cf810395cb14$export$a80c7deaea7cbd80 = v; });
$parcel$export(module.exports, "ip", function () { return $5433cf810395cb14$export$ed7577ae6e1cd0ef; }, function (v) { return $5433cf810395cb14$export$ed7577ae6e1cd0ef = v; });
$parcel$export(module.exports, "rip", function () { return $5433cf810395cb14$export$5dcbef3aa594f567; }, function (v) { return $5433cf810395cb14$export$5dcbef3aa594f567 = v; });
$parcel$export(module.exports, "pc1", function () { return $5433cf810395cb14$export$5bc8001ca71ed9c5; }, function (v) { return $5433cf810395cb14$export$5bc8001ca71ed9c5 = v; });
$parcel$export(module.exports, "r28shl", function () { return $5433cf810395cb14$export$3e714e2c5d5d8cb2; }, function (v) { return $5433cf810395cb14$export$3e714e2c5d5d8cb2 = v; });
$parcel$export(module.exports, "pc2", function () { return $5433cf810395cb14$export$94c3e544fd062b7f; }, function (v) { return $5433cf810395cb14$export$94c3e544fd062b7f = v; });
$parcel$export(module.exports, "expand", function () { return $5433cf810395cb14$export$9f77e0932fb78f72; }, function (v) { return $5433cf810395cb14$export$9f77e0932fb78f72 = v; });
$parcel$export(module.exports, "substitute", function () { return $5433cf810395cb14$export$d865ce2836f5927f; }, function (v) { return $5433cf810395cb14$export$d865ce2836f5927f = v; });
$parcel$export(module.exports, "permute", function () { return $5433cf810395cb14$export$95e62ad65da8b7d2; }, function (v) { return $5433cf810395cb14$export$95e62ad65da8b7d2 = v; });
$parcel$export(module.exports, "padSplit", function () { return $5433cf810395cb14$export$209139ff098c441a; }, function (v) { return $5433cf810395cb14$export$209139ff098c441a = v; });
var $5433cf810395cb14$export$cfaef8ed399428b0;
var $5433cf810395cb14$export$a80c7deaea7cbd80;
var $5433cf810395cb14$export$ed7577ae6e1cd0ef;
var $5433cf810395cb14$export$5dcbef3aa594f567;
var $5433cf810395cb14$export$5bc8001ca71ed9c5;
var $5433cf810395cb14$export$3e714e2c5d5d8cb2;
var $5433cf810395cb14$export$94c3e544fd062b7f;
var $5433cf810395cb14$export$9f77e0932fb78f72;
var $5433cf810395cb14$export$d865ce2836f5927f;
var $5433cf810395cb14$export$95e62ad65da8b7d2;
var $5433cf810395cb14$export$209139ff098c441a;
'use strict';
$5433cf810395cb14$export$cfaef8ed399428b0 = function readUInt32BE(bytes, off) {
    var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
    return res >>> 0;
};
$5433cf810395cb14$export$a80c7deaea7cbd80 = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = value >>> 16 & 0xff;
    bytes[2 + off] = value >>> 8 & 0xff;
    bytes[3 + off] = value & 0xff;
};
$5433cf810395cb14$export$ed7577ae6e1cd0ef = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >>> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >>> j + i & 1;
        }
    }
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inR >>> j + i & 1;
        }
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inL >>> j + i & 1;
        }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$5433cf810395cb14$export$5dcbef3aa594f567 = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 0; i < 4; i++)for(var j = 24; j >= 0; j -= 8){
        outL <<= 1;
        outL |= inR >>> j + i & 1;
        outL <<= 1;
        outL |= inL >>> j + i & 1;
    }
    for(var i = 4; i < 8; i++)for(var j = 24; j >= 0; j -= 8){
        outR <<= 1;
        outR |= inR >>> j + i & 1;
        outR <<= 1;
        outR |= inL >>> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$5433cf810395cb14$export$5bc8001ca71ed9c5 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    // 7, 15, 23, 31, 39, 47, 55, 63
    // 6, 14, 22, 30, 39, 47, 55, 63
    // 5, 13, 21, 29, 39, 47, 55, 63
    // 4, 12, 20, 28
    for(var i = 7; i >= 5; i--){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outL <<= 1;
        outL |= inR >> j + i & 1;
    }
    // 1, 9, 17, 25, 33, 41, 49, 57
    // 2, 10, 18, 26, 34, 42, 50, 58
    // 3, 11, 19, 27, 35, 43, 51, 59
    // 36, 44, 52, 60
    for(var i = 1; i <= 3; i++){
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outR <<= 1;
        outR |= inL >> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$5433cf810395cb14$export$3e714e2c5d5d8cb2 = function r28shl(num, shift) {
    return num << shift & 0xfffffff | num >>> 28 - shift;
};
var $5433cf810395cb14$var$pc2table = [
    // inL => outL
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    // inR => outR
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
];
$5433cf810395cb14$export$94c3e544fd062b7f = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    var len = $5433cf810395cb14$var$pc2table.length >>> 1;
    for(var i = 0; i < len; i++){
        outL <<= 1;
        outL |= inL >>> $5433cf810395cb14$var$pc2table[i] & 0x1;
    }
    for(var i = len; i < $5433cf810395cb14$var$pc2table.length; i++){
        outR <<= 1;
        outR |= inR >>> $5433cf810395cb14$var$pc2table[i] & 0x1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$5433cf810395cb14$export$9f77e0932fb78f72 = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;
    outL = (r & 1) << 5 | r >>> 27;
    for(var i = 23; i >= 15; i -= 4){
        outL <<= 6;
        outL |= r >>> i & 0x3f;
    }
    for(var i = 11; i >= 3; i -= 4){
        outR |= r >>> i & 0x3f;
        outR <<= 6;
    }
    outR |= (r & 0x1f) << 1 | r >>> 31;
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
var $5433cf810395cb14$var$sTable = [
    14,
    0,
    4,
    15,
    13,
    7,
    1,
    4,
    2,
    14,
    15,
    2,
    11,
    13,
    8,
    1,
    3,
    10,
    10,
    6,
    6,
    12,
    12,
    11,
    5,
    9,
    9,
    5,
    0,
    3,
    7,
    8,
    4,
    15,
    1,
    12,
    14,
    8,
    8,
    2,
    13,
    4,
    6,
    9,
    2,
    1,
    11,
    7,
    15,
    5,
    12,
    11,
    9,
    3,
    7,
    14,
    3,
    10,
    10,
    0,
    5,
    6,
    0,
    13,
    15,
    3,
    1,
    13,
    8,
    4,
    14,
    7,
    6,
    15,
    11,
    2,
    3,
    8,
    4,
    14,
    9,
    12,
    7,
    0,
    2,
    1,
    13,
    10,
    12,
    6,
    0,
    9,
    5,
    11,
    10,
    5,
    0,
    13,
    14,
    8,
    7,
    10,
    11,
    1,
    10,
    3,
    4,
    15,
    13,
    4,
    1,
    2,
    5,
    11,
    8,
    6,
    12,
    7,
    6,
    12,
    9,
    0,
    3,
    5,
    2,
    14,
    15,
    9,
    10,
    13,
    0,
    7,
    9,
    0,
    14,
    9,
    6,
    3,
    3,
    4,
    15,
    6,
    5,
    10,
    1,
    2,
    13,
    8,
    12,
    5,
    7,
    14,
    11,
    12,
    4,
    11,
    2,
    15,
    8,
    1,
    13,
    1,
    6,
    10,
    4,
    13,
    9,
    0,
    8,
    6,
    15,
    9,
    3,
    8,
    0,
    7,
    11,
    4,
    1,
    15,
    2,
    14,
    12,
    3,
    5,
    11,
    10,
    5,
    14,
    2,
    7,
    12,
    7,
    13,
    13,
    8,
    14,
    11,
    3,
    5,
    0,
    6,
    6,
    15,
    9,
    0,
    10,
    3,
    1,
    4,
    2,
    7,
    8,
    2,
    5,
    12,
    11,
    1,
    12,
    10,
    4,
    14,
    15,
    9,
    10,
    3,
    6,
    15,
    9,
    0,
    0,
    6,
    12,
    10,
    11,
    1,
    7,
    13,
    13,
    8,
    15,
    9,
    1,
    4,
    3,
    5,
    14,
    11,
    5,
    12,
    2,
    7,
    8,
    2,
    4,
    14,
    2,
    14,
    12,
    11,
    4,
    2,
    1,
    12,
    7,
    4,
    10,
    7,
    11,
    13,
    6,
    1,
    8,
    5,
    5,
    0,
    3,
    15,
    15,
    10,
    13,
    3,
    0,
    9,
    14,
    8,
    9,
    6,
    4,
    11,
    2,
    8,
    1,
    12,
    11,
    7,
    10,
    1,
    13,
    14,
    7,
    2,
    8,
    13,
    15,
    6,
    9,
    15,
    12,
    0,
    5,
    9,
    6,
    10,
    3,
    4,
    0,
    5,
    14,
    3,
    12,
    10,
    1,
    15,
    10,
    4,
    15,
    2,
    9,
    7,
    2,
    12,
    6,
    9,
    8,
    5,
    0,
    6,
    13,
    1,
    3,
    13,
    4,
    14,
    14,
    0,
    7,
    11,
    5,
    3,
    11,
    8,
    9,
    4,
    14,
    3,
    15,
    2,
    5,
    12,
    2,
    9,
    8,
    5,
    12,
    15,
    3,
    10,
    7,
    11,
    0,
    14,
    4,
    1,
    10,
    7,
    1,
    6,
    13,
    0,
    11,
    8,
    6,
    13,
    4,
    13,
    11,
    0,
    2,
    11,
    14,
    7,
    15,
    4,
    0,
    9,
    8,
    1,
    13,
    10,
    3,
    14,
    12,
    3,
    9,
    5,
    7,
    12,
    5,
    2,
    10,
    15,
    6,
    8,
    1,
    6,
    1,
    6,
    4,
    11,
    11,
    13,
    13,
    8,
    12,
    1,
    3,
    4,
    7,
    10,
    14,
    7,
    10,
    9,
    15,
    5,
    6,
    0,
    8,
    15,
    0,
    14,
    5,
    2,
    9,
    3,
    2,
    12,
    13,
    1,
    2,
    15,
    8,
    13,
    4,
    8,
    6,
    10,
    15,
    3,
    11,
    7,
    1,
    4,
    10,
    12,
    9,
    5,
    3,
    6,
    14,
    11,
    5,
    0,
    0,
    14,
    12,
    9,
    7,
    2,
    7,
    2,
    11,
    1,
    4,
    14,
    1,
    7,
    9,
    4,
    12,
    10,
    14,
    8,
    2,
    13,
    0,
    15,
    6,
    12,
    10,
    9,
    13,
    0,
    15,
    3,
    3,
    5,
    5,
    6,
    8,
    11
];
$5433cf810395cb14$export$d865ce2836f5927f = function substitute(inL, inR) {
    var out = 0;
    for(var i = 0; i < 4; i++){
        var b = inL >>> 18 - i * 6 & 0x3f;
        var sb = $5433cf810395cb14$var$sTable[i * 0x40 + b];
        out <<= 4;
        out |= sb;
    }
    for(var i = 0; i < 4; i++){
        var b = inR >>> 18 - i * 6 & 0x3f;
        var sb = $5433cf810395cb14$var$sTable[256 + i * 0x40 + b];
        out <<= 4;
        out |= sb;
    }
    return out >>> 0;
};
var $5433cf810395cb14$var$permuteTable = [
    16,
    25,
    12,
    11,
    3,
    20,
    4,
    15,
    31,
    17,
    9,
    6,
    27,
    14,
    1,
    22,
    30,
    24,
    8,
    18,
    0,
    5,
    29,
    23,
    13,
    19,
    2,
    26,
    10,
    21,
    28,
    7
];
$5433cf810395cb14$export$95e62ad65da8b7d2 = function permute(num) {
    var out = 0;
    for(var i = 0; i < $5433cf810395cb14$var$permuteTable.length; i++){
        out <<= 1;
        out |= num >>> $5433cf810395cb14$var$permuteTable[i] & 0x1;
    }
    return out >>> 0;
};
$5433cf810395cb14$export$209139ff098c441a = function padSplit(num, size, group) {
    var str = num.toString(2);
    while(str.length < size)str = '0' + str;
    var out = [];
    for(var i = 0; i < size; i += group)out.push(str.slice(i, i + group));
    return out.join(' ');
};

});

parcelRequire.register("9WuQP", function(module, exports) {
'use strict';

var $hB7g9 = parcelRequire("hB7g9");
function $73d17634ff08e4a3$var$Cipher(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
}
module.exports = $73d17634ff08e4a3$var$Cipher;
$73d17634ff08e4a3$var$Cipher.prototype._init = function _init() {
// Might be overrided
};
$73d17634ff08e4a3$var$Cipher.prototype.update = function update(data) {
    if (data.length === 0) return [];
    if (this.type === 'decrypt') return this._updateDecrypt(data);
    else return this._updateEncrypt(data);
};
$73d17634ff08e4a3$var$Cipher.prototype._buffer = function _buffer(data, off) {
    // Append data to buffer
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for(var i = 0; i < min; i++)this.buffer[this.bufferOff + i] = data[off + i];
    this.bufferOff += min;
    // Shift next
    return min;
};
$73d17634ff08e4a3$var$Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
};
$73d17634ff08e4a3$var$Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
    }
    // Write blocks
    var max = data.length - (data.length - inputOff) % this.blockSize;
    for(; inputOff < max; inputOff += this.blockSize){
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
    }
    // Queue rest
    for(; inputOff < data.length; inputOff++, this.bufferOff++)this.buffer[this.bufferOff] = data[inputOff];
    return out;
};
$73d17634ff08e4a3$var$Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    // TODO(indutny): optimize it, this is far from optimal
    for(; count > 0; count--){
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
    }
    // Buffer rest of the input
    inputOff += this._buffer(data, inputOff);
    return out;
};
$73d17634ff08e4a3$var$Cipher.prototype.final = function final(buffer) {
    var first;
    if (buffer) first = this.update(buffer);
    var last;
    if (this.type === 'encrypt') last = this._finalEncrypt();
    else last = this._finalDecrypt();
    if (first) return first.concat(last);
    else return last;
};
$73d17634ff08e4a3$var$Cipher.prototype._pad = function _pad(buffer, off) {
    if (off === 0) return false;
    while(off < buffer.length)buffer[off++] = 0;
    return true;
};
$73d17634ff08e4a3$var$Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff)) return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
};
$73d17634ff08e4a3$var$Cipher.prototype._unpad = function _unpad(buffer) {
    return buffer;
};
$73d17634ff08e4a3$var$Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    $hB7g9.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
};

});
parcelRequire.register("hB7g9", function(module, exports) {
module.exports = $ccfb85f716293f86$var$assert;
function $ccfb85f716293f86$var$assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
}
$ccfb85f716293f86$var$assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

});


parcelRequire.register("9syCf", function(module, exports) {
'use strict';

var $hB7g9 = parcelRequire("hB7g9");

var $2gGh5 = parcelRequire("2gGh5");

var $7ecQW = parcelRequire("7ecQW");

var $9WuQP = parcelRequire("9WuQP");
function $6e3194938794e1ca$var$DESState() {
    this.tmp = new Array(2);
    this.keys = null;
}
function $6e3194938794e1ca$var$DES(options) {
    $9WuQP.call(this, options);
    var state = new $6e3194938794e1ca$var$DESState();
    this._desState = state;
    this.deriveKeys(state, options.key);
}
$2gGh5($6e3194938794e1ca$var$DES, $9WuQP);
module.exports = $6e3194938794e1ca$var$DES;
$6e3194938794e1ca$var$DES.create = function create(options) {
    return new $6e3194938794e1ca$var$DES(options);
};
var $6e3194938794e1ca$var$shiftTable = [
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1
];
$6e3194938794e1ca$var$DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(32);
    $hB7g9.equal(key.length, this.blockSize, 'Invalid key length');
    var kL = $7ecQW.readUInt32BE(key, 0);
    var kR = $7ecQW.readUInt32BE(key, 4);
    $7ecQW.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for(var i = 0; i < state.keys.length; i += 2){
        var shift = $6e3194938794e1ca$var$shiftTable[i >>> 1];
        kL = $7ecQW.r28shl(kL, shift);
        kR = $7ecQW.r28shl(kR, shift);
        $7ecQW.pc2(kL, kR, state.keys, i);
    }
};
$6e3194938794e1ca$var$DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
    var l = $7ecQW.readUInt32BE(inp, inOff);
    var r = $7ecQW.readUInt32BE(inp, inOff + 4);
    // Initial Permutation
    $7ecQW.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0);
    else this._decrypt(state, l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    $7ecQW.writeUInt32BE(out, l, outOff);
    $7ecQW.writeUInt32BE(out, r, outOff + 4);
};
$6e3194938794e1ca$var$DES.prototype._pad = function _pad(buffer, off) {
    var value = buffer.length - off;
    for(var i = off; i < buffer.length; i++)buffer[i] = value;
    return true;
};
$6e3194938794e1ca$var$DES.prototype._unpad = function _unpad(buffer) {
    var pad = buffer[buffer.length - 1];
    for(var i = buffer.length - pad; i < buffer.length; i++)$hB7g9.equal(buffer[i], pad);
    return buffer.slice(0, buffer.length - pad);
};
$6e3194938794e1ca$var$DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;
    // Apply f() x16 times
    for(var i = 0; i < state.keys.length; i += 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        $7ecQW.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = $7ecQW.substitute(keyL, keyR);
        var f = $7ecQW.permute(s);
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
    }
    // Reverse Initial Permutation
    $7ecQW.rip(r, l, out, off);
};
$6e3194938794e1ca$var$DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;
    // Apply f() x16 times
    for(var i = state.keys.length - 2; i >= 0; i -= 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        $7ecQW.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = $7ecQW.substitute(keyL, keyR);
        var f = $7ecQW.permute(s);
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
    }
    // Reverse Initial Permutation
    $7ecQW.rip(l, r, out, off);
};

});

parcelRequire.register("3TyUt", function(module, exports) {

$parcel$export(module.exports, "instantiate", function () { return $2d61968c3e2710ec$export$f9bb8d20ccc7477a; }, function (v) { return $2d61968c3e2710ec$export$f9bb8d20ccc7477a = v; });
var $2d61968c3e2710ec$export$f9bb8d20ccc7477a;
'use strict';

var $hB7g9 = parcelRequire("hB7g9");

var $2gGh5 = parcelRequire("2gGh5");
var $2d61968c3e2710ec$var$proto = {};
function $2d61968c3e2710ec$var$CBCState(iv) {
    $hB7g9.equal(iv.length, 8, 'Invalid IV length');
    this.iv = new Array(8);
    for(var i = 0; i < this.iv.length; i++)this.iv[i] = iv[i];
}
function $2d61968c3e2710ec$var$instantiate(Base) {
    function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
    }
    $2gGh5(CBC, Base);
    var keys = Object.keys($2d61968c3e2710ec$var$proto);
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        CBC.prototype[key] = $2d61968c3e2710ec$var$proto[key];
    }
    CBC.create = function create(options) {
        return new CBC(options);
    };
    return CBC;
}
$2d61968c3e2710ec$export$f9bb8d20ccc7477a = $2d61968c3e2710ec$var$instantiate;
$2d61968c3e2710ec$var$proto._cbcInit = function _cbcInit() {
    var state = new $2d61968c3e2710ec$var$CBCState(this.options.iv);
    this._cbcState = state;
};
$2d61968c3e2710ec$var$proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state.iv;
    if (this.type === 'encrypt') {
        for(var i = 0; i < this.blockSize; i++)iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for(var i = 0; i < this.blockSize; i++)iv[i] = out[outOff + i];
    } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for(var i = 0; i < this.blockSize; i++)out[outOff + i] ^= iv[i];
        for(var i = 0; i < this.blockSize; i++)iv[i] = inp[inOff + i];
    }
};

});

parcelRequire.register("li0pF", function(module, exports) {
'use strict';

var $hB7g9 = parcelRequire("hB7g9");

var $2gGh5 = parcelRequire("2gGh5");

var $9WuQP = parcelRequire("9WuQP");

var $9syCf = parcelRequire("9syCf");
function $f7fb996e4b6214b5$var$EDEState(type, key) {
    $hB7g9.equal(key.length, 24, 'Invalid key length');
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);
    if (type === 'encrypt') this.ciphers = [
        $9syCf.create({
            type: 'encrypt',
            key: k1
        }),
        $9syCf.create({
            type: 'decrypt',
            key: k2
        }),
        $9syCf.create({
            type: 'encrypt',
            key: k3
        })
    ];
    else this.ciphers = [
        $9syCf.create({
            type: 'decrypt',
            key: k3
        }),
        $9syCf.create({
            type: 'encrypt',
            key: k2
        }),
        $9syCf.create({
            type: 'decrypt',
            key: k1
        })
    ];
}
function $f7fb996e4b6214b5$var$EDE(options) {
    $9WuQP.call(this, options);
    var state = new $f7fb996e4b6214b5$var$EDEState(this.type, this.options.key);
    this._edeState = state;
}
$2gGh5($f7fb996e4b6214b5$var$EDE, $9WuQP);
module.exports = $f7fb996e4b6214b5$var$EDE;
$f7fb996e4b6214b5$var$EDE.create = function create(options) {
    return new $f7fb996e4b6214b5$var$EDE(options);
};
$f7fb996e4b6214b5$var$EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
};
$f7fb996e4b6214b5$var$EDE.prototype._pad = $9syCf.prototype._pad;
$f7fb996e4b6214b5$var$EDE.prototype._unpad = $9syCf.prototype._unpad;

});



parcelRequire.register("2OZGO", function(module, exports) {

$parcel$export(module.exports, "createCipheriv", function () { return $20e01a8c77b0229f$export$2f64596b8cbf08b4; }, function (v) { return $20e01a8c77b0229f$export$2f64596b8cbf08b4 = v; });
$parcel$export(module.exports, "createDecipheriv", function () { return $20e01a8c77b0229f$export$36b6d6ef312eab39; }, function (v) { return $20e01a8c77b0229f$export$36b6d6ef312eab39 = v; });
$parcel$export(module.exports, "getCiphers", function () { return $20e01a8c77b0229f$export$58a258485f1e49f6; }, function (v) { return $20e01a8c77b0229f$export$58a258485f1e49f6 = v; });
var $20e01a8c77b0229f$export$bdd223f16383713e;
var $20e01a8c77b0229f$export$26e5786e8ac8e530;
var $20e01a8c77b0229f$export$2f64596b8cbf08b4;
var $20e01a8c77b0229f$export$20533d26f07f1ee0;
var $20e01a8c77b0229f$export$12ada9414fbc594c;
var $20e01a8c77b0229f$export$2ce6d8d0e8b04e1a;
var $20e01a8c77b0229f$export$36b6d6ef312eab39;
var $20e01a8c77b0229f$export$f5e7e39d57cd9700;
var $20e01a8c77b0229f$export$dedd8dc3dc62b370;
var $20e01a8c77b0229f$export$58a258485f1e49f6;

var $gXIOv = parcelRequire("gXIOv");

var $1sCj9 = parcelRequire("1sCj9");

var $3GB4g = parcelRequire("3GB4g");
function $20e01a8c77b0229f$var$getCiphers() {
    return Object.keys($3GB4g);
}
$20e01a8c77b0229f$export$bdd223f16383713e = $20e01a8c77b0229f$export$26e5786e8ac8e530 = $gXIOv.createCipher;
$20e01a8c77b0229f$export$2f64596b8cbf08b4 = $20e01a8c77b0229f$export$20533d26f07f1ee0 = $gXIOv.createCipheriv;
$20e01a8c77b0229f$export$12ada9414fbc594c = $20e01a8c77b0229f$export$2ce6d8d0e8b04e1a = $1sCj9.createDecipher;
$20e01a8c77b0229f$export$36b6d6ef312eab39 = $20e01a8c77b0229f$export$f5e7e39d57cd9700 = $1sCj9.createDecipheriv;
$20e01a8c77b0229f$export$dedd8dc3dc62b370 = $20e01a8c77b0229f$export$58a258485f1e49f6 = $20e01a8c77b0229f$var$getCiphers;

});
parcelRequire.register("gXIOv", function(module, exports) {

$parcel$export(module.exports, "createCipheriv", function () { return $c594eb18d2db4c5a$export$2f64596b8cbf08b4; }, function (v) { return $c594eb18d2db4c5a$export$2f64596b8cbf08b4 = v; });
$parcel$export(module.exports, "createCipher", function () { return $c594eb18d2db4c5a$export$bdd223f16383713e; }, function (v) { return $c594eb18d2db4c5a$export$bdd223f16383713e = v; });
var $c594eb18d2db4c5a$export$2f64596b8cbf08b4;
var $c594eb18d2db4c5a$export$bdd223f16383713e;

var $6jLsf = parcelRequire("6jLsf");

var $6kKhu = parcelRequire("6kKhu");

var $6DGcH = parcelRequire("6DGcH");
var $c594eb18d2db4c5a$require$Buffer = $6DGcH.Buffer;

var $dOa1x = parcelRequire("dOa1x");

var $8hqjh = parcelRequire("8hqjh");

var $g1GKM = parcelRequire("g1GKM");

var $hQ9sa = parcelRequire("hQ9sa");

var $2gGh5 = parcelRequire("2gGh5");
function $c594eb18d2db4c5a$var$Cipher(mode, key, iv) {
    $8hqjh.call(this);
    this._cache = new $c594eb18d2db4c5a$var$Splitter();
    this._cipher = new $g1GKM.AES(key);
    this._prev = $c594eb18d2db4c5a$require$Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
$2gGh5($c594eb18d2db4c5a$var$Cipher, $8hqjh);
$c594eb18d2db4c5a$var$Cipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get()){
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
    }
    return $c594eb18d2db4c5a$require$Buffer.concat(out);
};
var $c594eb18d2db4c5a$var$PADDING = $c594eb18d2db4c5a$require$Buffer.alloc(16, 0x10);
$c594eb18d2db4c5a$var$Cipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
    }
    if (!chunk.equals($c594eb18d2db4c5a$var$PADDING)) {
        this._cipher.scrub();
        throw new Error('data not multiple of block length');
    }
};
$c594eb18d2db4c5a$var$Cipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function $c594eb18d2db4c5a$var$Splitter() {
    this.cache = $c594eb18d2db4c5a$require$Buffer.allocUnsafe(0);
}
$c594eb18d2db4c5a$var$Splitter.prototype.add = function(data) {
    this.cache = $c594eb18d2db4c5a$require$Buffer.concat([
        this.cache,
        data
    ]);
};
$c594eb18d2db4c5a$var$Splitter.prototype.get = function() {
    if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
$c594eb18d2db4c5a$var$Splitter.prototype.flush = function() {
    var len = 16 - this.cache.length;
    var padBuff = $c594eb18d2db4c5a$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)padBuff.writeUInt8(len, i);
    return $c594eb18d2db4c5a$require$Buffer.concat([
        this.cache,
        padBuff
    ]);
};
function $c594eb18d2db4c5a$var$createCipheriv(suite, password, iv) {
    var config = $6jLsf[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof password === 'string') password = $c594eb18d2db4c5a$require$Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (typeof iv === 'string') iv = $c594eb18d2db4c5a$require$Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (config.type === 'stream') return new $dOa1x(config.module, password, iv);
    else if (config.type === 'auth') return new $6kKhu(config.module, password, iv);
    return new $c594eb18d2db4c5a$var$Cipher(config.module, password, iv);
}
function $c594eb18d2db4c5a$var$createCipher(suite, password) {
    var config = $6jLsf[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = $hQ9sa(password, false, config.key, config.iv);
    return $c594eb18d2db4c5a$var$createCipheriv(suite, keys.key, keys.iv);
}
$c594eb18d2db4c5a$export$2f64596b8cbf08b4 = $c594eb18d2db4c5a$var$createCipheriv;
$c594eb18d2db4c5a$export$bdd223f16383713e = $c594eb18d2db4c5a$var$createCipher;

});
parcelRequire.register("6jLsf", function(module, exports) {








var $499953f24af789c5$var$modeModules = {
    ECB: (parcelRequire("kr3Xu")),
    CBC: (parcelRequire("l7OSo")),
    CFB: (parcelRequire("h25bz")),
    CFB8: (parcelRequire("cbzy5")),
    CFB1: (parcelRequire("1SCzK")),
    OFB: (parcelRequire("NASGH")),
    CTR: (parcelRequire("aIdbV")),
    GCM: (parcelRequire("aIdbV"))
};

var $3GB4g = parcelRequire("3GB4g");
for(var $499953f24af789c5$var$key in $3GB4g)$3GB4g[$499953f24af789c5$var$key].module = $499953f24af789c5$var$modeModules[$3GB4g[$499953f24af789c5$var$key].mode];
module.exports = $3GB4g;

});
parcelRequire.register("kr3Xu", function(module, exports) {

$parcel$export(module.exports, "encrypt", function () { return $ee096656ec174e02$export$5b0f6292f11d1d18; }, function (v) { return $ee096656ec174e02$export$5b0f6292f11d1d18 = v; });
$parcel$export(module.exports, "decrypt", function () { return $ee096656ec174e02$export$e85a0c9a1067c5d3; }, function (v) { return $ee096656ec174e02$export$e85a0c9a1067c5d3 = v; });
var $ee096656ec174e02$export$5b0f6292f11d1d18;
var $ee096656ec174e02$export$e85a0c9a1067c5d3;
$ee096656ec174e02$export$5b0f6292f11d1d18 = function(self, block) {
    return self._cipher.encryptBlock(block);
};
$ee096656ec174e02$export$e85a0c9a1067c5d3 = function(self, block) {
    return self._cipher.decryptBlock(block);
};

});

parcelRequire.register("l7OSo", function(module, exports) {

$parcel$export(module.exports, "encrypt", function () { return $f611b766b44f3a8a$export$5b0f6292f11d1d18; }, function (v) { return $f611b766b44f3a8a$export$5b0f6292f11d1d18 = v; });
$parcel$export(module.exports, "decrypt", function () { return $f611b766b44f3a8a$export$e85a0c9a1067c5d3; }, function (v) { return $f611b766b44f3a8a$export$e85a0c9a1067c5d3 = v; });
var $f611b766b44f3a8a$export$5b0f6292f11d1d18;
var $f611b766b44f3a8a$export$e85a0c9a1067c5d3;

var $3XnuF = parcelRequire("3XnuF");
$f611b766b44f3a8a$export$5b0f6292f11d1d18 = function(self, block) {
    var data = $3XnuF(block, self._prev);
    self._prev = self._cipher.encryptBlock(data);
    return self._prev;
};
$f611b766b44f3a8a$export$e85a0c9a1067c5d3 = function(self, block) {
    var pad = self._prev;
    self._prev = block;
    var out = self._cipher.decryptBlock(block);
    return $3XnuF(out, pad);
};

});
parcelRequire.register("3XnuF", function(module, exports) {

var $5vuHX = parcelRequire("5vuHX");
var $2e191b2501f1773c$require$Buffer = $5vuHX.Buffer;
module.exports = function xor(a, b) {
    var length = Math.min(a.length, b.length);
    var buffer = new $2e191b2501f1773c$require$Buffer(length);
    for(var i = 0; i < length; ++i)buffer[i] = a[i] ^ b[i];
    return buffer;
};

});


parcelRequire.register("h25bz", function(module, exports) {

$parcel$export(module.exports, "encrypt", function () { return $c666a55245938a7b$export$5b0f6292f11d1d18; }, function (v) { return $c666a55245938a7b$export$5b0f6292f11d1d18 = v; });
var $c666a55245938a7b$export$5b0f6292f11d1d18;

var $6DGcH = parcelRequire("6DGcH");
var $c666a55245938a7b$require$Buffer = $6DGcH.Buffer;

var $3XnuF = parcelRequire("3XnuF");
function $c666a55245938a7b$var$encryptStart(self, data, decrypt) {
    var len = data.length;
    var out = $3XnuF(data, self._cache);
    self._cache = self._cache.slice(len);
    self._prev = $c666a55245938a7b$require$Buffer.concat([
        self._prev,
        decrypt ? data : out
    ]);
    return out;
}
$c666a55245938a7b$export$5b0f6292f11d1d18 = function(self, data, decrypt) {
    var out = $c666a55245938a7b$require$Buffer.allocUnsafe(0);
    var len;
    while(data.length){
        if (self._cache.length === 0) {
            self._cache = self._cipher.encryptBlock(self._prev);
            self._prev = $c666a55245938a7b$require$Buffer.allocUnsafe(0);
        }
        if (self._cache.length <= data.length) {
            len = self._cache.length;
            out = $c666a55245938a7b$require$Buffer.concat([
                out,
                $c666a55245938a7b$var$encryptStart(self, data.slice(0, len), decrypt)
            ]);
            data = data.slice(len);
        } else {
            out = $c666a55245938a7b$require$Buffer.concat([
                out,
                $c666a55245938a7b$var$encryptStart(self, data, decrypt)
            ]);
            break;
        }
    }
    return out;
};

});

parcelRequire.register("cbzy5", function(module, exports) {

$parcel$export(module.exports, "encrypt", function () { return $8df216602bcfb83a$export$5b0f6292f11d1d18; }, function (v) { return $8df216602bcfb83a$export$5b0f6292f11d1d18 = v; });
var $8df216602bcfb83a$export$5b0f6292f11d1d18;

var $6DGcH = parcelRequire("6DGcH");
var $8df216602bcfb83a$require$Buffer = $6DGcH.Buffer;
function $8df216602bcfb83a$var$encryptByte(self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev);
    var out = pad[0] ^ byteParam;
    self._prev = $8df216602bcfb83a$require$Buffer.concat([
        self._prev.slice(1),
        $8df216602bcfb83a$require$Buffer.from([
            decrypt ? byteParam : out
        ])
    ]);
    return out;
}
$8df216602bcfb83a$export$5b0f6292f11d1d18 = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = $8df216602bcfb83a$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = $8df216602bcfb83a$var$encryptByte(self, chunk[i], decrypt);
    return out;
};

});

parcelRequire.register("1SCzK", function(module, exports) {

$parcel$export(module.exports, "encrypt", function () { return $15e8c1e3e878738e$export$5b0f6292f11d1d18; }, function (v) { return $15e8c1e3e878738e$export$5b0f6292f11d1d18 = v; });
var $15e8c1e3e878738e$export$5b0f6292f11d1d18;

var $6DGcH = parcelRequire("6DGcH");
var $15e8c1e3e878738e$require$Buffer = $6DGcH.Buffer;
function $15e8c1e3e878738e$var$encryptByte(self, byteParam, decrypt) {
    var pad;
    var i = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while(++i < len){
        pad = self._cipher.encryptBlock(self._prev);
        bit = byteParam & 1 << 7 - i ? 0x80 : 0;
        value = pad[0] ^ bit;
        out += (value & 0x80) >> i % 8;
        self._prev = $15e8c1e3e878738e$var$shiftIn(self._prev, decrypt ? bit : value);
    }
    return out;
}
function $15e8c1e3e878738e$var$shiftIn(buffer, value) {
    var len = buffer.length;
    var i = -1;
    var out = $15e8c1e3e878738e$require$Buffer.allocUnsafe(buffer.length);
    buffer = $15e8c1e3e878738e$require$Buffer.concat([
        buffer,
        $15e8c1e3e878738e$require$Buffer.from([
            value
        ])
    ]);
    while(++i < len)out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
    return out;
}
$15e8c1e3e878738e$export$5b0f6292f11d1d18 = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = $15e8c1e3e878738e$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = $15e8c1e3e878738e$var$encryptByte(self, chunk[i], decrypt);
    return out;
};

});

parcelRequire.register("NASGH", function(module, exports) {

$parcel$export(module.exports, "encrypt", function () { return $09512f87205774b1$export$5b0f6292f11d1d18; }, function (v) { return $09512f87205774b1$export$5b0f6292f11d1d18 = v; });
var $09512f87205774b1$export$5b0f6292f11d1d18;

var $5vuHX = parcelRequire("5vuHX");
var $09512f87205774b1$require$Buffer = $5vuHX.Buffer;

var $3XnuF = parcelRequire("3XnuF");
function $09512f87205774b1$var$getBlock(self) {
    self._prev = self._cipher.encryptBlock(self._prev);
    return self._prev;
}
$09512f87205774b1$export$5b0f6292f11d1d18 = function(self, chunk) {
    while(self._cache.length < chunk.length)self._cache = $09512f87205774b1$require$Buffer.concat([
        self._cache,
        $09512f87205774b1$var$getBlock(self)
    ]);
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return $3XnuF(chunk, pad);
};

});

parcelRequire.register("aIdbV", function(module, exports) {

$parcel$export(module.exports, "encrypt", function () { return $7cc83ef967ad65a7$export$5b0f6292f11d1d18; }, function (v) { return $7cc83ef967ad65a7$export$5b0f6292f11d1d18 = v; });
var $7cc83ef967ad65a7$export$5b0f6292f11d1d18;

var $3XnuF = parcelRequire("3XnuF");

var $6DGcH = parcelRequire("6DGcH");
var $7cc83ef967ad65a7$require$Buffer = $6DGcH.Buffer;

var $9CGVl = parcelRequire("9CGVl");
function $7cc83ef967ad65a7$var$getBlock(self) {
    var out = self._cipher.encryptBlockRaw(self._prev);
    $9CGVl(self._prev);
    return out;
}
var $7cc83ef967ad65a7$var$blockSize = 16;
$7cc83ef967ad65a7$export$5b0f6292f11d1d18 = function(self, chunk) {
    var chunkNum = Math.ceil(chunk.length / $7cc83ef967ad65a7$var$blockSize);
    var start = self._cache.length;
    self._cache = $7cc83ef967ad65a7$require$Buffer.concat([
        self._cache,
        $7cc83ef967ad65a7$require$Buffer.allocUnsafe(chunkNum * $7cc83ef967ad65a7$var$blockSize)
    ]);
    for(var i = 0; i < chunkNum; i++){
        var out = $7cc83ef967ad65a7$var$getBlock(self);
        var offset = start + i * $7cc83ef967ad65a7$var$blockSize;
        self._cache.writeUInt32BE(out[0], offset + 0);
        self._cache.writeUInt32BE(out[1], offset + 4);
        self._cache.writeUInt32BE(out[2], offset + 8);
        self._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return $3XnuF(chunk, pad);
};

});
parcelRequire.register("9CGVl", function(module, exports) {
function $7018f5796713f673$var$incr32(iv) {
    var len = iv.length;
    var item;
    while(len--){
        item = iv.readUInt8(len);
        if (item === 255) iv.writeUInt8(0, len);
        else {
            item++;
            iv.writeUInt8(item, len);
            break;
        }
    }
}
module.exports = $7018f5796713f673$var$incr32;

});


parcelRequire.register("3GB4g", function(module, exports) {
module.exports = JSON.parse("{\"aes-128-ecb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-192-ecb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-256-ecb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-128-cbc\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-192-cbc\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-256-cbc\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes128\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes192\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes256\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-128-cfb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-192-cfb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-256-cfb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-128-cfb8\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-192-cfb8\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-256-cfb8\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-128-cfb1\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-192-cfb1\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-256-cfb1\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-128-ofb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-192-ofb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-256-ofb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-128-ctr\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-192-ctr\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-256-ctr\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-128-gcm\":{\"cipher\":\"AES\",\"key\":128,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-192-gcm\":{\"cipher\":\"AES\",\"key\":192,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-256-gcm\":{\"cipher\":\"AES\",\"key\":256,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"}}");

});


parcelRequire.register("6kKhu", function(module, exports) {

var $g1GKM = parcelRequire("g1GKM");

var $6DGcH = parcelRequire("6DGcH");
var $49c882cdc80cd006$require$Buffer = $6DGcH.Buffer;

var $8hqjh = parcelRequire("8hqjh");

var $2gGh5 = parcelRequire("2gGh5");

var $8WhyL = parcelRequire("8WhyL");

var $3XnuF = parcelRequire("3XnuF");

var $9CGVl = parcelRequire("9CGVl");
function $49c882cdc80cd006$var$xorTest(a, b) {
    var out = 0;
    if (a.length !== b.length) out++;
    var len = Math.min(a.length, b.length);
    for(var i = 0; i < len; ++i)out += a[i] ^ b[i];
    return out;
}
function $49c882cdc80cd006$var$calcIv(self, iv, ck) {
    if (iv.length === 12) {
        self._finID = $49c882cdc80cd006$require$Buffer.concat([
            iv,
            $49c882cdc80cd006$require$Buffer.from([
                0,
                0,
                0,
                1
            ])
        ]);
        return $49c882cdc80cd006$require$Buffer.concat([
            iv,
            $49c882cdc80cd006$require$Buffer.from([
                0,
                0,
                0,
                2
            ])
        ]);
    }
    var ghash = new $8WhyL(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash.update(iv);
    if (toPad) {
        toPad = 16 - toPad;
        ghash.update($49c882cdc80cd006$require$Buffer.alloc(toPad, 0));
    }
    ghash.update($49c882cdc80cd006$require$Buffer.alloc(8, 0));
    var ivBits = len * 8;
    var tail = $49c882cdc80cd006$require$Buffer.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash.update(tail);
    self._finID = ghash.state;
    var out = $49c882cdc80cd006$require$Buffer.from(self._finID);
    $9CGVl(out);
    return out;
}
function $49c882cdc80cd006$var$StreamCipher(mode, key, iv, decrypt) {
    $8hqjh.call(this);
    var h = $49c882cdc80cd006$require$Buffer.alloc(4, 0);
    this._cipher = new $g1GKM.AES(key);
    var ck = this._cipher.encryptBlock(h);
    this._ghash = new $8WhyL(ck);
    iv = $49c882cdc80cd006$var$calcIv(this, iv, ck);
    this._prev = $49c882cdc80cd006$require$Buffer.from(iv);
    this._cache = $49c882cdc80cd006$require$Buffer.allocUnsafe(0);
    this._secCache = $49c882cdc80cd006$require$Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;
    this._authTag = null;
    this._called = false;
}
$2gGh5($49c882cdc80cd006$var$StreamCipher, $8hqjh);
$49c882cdc80cd006$var$StreamCipher.prototype._update = function(chunk) {
    if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
            rump = $49c882cdc80cd006$require$Buffer.alloc(rump, 0);
            this._ghash.update(rump);
        }
    }
    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) this._ghash.update(chunk);
    else this._ghash.update(out);
    this._len += chunk.length;
    return out;
};
$49c882cdc80cd006$var$StreamCipher.prototype._final = function() {
    if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data');
    var tag = $3XnuF(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && $49c882cdc80cd006$var$xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data');
    this._authTag = tag;
    this._cipher.scrub();
};
$49c882cdc80cd006$var$StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if (this._decrypt || !$49c882cdc80cd006$require$Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state');
    return this._authTag;
};
$49c882cdc80cd006$var$StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state');
    this._authTag = tag;
};
$49c882cdc80cd006$var$StreamCipher.prototype.setAAD = function setAAD(buf) {
    if (this._called) throw new Error('Attempting to set AAD in unsupported state');
    this._ghash.update(buf);
    this._alen += buf.length;
};
module.exports = $49c882cdc80cd006$var$StreamCipher;

});
parcelRequire.register("g1GKM", function(module, exports) {

$parcel$export(module.exports, "AES", function () { return $baade7464d59430f$export$b80fbe1c3a2b92b5; }, function (v) { return $baade7464d59430f$export$b80fbe1c3a2b92b5 = v; });
var $baade7464d59430f$export$b80fbe1c3a2b92b5;

var $6DGcH = parcelRequire("6DGcH");
var $baade7464d59430f$require$Buffer = $6DGcH.Buffer;
function $baade7464d59430f$var$asUInt32Array(buf) {
    if (!$baade7464d59430f$require$Buffer.isBuffer(buf)) buf = $baade7464d59430f$require$Buffer.from(buf);
    var len = buf.length / 4 | 0;
    var out = new Array(len);
    for(var i = 0; i < len; i++)out[i] = buf.readUInt32BE(i * 4);
    return out;
}
function $baade7464d59430f$var$scrubVec(v) {
    for(var i = 0; i < v.length; v++)v[i] = 0;
}
function $baade7464d59430f$var$cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M[0] ^ keySchedule[0];
    var s1 = M[1] ^ keySchedule[1];
    var s2 = M[2] ^ keySchedule[2];
    var s3 = M[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;
    for(var round = 1; round < nRounds; round++){
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
    t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
    t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;
    return [
        t0,
        t1,
        t2,
        t3
    ];
}
// AES constants
var $baade7464d59430f$var$RCON = [
    0x00,
    0x01,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x40,
    0x80,
    0x1b,
    0x36
];
var $baade7464d59430f$var$G = function() {
    // Compute double table
    var d = new Array(256);
    for(var j = 0; j < 256; j++)if (j < 128) d[j] = j << 1;
    else d[j] = j << 1 ^ 0x11b;
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    var INV_SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for(var i = 0; i < 256; ++i){
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        // Compute multiplication
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        // Compute sub bytes, mix columns tables
        var t = d[sx] * 0x101 ^ sx * 0x1010100;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        // Compute inv sub bytes, inv mix columns tables
        t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (x === 0) x = xi = 1;
        else {
            x = x2 ^ d[d[d[x8 ^ x2]]];
            xi ^= d[d[xi]];
        }
    }
    return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
    };
}();
function $baade7464d59430f$var$AES(key) {
    this._key = $baade7464d59430f$var$asUInt32Array(key);
    this._reset();
}
$baade7464d59430f$var$AES.blockSize = 16;
$baade7464d59430f$var$AES.keySize = 32;
$baade7464d59430f$var$AES.prototype.blockSize = $baade7464d59430f$var$AES.blockSize;
$baade7464d59430f$var$AES.prototype.keySize = $baade7464d59430f$var$AES.keySize;
$baade7464d59430f$var$AES.prototype._reset = function() {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for(var k = 0; k < keySize; k++)keySchedule[k] = keyWords[k];
    for(k = keySize; k < ksRows; k++){
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
            t = t << 8 | t >>> 24;
            t = $baade7464d59430f$var$G.SBOX[t >>> 24] << 24 | $baade7464d59430f$var$G.SBOX[t >>> 16 & 0xff] << 16 | $baade7464d59430f$var$G.SBOX[t >>> 8 & 0xff] << 8 | $baade7464d59430f$var$G.SBOX[t & 0xff];
            t ^= $baade7464d59430f$var$RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) t = $baade7464d59430f$var$G.SBOX[t >>> 24] << 24 | $baade7464d59430f$var$G.SBOX[t >>> 16 & 0xff] << 16 | $baade7464d59430f$var$G.SBOX[t >>> 8 & 0xff] << 8 | $baade7464d59430f$var$G.SBOX[t & 0xff];
        keySchedule[k] = keySchedule[k - keySize] ^ t;
    }
    var invKeySchedule = [];
    for(var ik = 0; ik < ksRows; ik++){
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) invKeySchedule[ik] = tt;
        else invKeySchedule[ik] = $baade7464d59430f$var$G.INV_SUB_MIX[0][$baade7464d59430f$var$G.SBOX[tt >>> 24]] ^ $baade7464d59430f$var$G.INV_SUB_MIX[1][$baade7464d59430f$var$G.SBOX[tt >>> 16 & 0xff]] ^ $baade7464d59430f$var$G.INV_SUB_MIX[2][$baade7464d59430f$var$G.SBOX[tt >>> 8 & 0xff]] ^ $baade7464d59430f$var$G.INV_SUB_MIX[3][$baade7464d59430f$var$G.SBOX[tt & 0xff]];
    }
    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
};
$baade7464d59430f$var$AES.prototype.encryptBlockRaw = function(M) {
    M = $baade7464d59430f$var$asUInt32Array(M);
    return $baade7464d59430f$var$cryptBlock(M, this._keySchedule, $baade7464d59430f$var$G.SUB_MIX, $baade7464d59430f$var$G.SBOX, this._nRounds);
};
$baade7464d59430f$var$AES.prototype.encryptBlock = function(M) {
    var out = this.encryptBlockRaw(M);
    var buf = $baade7464d59430f$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
};
$baade7464d59430f$var$AES.prototype.decryptBlock = function(M) {
    M = $baade7464d59430f$var$asUInt32Array(M);
    // swap
    var m1 = M[1];
    M[1] = M[3];
    M[3] = m1;
    var out = $baade7464d59430f$var$cryptBlock(M, this._invKeySchedule, $baade7464d59430f$var$G.INV_SUB_MIX, $baade7464d59430f$var$G.INV_SBOX, this._nRounds);
    var buf = $baade7464d59430f$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
};
$baade7464d59430f$var$AES.prototype.scrub = function() {
    $baade7464d59430f$var$scrubVec(this._keySchedule);
    $baade7464d59430f$var$scrubVec(this._invKeySchedule);
    $baade7464d59430f$var$scrubVec(this._key);
};
$baade7464d59430f$export$b80fbe1c3a2b92b5 = $baade7464d59430f$var$AES;

});

parcelRequire.register("8WhyL", function(module, exports) {

var $6DGcH = parcelRequire("6DGcH");
var $68215c85224bd2e1$require$Buffer = $6DGcH.Buffer;
var $68215c85224bd2e1$var$ZEROES = $68215c85224bd2e1$require$Buffer.alloc(16, 0);
function $68215c85224bd2e1$var$toArray(buf) {
    return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
    ];
}
function $68215c85224bd2e1$var$fromArray(out) {
    var buf = $68215c85224bd2e1$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
}
function $68215c85224bd2e1$var$GHASH(key) {
    this.h = key;
    this.state = $68215c85224bd2e1$require$Buffer.alloc(16, 0);
    this.cache = $68215c85224bd2e1$require$Buffer.allocUnsafe(0);
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
$68215c85224bd2e1$var$GHASH.prototype.ghash = function(block) {
    var i = -1;
    while(++i < block.length)this.state[i] ^= block[i];
    this._multiply();
};
$68215c85224bd2e1$var$GHASH.prototype._multiply = function() {
    var Vi = $68215c85224bd2e1$var$toArray(this.h);
    var Zi = [
        0,
        0,
        0,
        0
    ];
    var j, xi, lsbVi;
    var i = -1;
    while(++i < 128){
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
        if (xi) {
            // Z_i+1 = Z_i ^ V_i
            Zi[0] ^= Vi[0];
            Zi[1] ^= Vi[1];
            Zi[2] ^= Vi[2];
            Zi[3] ^= Vi[3];
        }
        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0;
        // V_i+1 = V_i >> 1
        for(j = 3; j > 0; j--)Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        Vi[0] = Vi[0] >>> 1;
        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) Vi[0] = Vi[0] ^ -520093696;
    }
    this.state = $68215c85224bd2e1$var$fromArray(Zi);
};
$68215c85224bd2e1$var$GHASH.prototype.update = function(buf) {
    this.cache = $68215c85224bd2e1$require$Buffer.concat([
        this.cache,
        buf
    ]);
    var chunk;
    while(this.cache.length >= 16){
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
    }
};
$68215c85224bd2e1$var$GHASH.prototype.final = function(abl, bl) {
    if (this.cache.length) this.ghash($68215c85224bd2e1$require$Buffer.concat([
        this.cache,
        $68215c85224bd2e1$var$ZEROES
    ], 16));
    this.ghash($68215c85224bd2e1$var$fromArray([
        0,
        abl,
        0,
        bl
    ]));
    return this.state;
};
module.exports = $68215c85224bd2e1$var$GHASH;

});


parcelRequire.register("dOa1x", function(module, exports) {

var $g1GKM = parcelRequire("g1GKM");

var $6DGcH = parcelRequire("6DGcH");
var $a0d7b86106352551$require$Buffer = $6DGcH.Buffer;

var $8hqjh = parcelRequire("8hqjh");

var $2gGh5 = parcelRequire("2gGh5");
function $a0d7b86106352551$var$StreamCipher(mode, key, iv, decrypt) {
    $8hqjh.call(this);
    this._cipher = new $g1GKM.AES(key);
    this._prev = $a0d7b86106352551$require$Buffer.from(iv);
    this._cache = $a0d7b86106352551$require$Buffer.allocUnsafe(0);
    this._secCache = $a0d7b86106352551$require$Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
}
$2gGh5($a0d7b86106352551$var$StreamCipher, $8hqjh);
$a0d7b86106352551$var$StreamCipher.prototype._update = function(chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt);
};
$a0d7b86106352551$var$StreamCipher.prototype._final = function() {
    this._cipher.scrub();
};
module.exports = $a0d7b86106352551$var$StreamCipher;

});

parcelRequire.register("hQ9sa", function(module, exports) {

var $6DGcH = parcelRequire("6DGcH");
var $cfcea03475f7462c$require$Buffer = $6DGcH.Buffer;

var $fs1JF = parcelRequire("fs1JF");
/* eslint-disable camelcase */ function $cfcea03475f7462c$var$EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!$cfcea03475f7462c$require$Buffer.isBuffer(password)) password = $cfcea03475f7462c$require$Buffer.from(password, 'binary');
    if (salt) {
        if (!$cfcea03475f7462c$require$Buffer.isBuffer(salt)) salt = $cfcea03475f7462c$require$Buffer.from(salt, 'binary');
        if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');
    }
    var keyLen = keyBits / 8;
    var key = $cfcea03475f7462c$require$Buffer.alloc(keyLen);
    var iv = $cfcea03475f7462c$require$Buffer.alloc(ivLen || 0);
    var tmp = $cfcea03475f7462c$require$Buffer.alloc(0);
    while(keyLen > 0 || ivLen > 0){
        var hash = new $fs1JF();
        hash.update(tmp);
        hash.update(password);
        if (salt) hash.update(salt);
        tmp = hash.digest();
        var used = 0;
        if (keyLen > 0) {
            var keyStart = key.length - keyLen;
            used = Math.min(keyLen, tmp.length);
            tmp.copy(key, keyStart, 0, used);
            keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
            var ivStart = iv.length - ivLen;
            var length = Math.min(ivLen, tmp.length - used);
            tmp.copy(iv, ivStart, used, used + length);
            ivLen -= length;
        }
    }
    tmp.fill(0);
    return {
        key: key,
        iv: iv
    };
}
module.exports = $cfcea03475f7462c$var$EVP_BytesToKey;

});


parcelRequire.register("1sCj9", function(module, exports) {

$parcel$export(module.exports, "createDecipher", function () { return $11061f1ff28a8300$export$12ada9414fbc594c; }, function (v) { return $11061f1ff28a8300$export$12ada9414fbc594c = v; });
$parcel$export(module.exports, "createDecipheriv", function () { return $11061f1ff28a8300$export$36b6d6ef312eab39; }, function (v) { return $11061f1ff28a8300$export$36b6d6ef312eab39 = v; });
var $11061f1ff28a8300$export$12ada9414fbc594c;
var $11061f1ff28a8300$export$36b6d6ef312eab39;

var $6kKhu = parcelRequire("6kKhu");

var $6DGcH = parcelRequire("6DGcH");
var $11061f1ff28a8300$require$Buffer = $6DGcH.Buffer;

var $6jLsf = parcelRequire("6jLsf");

var $dOa1x = parcelRequire("dOa1x");

var $8hqjh = parcelRequire("8hqjh");

var $g1GKM = parcelRequire("g1GKM");

var $hQ9sa = parcelRequire("hQ9sa");

var $2gGh5 = parcelRequire("2gGh5");
function $11061f1ff28a8300$var$Decipher(mode, key, iv) {
    $8hqjh.call(this);
    this._cache = new $11061f1ff28a8300$var$Splitter();
    this._last = void 0;
    this._cipher = new $g1GKM.AES(key);
    this._prev = $11061f1ff28a8300$require$Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
$2gGh5($11061f1ff28a8300$var$Decipher, $8hqjh);
$11061f1ff28a8300$var$Decipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get(this._autopadding)){
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
    }
    return $11061f1ff28a8300$require$Buffer.concat(out);
};
$11061f1ff28a8300$var$Decipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) return $11061f1ff28a8300$var$unpad(this._mode.decrypt(this, chunk));
    else if (chunk) throw new Error('data not multiple of block length');
};
$11061f1ff28a8300$var$Decipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function $11061f1ff28a8300$var$Splitter() {
    this.cache = $11061f1ff28a8300$require$Buffer.allocUnsafe(0);
}
$11061f1ff28a8300$var$Splitter.prototype.add = function(data) {
    this.cache = $11061f1ff28a8300$require$Buffer.concat([
        this.cache,
        data
    ]);
};
$11061f1ff28a8300$var$Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
        if (this.cache.length > 16) {
            out = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            return out;
        }
    } else if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
$11061f1ff28a8300$var$Splitter.prototype.flush = function() {
    if (this.cache.length) return this.cache;
};
function $11061f1ff28a8300$var$unpad(last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) throw new Error('unable to decrypt data');
    var i = -1;
    while(++i < padded){
        if (last[i + (16 - padded)] !== padded) throw new Error('unable to decrypt data');
    }
    if (padded === 16) return;
    return last.slice(0, 16 - padded);
}
function $11061f1ff28a8300$var$createDecipheriv(suite, password, iv) {
    var config = $6jLsf[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof iv === 'string') iv = $11061f1ff28a8300$require$Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (typeof password === 'string') password = $11061f1ff28a8300$require$Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (config.type === 'stream') return new $dOa1x(config.module, password, iv, true);
    else if (config.type === 'auth') return new $6kKhu(config.module, password, iv, true);
    return new $11061f1ff28a8300$var$Decipher(config.module, password, iv);
}
function $11061f1ff28a8300$var$createDecipher(suite, password) {
    var config = $6jLsf[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = $hQ9sa(password, false, config.key, config.iv);
    return $11061f1ff28a8300$var$createDecipheriv(suite, keys.key, keys.iv);
}
$11061f1ff28a8300$export$12ada9414fbc594c = $11061f1ff28a8300$var$createDecipher;
$11061f1ff28a8300$export$36b6d6ef312eab39 = $11061f1ff28a8300$var$createDecipheriv;

});


parcelRequire.register("aXlyv", function(module, exports) {

$parcel$export(module.exports, "des-ecb", function () { return $7fa0228b1b67ffa9$export$116f8a5cee447347; }, function (v) { return $7fa0228b1b67ffa9$export$116f8a5cee447347 = v; });
$parcel$export(module.exports, "des-cbc", function () { return $7fa0228b1b67ffa9$export$7483c4066bfb7ae9; }, function (v) { return $7fa0228b1b67ffa9$export$7483c4066bfb7ae9 = v; });
$parcel$export(module.exports, "des", function () { return $7fa0228b1b67ffa9$export$e7a565d2e588bb06; }, function (v) { return $7fa0228b1b67ffa9$export$e7a565d2e588bb06 = v; });
$parcel$export(module.exports, "des-ede3-cbc", function () { return $7fa0228b1b67ffa9$export$aaa2f54a426f3eb8; }, function (v) { return $7fa0228b1b67ffa9$export$aaa2f54a426f3eb8 = v; });
$parcel$export(module.exports, "des3", function () { return $7fa0228b1b67ffa9$export$eba20568dde4ada; }, function (v) { return $7fa0228b1b67ffa9$export$eba20568dde4ada = v; });
$parcel$export(module.exports, "des-ede3", function () { return $7fa0228b1b67ffa9$export$d3b5e5996938f5ae; }, function (v) { return $7fa0228b1b67ffa9$export$d3b5e5996938f5ae = v; });
$parcel$export(module.exports, "des-ede-cbc", function () { return $7fa0228b1b67ffa9$export$57c08356130bc99b; }, function (v) { return $7fa0228b1b67ffa9$export$57c08356130bc99b = v; });
$parcel$export(module.exports, "des-ede", function () { return $7fa0228b1b67ffa9$export$c7169791d5c1e65d; }, function (v) { return $7fa0228b1b67ffa9$export$c7169791d5c1e65d = v; });
var $7fa0228b1b67ffa9$export$116f8a5cee447347;
var $7fa0228b1b67ffa9$export$7483c4066bfb7ae9;
var $7fa0228b1b67ffa9$export$e7a565d2e588bb06;
var $7fa0228b1b67ffa9$export$aaa2f54a426f3eb8;
var $7fa0228b1b67ffa9$export$eba20568dde4ada;
var $7fa0228b1b67ffa9$export$d3b5e5996938f5ae;
var $7fa0228b1b67ffa9$export$57c08356130bc99b;
var $7fa0228b1b67ffa9$export$c7169791d5c1e65d;
$7fa0228b1b67ffa9$export$116f8a5cee447347 = {
    key: 8,
    iv: 0
};
$7fa0228b1b67ffa9$export$7483c4066bfb7ae9 = $7fa0228b1b67ffa9$export$e7a565d2e588bb06 = {
    key: 8,
    iv: 8
};
$7fa0228b1b67ffa9$export$aaa2f54a426f3eb8 = $7fa0228b1b67ffa9$export$eba20568dde4ada = {
    key: 24,
    iv: 8
};
$7fa0228b1b67ffa9$export$d3b5e5996938f5ae = {
    key: 24,
    iv: 0
};
$7fa0228b1b67ffa9$export$57c08356130bc99b = {
    key: 16,
    iv: 8
};
$7fa0228b1b67ffa9$export$c7169791d5c1e65d = {
    key: 16,
    iv: 0
};

});


parcelRequire.register("lPZFS", function(module, exports) {

$parcel$export(module.exports, "DiffieHellmanGroup", function () { return $fe5e33a5c9a5b571$export$971862a2fcb1bb40; }, function (v) { return $fe5e33a5c9a5b571$export$971862a2fcb1bb40 = v; });
$parcel$export(module.exports, "createDiffieHellmanGroup", function () { return $fe5e33a5c9a5b571$export$c6ff6a88acbeaf40; }, function (v) { return $fe5e33a5c9a5b571$export$c6ff6a88acbeaf40 = v; });
$parcel$export(module.exports, "getDiffieHellman", function () { return $fe5e33a5c9a5b571$export$fdc27893e98845cc; }, function (v) { return $fe5e33a5c9a5b571$export$fdc27893e98845cc = v; });
$parcel$export(module.exports, "createDiffieHellman", function () { return $fe5e33a5c9a5b571$export$6671fb9a1323bed; }, function (v) { return $fe5e33a5c9a5b571$export$6671fb9a1323bed = v; });
$parcel$export(module.exports, "DiffieHellman", function () { return $fe5e33a5c9a5b571$export$d74daf141a551db; }, function (v) { return $fe5e33a5c9a5b571$export$d74daf141a551db = v; });
var $fe5e33a5c9a5b571$export$971862a2fcb1bb40;
var $fe5e33a5c9a5b571$export$c6ff6a88acbeaf40;
var $fe5e33a5c9a5b571$export$fdc27893e98845cc;
var $fe5e33a5c9a5b571$export$6671fb9a1323bed;
var $fe5e33a5c9a5b571$export$d74daf141a551db;

var $5vuHX = parcelRequire("5vuHX");
var $fe5e33a5c9a5b571$require$Buffer = $5vuHX.Buffer;

var $6Y9QU = parcelRequire("6Y9QU");

var $9cSEl = parcelRequire("9cSEl");

var $zDcAB = parcelRequire("zDcAB");
function $fe5e33a5c9a5b571$var$getDiffieHellman(mod) {
    var prime = new $fe5e33a5c9a5b571$require$Buffer($9cSEl[mod].prime, 'hex');
    var gen = new $fe5e33a5c9a5b571$require$Buffer($9cSEl[mod].gen, 'hex');
    return new $zDcAB(prime, gen);
}
var $fe5e33a5c9a5b571$var$ENCODINGS = {
    'binary': true,
    'hex': true,
    'base64': true
};
function $fe5e33a5c9a5b571$var$createDiffieHellman(prime, enc, generator, genc) {
    if ($fe5e33a5c9a5b571$require$Buffer.isBuffer(enc) || $fe5e33a5c9a5b571$var$ENCODINGS[enc] === undefined) return $fe5e33a5c9a5b571$var$createDiffieHellman(prime, 'binary', enc, generator);
    enc = enc || 'binary';
    genc = genc || 'binary';
    generator = generator || new $fe5e33a5c9a5b571$require$Buffer([
        2
    ]);
    if (!$fe5e33a5c9a5b571$require$Buffer.isBuffer(generator)) generator = new $fe5e33a5c9a5b571$require$Buffer(generator, genc);
    if (typeof prime === 'number') return new $zDcAB($6Y9QU(prime, generator), generator, true);
    if (!$fe5e33a5c9a5b571$require$Buffer.isBuffer(prime)) prime = new $fe5e33a5c9a5b571$require$Buffer(prime, enc);
    return new $zDcAB(prime, generator, true);
}
$fe5e33a5c9a5b571$export$971862a2fcb1bb40 = $fe5e33a5c9a5b571$export$c6ff6a88acbeaf40 = $fe5e33a5c9a5b571$export$fdc27893e98845cc = $fe5e33a5c9a5b571$var$getDiffieHellman;
$fe5e33a5c9a5b571$export$6671fb9a1323bed = $fe5e33a5c9a5b571$export$d74daf141a551db = $fe5e33a5c9a5b571$var$createDiffieHellman;

});
parcelRequire.register("6Y9QU", function(module, exports) {

var $1umH4 = parcelRequire("1umH4");
module.exports = $512ffd22e65f8d49$var$findPrime;
$512ffd22e65f8d49$var$findPrime.simpleSieve = $512ffd22e65f8d49$var$simpleSieve;
$512ffd22e65f8d49$var$findPrime.fermatTest = $512ffd22e65f8d49$var$fermatTest;

var $ek2tU = parcelRequire("ek2tU");
var $512ffd22e65f8d49$var$TWENTYFOUR = new $ek2tU(24);

var $5krJZ = parcelRequire("5krJZ");
var $512ffd22e65f8d49$var$millerRabin = new $5krJZ();
var $512ffd22e65f8d49$var$ONE = new $ek2tU(1);
var $512ffd22e65f8d49$var$TWO = new $ek2tU(2);
var $512ffd22e65f8d49$var$FIVE = new $ek2tU(5);
var $512ffd22e65f8d49$var$SIXTEEN = new $ek2tU(16);
var $512ffd22e65f8d49$var$EIGHT = new $ek2tU(8);
var $512ffd22e65f8d49$var$TEN = new $ek2tU(10);
var $512ffd22e65f8d49$var$THREE = new $ek2tU(3);
var $512ffd22e65f8d49$var$SEVEN = new $ek2tU(7);
var $512ffd22e65f8d49$var$ELEVEN = new $ek2tU(11);
var $512ffd22e65f8d49$var$FOUR = new $ek2tU(4);
var $512ffd22e65f8d49$var$TWELVE = new $ek2tU(12);
var $512ffd22e65f8d49$var$primes = null;
function $512ffd22e65f8d49$var$_getPrimes() {
    if ($512ffd22e65f8d49$var$primes !== null) return $512ffd22e65f8d49$var$primes;
    var limit = 0x100000;
    var res = [];
    res[0] = 2;
    for(var i = 1, k = 3; k < limit; k += 2){
        var sqrt = Math.ceil(Math.sqrt(k));
        for(var j = 0; j < i && res[j] <= sqrt; j++)if (k % res[j] === 0) break;
        if (i !== j && res[j] <= sqrt) continue;
        res[i++] = k;
    }
    $512ffd22e65f8d49$var$primes = res;
    return res;
}
function $512ffd22e65f8d49$var$simpleSieve(p) {
    var primes = $512ffd22e65f8d49$var$_getPrimes();
    for(var i = 0; i < primes.length; i++)if (p.modn(primes[i]) === 0) {
        if (p.cmpn(primes[i]) === 0) return true;
        else return false;
    }
    return true;
}
function $512ffd22e65f8d49$var$fermatTest(p) {
    var red = $ek2tU.mont(p);
    return $512ffd22e65f8d49$var$TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}
function $512ffd22e65f8d49$var$findPrime(bits, gen) {
    if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) return new $ek2tU([
            0x8c,
            0x7b
        ]);
        else return new $ek2tU([
            0x8c,
            0x27
        ]);
    }
    gen = new $ek2tU(gen);
    var num, n2;
    while(true){
        num = new $ek2tU($1umH4(Math.ceil(bits / 8)));
        while(num.bitLength() > bits)num.ishrn(1);
        if (num.isEven()) num.iadd($512ffd22e65f8d49$var$ONE);
        if (!num.testn(1)) num.iadd($512ffd22e65f8d49$var$TWO);
        if (!gen.cmp($512ffd22e65f8d49$var$TWO)) while(num.mod($512ffd22e65f8d49$var$TWENTYFOUR).cmp($512ffd22e65f8d49$var$ELEVEN))num.iadd($512ffd22e65f8d49$var$FOUR);
        else if (!gen.cmp($512ffd22e65f8d49$var$FIVE)) while(num.mod($512ffd22e65f8d49$var$TEN).cmp($512ffd22e65f8d49$var$THREE))num.iadd($512ffd22e65f8d49$var$FOUR);
        n2 = num.shrn(1);
        if ($512ffd22e65f8d49$var$simpleSieve(n2) && $512ffd22e65f8d49$var$simpleSieve(num) && $512ffd22e65f8d49$var$fermatTest(n2) && $512ffd22e65f8d49$var$fermatTest(num) && $512ffd22e65f8d49$var$millerRabin.test(n2) && $512ffd22e65f8d49$var$millerRabin.test(num)) return num;
    }
}

});
parcelRequire.register("ek2tU", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function TempCtor() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("ksweO")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("5krJZ", function(module, exports) {

var $ek2tU = parcelRequire("ek2tU");

var $3cL3l = parcelRequire("3cL3l");
function $3e1456c4b7b56a7b$var$MillerRabin(rand) {
    this.rand = rand || new $3cL3l.Rand();
}
module.exports = $3e1456c4b7b56a7b$var$MillerRabin;
$3e1456c4b7b56a7b$var$MillerRabin.create = function create(rand) {
    return new $3e1456c4b7b56a7b$var$MillerRabin(rand);
};
$3e1456c4b7b56a7b$var$MillerRabin.prototype._randbelow = function _randbelow(n) {
    var len = n.bitLength();
    var min_bytes = Math.ceil(len / 8);
    // Generage random bytes until a number less than n is found.
    // This ensures that 0..n-1 have an equal probability of being selected.
    do var a = new $ek2tU(this.rand.generate(min_bytes));
    while (a.cmp(n) >= 0)
    return a;
};
$3e1456c4b7b56a7b$var$MillerRabin.prototype._randrange = function _randrange(start, stop) {
    // Generate a random number greater than or equal to start and less than stop.
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
};
$3e1456c4b7b56a7b$var$MillerRabin.prototype.test = function test(n, k, cb) {
    var len = n.bitLength();
    var red = $ek2tU.mont(n);
    var rone = new $ek2tU(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    var prime = true;
    for(; k > 0; k--){
        var a = this._randrange(new $ek2tU(2), n1);
        if (cb) cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return false;
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) return false;
    }
    return prime;
};
$3e1456c4b7b56a7b$var$MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
    var len = n.bitLength();
    var red = $ek2tU.mont(n);
    var rone = new $ek2tU(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    for(; k > 0; k--){
        var a = this._randrange(new $ek2tU(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0) return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) {
            x = x.redSqr();
            return x.fromRed().subn(1).gcd(n);
        }
    }
    return false;
};

});
parcelRequire.register("3cL3l", function(module, exports) {
var $2556fdce4b1fc483$var$r;
module.exports = function rand(len) {
    if (!$2556fdce4b1fc483$var$r) $2556fdce4b1fc483$var$r = new $2556fdce4b1fc483$var$Rand(null);
    return $2556fdce4b1fc483$var$r.generate(len);
};
function $2556fdce4b1fc483$var$Rand(rand) {
    this.rand = rand;
}
module.exports.Rand = $2556fdce4b1fc483$var$Rand;
$2556fdce4b1fc483$var$Rand.prototype.generate = function generate(len) {
    return this._rand(len);
};
// Emulate crypto API using randy
$2556fdce4b1fc483$var$Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();
    return res;
};

if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) // Modern browsers
    $2556fdce4b1fc483$var$Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
    };
    else if (self.msCrypto && self.msCrypto.getRandomValues) // IE
    $2556fdce4b1fc483$var$Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
    };
    else if (typeof window === 'object') // Old junk
    $2556fdce4b1fc483$var$Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
    };
} else // Node.js or Web worker with no crypto support
try {
    var $2556fdce4b1fc483$var$crypto = (parcelRequire("ksweO"));
    if (typeof $2556fdce4b1fc483$var$crypto.randomBytes !== 'function') throw new Error('Not supported');
    $2556fdce4b1fc483$var$Rand.prototype._rand = function _rand(n) {
        return $2556fdce4b1fc483$var$crypto.randomBytes(n);
    };
} catch (e) {}

});



parcelRequire.register("9cSEl", function(module, exports) {
module.exports = JSON.parse("{\"modp1\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"},\"modp2\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"},\"modp5\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"},\"modp14\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"},\"modp15\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"},\"modp16\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"},\"modp17\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"},\"modp18\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"}}");

});

parcelRequire.register("zDcAB", function(module, exports) {

var $5vuHX = parcelRequire("5vuHX");
var $06b1adb5eebf8692$require$Buffer = $5vuHX.Buffer;

var $ek2tU = parcelRequire("ek2tU");

var $5krJZ = parcelRequire("5krJZ");
var $06b1adb5eebf8692$var$millerRabin = new $5krJZ();
var $06b1adb5eebf8692$var$TWENTYFOUR = new $ek2tU(24);
var $06b1adb5eebf8692$var$ELEVEN = new $ek2tU(11);
var $06b1adb5eebf8692$var$TEN = new $ek2tU(10);
var $06b1adb5eebf8692$var$THREE = new $ek2tU(3);
var $06b1adb5eebf8692$var$SEVEN = new $ek2tU(7);

var $6Y9QU = parcelRequire("6Y9QU");

var $1umH4 = parcelRequire("1umH4");
module.exports = $06b1adb5eebf8692$var$DH;
function $06b1adb5eebf8692$var$setPublicKey(pub, enc) {
    enc = enc || 'utf8';
    if (!$06b1adb5eebf8692$require$Buffer.isBuffer(pub)) pub = new $06b1adb5eebf8692$require$Buffer(pub, enc);
    this._pub = new $ek2tU(pub);
    return this;
}
function $06b1adb5eebf8692$var$setPrivateKey(priv, enc) {
    enc = enc || 'utf8';
    if (!$06b1adb5eebf8692$require$Buffer.isBuffer(priv)) priv = new $06b1adb5eebf8692$require$Buffer(priv, enc);
    this._priv = new $ek2tU(priv);
    return this;
}
var $06b1adb5eebf8692$var$primeCache = {};
function $06b1adb5eebf8692$var$checkPrime(prime, generator) {
    var gen = generator.toString('hex');
    var hex = [
        gen,
        prime.toString(16)
    ].join('_');
    if (hex in $06b1adb5eebf8692$var$primeCache) return $06b1adb5eebf8692$var$primeCache[hex];
    var error = 0;
    if (prime.isEven() || !$6Y9QU.simpleSieve || !$6Y9QU.fermatTest(prime) || !$06b1adb5eebf8692$var$millerRabin.test(prime)) {
        //not a prime so +1
        error += 1;
        if (gen === '02' || gen === '05') // we'd be able to check the generator
        // it would fail so +8
        error += 8;
        else //we wouldn't be able to test the generator
        // so +4
        error += 4;
        $06b1adb5eebf8692$var$primeCache[hex] = error;
        return error;
    }
    if (!$06b1adb5eebf8692$var$millerRabin.test(prime.shrn(1))) //not a safe prime
    error += 2;
    var rem;
    switch(gen){
        case '02':
            if (prime.mod($06b1adb5eebf8692$var$TWENTYFOUR).cmp($06b1adb5eebf8692$var$ELEVEN)) // unsuidable generator
            error += 8;
            break;
        case '05':
            rem = prime.mod($06b1adb5eebf8692$var$TEN);
            if (rem.cmp($06b1adb5eebf8692$var$THREE) && rem.cmp($06b1adb5eebf8692$var$SEVEN)) // prime mod 10 needs to equal 3 or 7
            error += 8;
            break;
        default:
            error += 4;
    }
    $06b1adb5eebf8692$var$primeCache[hex] = error;
    return error;
}
function $06b1adb5eebf8692$var$DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new $ek2tU(prime);
    this._prime = $ek2tU.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = undefined;
    this._priv = undefined;
    this._primeCode = undefined;
    if (malleable) {
        this.setPublicKey = $06b1adb5eebf8692$var$setPublicKey;
        this.setPrivateKey = $06b1adb5eebf8692$var$setPrivateKey;
    } else this._primeCode = 8;
}
Object.defineProperty($06b1adb5eebf8692$var$DH.prototype, 'verifyError', {
    enumerable: true,
    get: function get() {
        if (typeof this._primeCode !== 'number') this._primeCode = $06b1adb5eebf8692$var$checkPrime(this.__prime, this.__gen);
        return this._primeCode;
    }
});
$06b1adb5eebf8692$var$DH.prototype.generateKeys = function() {
    if (!this._priv) this._priv = new $ek2tU($1umH4(this._primeLen));
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
};
$06b1adb5eebf8692$var$DH.prototype.computeSecret = function(other) {
    other = new $ek2tU(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new $06b1adb5eebf8692$require$Buffer(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
        var front = new $06b1adb5eebf8692$require$Buffer(prime.length - out.length);
        front.fill(0);
        out = $06b1adb5eebf8692$require$Buffer.concat([
            front,
            out
        ]);
    }
    return out;
};
$06b1adb5eebf8692$var$DH.prototype.getPublicKey = function getPublicKey(enc) {
    return $06b1adb5eebf8692$var$formatReturnValue(this._pub, enc);
};
$06b1adb5eebf8692$var$DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return $06b1adb5eebf8692$var$formatReturnValue(this._priv, enc);
};
$06b1adb5eebf8692$var$DH.prototype.getPrime = function(enc) {
    return $06b1adb5eebf8692$var$formatReturnValue(this.__prime, enc);
};
$06b1adb5eebf8692$var$DH.prototype.getGenerator = function(enc) {
    return $06b1adb5eebf8692$var$formatReturnValue(this._gen, enc);
};
$06b1adb5eebf8692$var$DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || 'utf8';
    if (!$06b1adb5eebf8692$require$Buffer.isBuffer(gen)) gen = new $06b1adb5eebf8692$require$Buffer(gen, enc);
    this.__gen = gen;
    this._gen = new $ek2tU(gen);
    return this;
};
function $06b1adb5eebf8692$var$formatReturnValue(bn, enc) {
    var buf = new $06b1adb5eebf8692$require$Buffer(bn.toArray());
    if (!enc) return buf;
    else return buf.toString(enc);
}

});


parcelRequire.register("78zD0", function(module, exports) {

var $6DGcH = parcelRequire("6DGcH");
var $5324eabfb9145f2a$require$Buffer = $6DGcH.Buffer;

var $c9fiB = parcelRequire("c9fiB");

var $618GO = parcelRequire("618GO");

var $2gGh5 = parcelRequire("2gGh5");

var $kUSU3 = parcelRequire("kUSU3");

var $iipMK = parcelRequire("iipMK");

var $ea3Gv = parcelRequire("ea3Gv");
Object.keys($ea3Gv).forEach(function(key) {
    $ea3Gv[key].id = $5324eabfb9145f2a$require$Buffer.from($ea3Gv[key].id, 'hex');
    $ea3Gv[key.toLowerCase()] = $ea3Gv[key];
});
function $5324eabfb9145f2a$var$Sign(algorithm) {
    $618GO.Writable.call(this);
    var data = $ea3Gv[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hashType = data.hash;
    this._hash = $c9fiB(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
$2gGh5($5324eabfb9145f2a$var$Sign, $618GO.Writable);
$5324eabfb9145f2a$var$Sign.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
$5324eabfb9145f2a$var$Sign.prototype.update = function update(data, enc) {
    if (typeof data === 'string') data = $5324eabfb9145f2a$require$Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
$5324eabfb9145f2a$var$Sign.prototype.sign = function signMethod(key, enc) {
    this.end();
    var hash = this._hash.digest();
    var sig = $kUSU3(hash, key, this._hashType, this._signType, this._tag);
    return enc ? sig.toString(enc) : sig;
};
function $5324eabfb9145f2a$var$Verify(algorithm) {
    $618GO.Writable.call(this);
    var data = $ea3Gv[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hash = $c9fiB(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
$2gGh5($5324eabfb9145f2a$var$Verify, $618GO.Writable);
$5324eabfb9145f2a$var$Verify.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
$5324eabfb9145f2a$var$Verify.prototype.update = function update(data, enc) {
    if (typeof data === 'string') data = $5324eabfb9145f2a$require$Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
$5324eabfb9145f2a$var$Verify.prototype.verify = function verifyMethod(key, sig, enc) {
    if (typeof sig === 'string') sig = $5324eabfb9145f2a$require$Buffer.from(sig, enc);
    this.end();
    var hash = this._hash.digest();
    return $iipMK(sig, hash, key, this._signType, this._tag);
};
function $5324eabfb9145f2a$var$createSign(algorithm) {
    return new $5324eabfb9145f2a$var$Sign(algorithm);
}
function $5324eabfb9145f2a$var$createVerify(algorithm) {
    return new $5324eabfb9145f2a$var$Verify(algorithm);
}
module.exports = {
    Sign: $5324eabfb9145f2a$var$createSign,
    Verify: $5324eabfb9145f2a$var$createVerify,
    createSign: $5324eabfb9145f2a$var$createSign,
    createVerify: $5324eabfb9145f2a$var$createVerify
};

});
parcelRequire.register("kUSU3", function(module, exports) {

var $6DGcH = parcelRequire("6DGcH");
var $f3a3a03bf51879b4$require$Buffer = $6DGcH.Buffer;

var $80tDi = parcelRequire("80tDi");

var $1sFyv = parcelRequire("1sFyv");

var $aSFVr = parcelRequire("aSFVr");
var $f3a3a03bf51879b4$require$EC = $aSFVr.ec;

var $7W4xt = parcelRequire("7W4xt");

var $c1Cul = parcelRequire("c1Cul");

var $cUEXt = parcelRequire("cUEXt");
function $f3a3a03bf51879b4$var$sign(hash, key, hashType, signType, tag) {
    var priv = $c1Cul(key);
    if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
        return $f3a3a03bf51879b4$var$ecSign(hash, priv);
    } else if (priv.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong private key type');
        return $f3a3a03bf51879b4$var$dsaSign(hash, priv, hashType);
    } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
    }
    hash = $f3a3a03bf51879b4$require$Buffer.concat([
        tag,
        hash
    ]);
    var len = priv.modulus.byteLength();
    var pad = [
        0,
        1
    ];
    while(hash.length + pad.length + 1 < len)pad.push(0xff);
    pad.push(0x00);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    var out = $1sFyv(pad, priv);
    return out;
}
function $f3a3a03bf51879b4$var$ecSign(hash, priv) {
    var curveId = $cUEXt[priv.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'));
    var curve = new $f3a3a03bf51879b4$require$EC(curveId);
    var key = curve.keyFromPrivate(priv.privateKey);
    var out = key.sign(hash);
    return $f3a3a03bf51879b4$require$Buffer.from(out.toDER());
}
function $f3a3a03bf51879b4$var$dsaSign(hash, priv, algo) {
    var x = priv.params.priv_key;
    var p = priv.params.p;
    var q = priv.params.q;
    var g = priv.params.g;
    var r = new $7W4xt(0);
    var k;
    var H = $f3a3a03bf51879b4$var$bits2int(hash, q).mod(q);
    var s = false;
    var kv = $f3a3a03bf51879b4$var$getKey(x, q, hash, algo);
    while(s === false){
        k = $f3a3a03bf51879b4$var$makeKey(q, kv, algo);
        r = $f3a3a03bf51879b4$var$makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
        if (s.cmpn(0) === 0) {
            s = false;
            r = new $7W4xt(0);
        }
    }
    return $f3a3a03bf51879b4$var$toDER(r, s);
}
function $f3a3a03bf51879b4$var$toDER(r, s) {
    r = r.toArray();
    s = s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    var total = r.length + s.length + 4;
    var res = [
        0x30,
        total,
        0x02,
        r.length
    ];
    res = res.concat(r, [
        0x02,
        s.length
    ], s);
    return $f3a3a03bf51879b4$require$Buffer.from(res);
}
function $f3a3a03bf51879b4$var$getKey(x, q, hash, algo) {
    x = $f3a3a03bf51879b4$require$Buffer.from(x.toArray());
    if (x.length < q.byteLength()) {
        var zeros = $f3a3a03bf51879b4$require$Buffer.alloc(q.byteLength() - x.length);
        x = $f3a3a03bf51879b4$require$Buffer.concat([
            zeros,
            x
        ]);
    }
    var hlen = hash.length;
    var hbits = $f3a3a03bf51879b4$var$bits2octets(hash, q);
    var v = $f3a3a03bf51879b4$require$Buffer.alloc(hlen);
    v.fill(1);
    var k = $f3a3a03bf51879b4$require$Buffer.alloc(hlen);
    k = $80tDi(algo, k).update(v).update($f3a3a03bf51879b4$require$Buffer.from([
        0
    ])).update(x).update(hbits).digest();
    v = $80tDi(algo, k).update(v).digest();
    k = $80tDi(algo, k).update(v).update($f3a3a03bf51879b4$require$Buffer.from([
        1
    ])).update(x).update(hbits).digest();
    v = $80tDi(algo, k).update(v).digest();
    return {
        k: k,
        v: v
    };
}
function $f3a3a03bf51879b4$var$bits2int(obits, q) {
    var bits = new $7W4xt(obits);
    var shift = (obits.length << 3) - q.bitLength();
    if (shift > 0) bits.ishrn(shift);
    return bits;
}
function $f3a3a03bf51879b4$var$bits2octets(bits, q) {
    bits = $f3a3a03bf51879b4$var$bits2int(bits, q);
    bits = bits.mod(q);
    var out = $f3a3a03bf51879b4$require$Buffer.from(bits.toArray());
    if (out.length < q.byteLength()) {
        var zeros = $f3a3a03bf51879b4$require$Buffer.alloc(q.byteLength() - out.length);
        out = $f3a3a03bf51879b4$require$Buffer.concat([
            zeros,
            out
        ]);
    }
    return out;
}
function $f3a3a03bf51879b4$var$makeKey(q, kv, algo) {
    var t;
    var k;
    do {
        t = $f3a3a03bf51879b4$require$Buffer.alloc(0);
        while(t.length * 8 < q.bitLength()){
            kv.v = $80tDi(algo, kv.k).update(kv.v).digest();
            t = $f3a3a03bf51879b4$require$Buffer.concat([
                t,
                kv.v
            ]);
        }
        k = $f3a3a03bf51879b4$var$bits2int(t, q);
        kv.k = $80tDi(algo, kv.k).update(kv.v).update($f3a3a03bf51879b4$require$Buffer.from([
            0
        ])).digest();
        kv.v = $80tDi(algo, kv.k).update(kv.v).digest();
    }while (k.cmp(q) !== -1)
    return k;
}
function $f3a3a03bf51879b4$var$makeR(g, k, p, q) {
    return g.toRed($7W4xt.mont(p)).redPow(k).fromRed().mod(q);
}
module.exports = $f3a3a03bf51879b4$var$sign;
module.exports.getKey = $f3a3a03bf51879b4$var$getKey;
module.exports.makeKey = $f3a3a03bf51879b4$var$makeKey;

});
parcelRequire.register("1sFyv", function(module, exports) {

var $5vuHX = parcelRequire("5vuHX");
var $1108a40740731b22$require$Buffer = $5vuHX.Buffer;

var $5lHhL = parcelRequire("5lHhL");

var $1umH4 = parcelRequire("1umH4");
function $1108a40740731b22$var$blind(priv) {
    var r = $1108a40740731b22$var$getr(priv);
    var blinder = r.toRed($5lHhL.mont(priv.modulus)).redPow(new $5lHhL(priv.publicExponent)).fromRed();
    return {
        blinder: blinder,
        unblinder: r.invm(priv.modulus)
    };
}
function $1108a40740731b22$var$getr(priv) {
    var len = priv.modulus.byteLength();
    var r;
    do r = new $5lHhL($1umH4(len));
    while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
    return r;
}
function $1108a40740731b22$var$crt(msg, priv) {
    var blinds = $1108a40740731b22$var$blind(priv);
    var len = priv.modulus.byteLength();
    var blinded = new $5lHhL(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed($5lHhL.mont(priv.prime1));
    var c2 = blinded.toRed($5lHhL.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p = priv.prime1;
    var q = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m2 = c2.redPow(priv.exponent2).fromRed();
    var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
    return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike($1108a40740731b22$require$Buffer, 'be', len);
}
$1108a40740731b22$var$crt.getr = $1108a40740731b22$var$getr;
module.exports = $1108a40740731b22$var$crt;

});
parcelRequire.register("5lHhL", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function TempCtor() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("ksweO")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, 'Invalid character in ' + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 0xa;
            else if (c >= 17) b = c - 17 + 0xa;
            else b = c;
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') try {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e1) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 0xff;
            if (position < res.length) res[position++] = word >> 8 & 0xff;
            if (position < res.length) res[position++] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 0xff;
            if (position >= 0) res[position--] = word >> 8 & 0xff;
            if (position >= 0) res[position--] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 0x01;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});


parcelRequire.register("aSFVr", function(module, exports) {
'use strict';
var $7ebf7810cc836ad5$var$elliptic = module.exports;

$7ebf7810cc836ad5$var$elliptic.version = (parcelRequire("1sDhD")).version;

$7ebf7810cc836ad5$var$elliptic.utils = (parcelRequire("2AxbO"));

$7ebf7810cc836ad5$var$elliptic.rand = (parcelRequire("3cL3l"));

$7ebf7810cc836ad5$var$elliptic.curve = (parcelRequire("eDXlQ"));

$7ebf7810cc836ad5$var$elliptic.curves = (parcelRequire("6gmdc"));

// Protocols
$7ebf7810cc836ad5$var$elliptic.ec = (parcelRequire("9HwJB"));

$7ebf7810cc836ad5$var$elliptic.eddsa = (parcelRequire("kAZxC"));

});
parcelRequire.register("1sDhD", function(module, exports) {
module.exports = JSON.parse("{\"name\":\"elliptic\",\"version\":\"6.5.4\",\"description\":\"EC cryptography\",\"main\":\"lib/elliptic.js\",\"files\":[\"lib\"],\"scripts\":{\"lint\":\"eslint lib test\",\"lint:fix\":\"npm run lint -- --fix\",\"unit\":\"istanbul test _mocha --reporter=spec test/index.js\",\"test\":\"npm run lint && npm run unit\",\"version\":\"grunt dist && git add dist/\"},\"repository\":{\"type\":\"git\",\"url\":\"git@github.com:indutny/elliptic\"},\"keywords\":[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],\"author\":\"Fedor Indutny <fedor@indutny.com>\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/indutny/elliptic/issues\"},\"homepage\":\"https://github.com/indutny/elliptic\",\"devDependencies\":{\"brfs\":\"^2.0.2\",\"coveralls\":\"^3.1.0\",\"eslint\":\"^7.6.0\",\"grunt\":\"^1.2.1\",\"grunt-browserify\":\"^5.3.0\",\"grunt-cli\":\"^1.3.2\",\"grunt-contrib-connect\":\"^3.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^5.0.0\",\"grunt-mocha-istanbul\":\"^5.0.2\",\"grunt-saucelabs\":\"^9.0.1\",\"istanbul\":\"^0.4.5\",\"mocha\":\"^8.0.1\"},\"dependencies\":{\"bn.js\":\"^4.11.9\",\"brorand\":\"^1.1.0\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.1\",\"inherits\":\"^2.0.4\",\"minimalistic-assert\":\"^1.0.1\",\"minimalistic-crypto-utils\":\"^1.0.1\"}}");

});

parcelRequire.register("2AxbO", function(module, exports) {
'use strict';
var $1e28b052ba222b55$var$utils = module.exports;

var $ek2tU = parcelRequire("ek2tU");

var $hB7g9 = parcelRequire("hB7g9");

var $kHTF4 = parcelRequire("kHTF4");
$1e28b052ba222b55$var$utils.assert = $hB7g9;
$1e28b052ba222b55$var$utils.toArray = $kHTF4.toArray;
$1e28b052ba222b55$var$utils.zero2 = $kHTF4.zero2;
$1e28b052ba222b55$var$utils.toHex = $kHTF4.toHex;
$1e28b052ba222b55$var$utils.encode = $kHTF4.encode;
// Represent num in a w-NAF form
function $1e28b052ba222b55$var$getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();
    for(var i = 0; i < naf.length; i++){
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
            else z = mod;
            k.isubn(z);
        } else z = 0;
        naf[i] = z;
        k.iushrn(1);
    }
    return naf;
}
$1e28b052ba222b55$var$utils.getNAF = $1e28b052ba222b55$var$getNAF;
// Represent k1, k2 in a Joint Sparse Form
function $1e28b052ba222b55$var$getJSF(k1, k2) {
    var jsf = [
        [],
        [], 
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) u1 = 0;
        else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) u2 = 0;
        else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
            else u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
$1e28b052ba222b55$var$utils.getJSF = $1e28b052ba222b55$var$getJSF;
function $1e28b052ba222b55$var$cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
}
$1e28b052ba222b55$var$utils.cachedProperty = $1e28b052ba222b55$var$cachedProperty;
function $1e28b052ba222b55$var$parseBytes(bytes) {
    return typeof bytes === 'string' ? $1e28b052ba222b55$var$utils.toArray(bytes, 'hex') : bytes;
}
$1e28b052ba222b55$var$utils.parseBytes = $1e28b052ba222b55$var$parseBytes;
function $1e28b052ba222b55$var$intFromLE(bytes) {
    return new $ek2tU(bytes, 'hex', 'le');
}
$1e28b052ba222b55$var$utils.intFromLE = $1e28b052ba222b55$var$intFromLE;

});
parcelRequire.register("kHTF4", function(module, exports) {
'use strict';
var $f132fff9750a5334$var$utils = module.exports;
function $f132fff9750a5334$var$toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg !== 'string') {
        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
        return res;
    }
    if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0) msg = '0' + msg;
        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else for(var i = 0; i < msg.length; i++){
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);
        else res.push(lo);
    }
    return res;
}
$f132fff9750a5334$var$utils.toArray = $f132fff9750a5334$var$toArray;
function $f132fff9750a5334$var$zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
$f132fff9750a5334$var$utils.zero2 = $f132fff9750a5334$var$zero2;
function $f132fff9750a5334$var$toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += $f132fff9750a5334$var$zero2(msg[i].toString(16));
    return res;
}
$f132fff9750a5334$var$utils.toHex = $f132fff9750a5334$var$toHex;
$f132fff9750a5334$var$utils.encode = function encode(arr, enc) {
    if (enc === 'hex') return $f132fff9750a5334$var$toHex(arr);
    else return arr;
};

});


parcelRequire.register("eDXlQ", function(module, exports) {
'use strict';
var $aa92bf1f6d9c5f2d$var$curve = module.exports;

$aa92bf1f6d9c5f2d$var$curve.base = (parcelRequire("bCe07"));

$aa92bf1f6d9c5f2d$var$curve.short = (parcelRequire("2l7O1"));

$aa92bf1f6d9c5f2d$var$curve.mont = (parcelRequire("fThPq"));

$aa92bf1f6d9c5f2d$var$curve.edwards = (parcelRequire("8qVnT"));

});
parcelRequire.register("bCe07", function(module, exports) {
'use strict';

var $ek2tU = parcelRequire("ek2tU");

var $2AxbO = parcelRequire("2AxbO");
var $874e1a9f49e28f73$var$getNAF = $2AxbO.getNAF;
var $874e1a9f49e28f73$var$getJSF = $2AxbO.getJSF;
var $874e1a9f49e28f73$var$assert = $2AxbO.assert;
function $874e1a9f49e28f73$var$BaseCurve(type, conf) {
    this.type = type;
    this.p = new $ek2tU(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? $ek2tU.red(conf.prime) : $ek2tU.mont(this.p);
    // Useful for many curves
    this.zero = new $ek2tU(0).toRed(this.red);
    this.one = new $ek2tU(1).toRed(this.red);
    this.two = new $ek2tU(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new $ek2tU(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = $874e1a9f49e28f73$var$BaseCurve;
$874e1a9f49e28f73$var$BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
};
$874e1a9f49e28f73$var$BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
};
$874e1a9f49e28f73$var$BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    $874e1a9f49e28f73$var$assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = $874e1a9f49e28f73$var$getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
$874e1a9f49e28f73$var$BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = $874e1a9f49e28f73$var$getNAF(k, w, this._bitLength);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        // Count zeroes
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        $874e1a9f49e28f73$var$assert(z !== 0);
        if (p.type === 'affine') {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
        else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
    return p.type === 'affine' ? acc.toP() : acc;
};
$874e1a9f49e28f73$var$BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = $874e1a9f49e28f73$var$getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = $874e1a9f49e28f73$var$getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            /* 1 */ null,
            /* 3 */ null,
            /* 5 */ points[b]
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            /* -1 -1 */ -1,
            /* -1 0 */ -5,
            /* -1 1 */ -7,
            /* 0 -1 */ 0,
            /* 0 0 */ 7,
            /* 0 1 */ 5,
            /* 1 -1 */ 1,
            /* 1 0 */ 3
        ];
        var jsf = $874e1a9f49e28f73$var$getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === 'affine') acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function $874e1a9f49e28f73$var$BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
$874e1a9f49e28f73$var$BaseCurve.BasePoint = $874e1a9f49e28f73$var$BasePoint;
$874e1a9f49e28f73$var$BasePoint.prototype.eq = function eq() {
    throw new Error('Not implemented');
};
$874e1a9f49e28f73$var$BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};
$874e1a9f49e28f73$var$BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = $2AxbO.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06) $874e1a9f49e28f73$var$assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07) $874e1a9f49e28f73$var$assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    throw new Error('Unknown point format');
};
$874e1a9f49e28f73$var$BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
$874e1a9f49e28f73$var$BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);
    if (compact) return [
        this.getY().isEven() ? 0x02 : 0x03
    ].concat(x);
    return [
        0x04
    ].concat(x, this.getY().toArray('be', len));
};
$874e1a9f49e28f73$var$BasePoint.prototype.encode = function encode(enc, compact) {
    return $2AxbO.encode(this._encode(compact), enc);
};
$874e1a9f49e28f73$var$BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
$874e1a9f49e28f73$var$BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
$874e1a9f49e28f73$var$BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
$874e1a9f49e28f73$var$BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
$874e1a9f49e28f73$var$BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
$874e1a9f49e28f73$var$BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};

});

parcelRequire.register("2l7O1", function(module, exports) {
'use strict';

var $2AxbO = parcelRequire("2AxbO");

var $ek2tU = parcelRequire("ek2tU");

var $2gGh5 = parcelRequire("2gGh5");

var $bCe07 = parcelRequire("bCe07");
var $1b43990277f8bea1$var$assert = $2AxbO.assert;
function $1b43990277f8bea1$var$ShortCurve(conf) {
    $bCe07.call(this, 'short', conf);
    this.a = new $ek2tU(conf.a, 16).toRed(this.red);
    this.b = new $ek2tU(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
$2gGh5($1b43990277f8bea1$var$ShortCurve, $bCe07);
module.exports = $1b43990277f8bea1$var$ShortCurve;
$1b43990277f8bea1$var$ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) beta = new $ek2tU(conf.beta, 16).toRed(this.red);
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) lambda = new $ek2tU(conf.lambda, 16);
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
        else {
            lambda = lambdas[1];
            $1b43990277f8bea1$var$assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) basis = conf.basis.map(function(vec) {
        return {
            a: new $ek2tU(vec.a, 16),
            b: new $ek2tU(vec.b, 16)
        };
    });
    else basis = this._getEndoBasis(lambda);
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
$1b43990277f8bea1$var$ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : $ek2tU.mont(num);
    var tinv = new $ek2tU(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new $ek2tU(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
$1b43990277f8bea1$var$ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new $ek2tU(1);
    var y1 = new $ek2tU(0);
    var x2 = new $ek2tU(0);
    var y2 = new $ek2tU(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && ++i === 2) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }, 
    ];
};
$1b43990277f8bea1$var$ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1: k1,
        k2: k2
    };
};
$1b43990277f8bea1$var$ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new $ek2tU(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
$1b43990277f8bea1$var$ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
$1b43990277f8bea1$var$ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    // Clean-up references to points and coefficients
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function $1b43990277f8bea1$var$Point(curve, x, y, isRed) {
    $bCe07.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new $ek2tU(x, 16);
        this.y = new $ek2tU(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
$2gGh5($1b43990277f8bea1$var$Point, $bCe07.BasePoint);
$1b43990277f8bea1$var$ShortCurve.prototype.point = function point(x, y, isRed) {
    return new $1b43990277f8bea1$var$Point(this, x, y, isRed);
};
$1b43990277f8bea1$var$ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return $1b43990277f8bea1$var$Point.fromJSON(this, obj, red);
};
$1b43990277f8bea1$var$Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function endoMul(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
$1b43990277f8bea1$var$Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
$1b43990277f8bea1$var$Point.fromJSON = function fromJSON(curve, obj1, red) {
    if (typeof obj1 === 'string') obj1 = JSON.parse(obj1);
    var res = curve.point(obj1[0], obj1[1], red);
    if (!obj1[2]) return res;
    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }
    var pre = obj1[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
$1b43990277f8bea1$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};
$1b43990277f8bea1$var$Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
$1b43990277f8bea1$var$Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;
    // P + O = P
    if (p.inf) return this;
    // P + P = 2P
    if (this.eq(p)) return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
$1b43990277f8bea1$var$Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
$1b43990277f8bea1$var$Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
$1b43990277f8bea1$var$Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
$1b43990277f8bea1$var$Point.prototype.mul = function mul(k) {
    k = new $ek2tU(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
$1b43990277f8bea1$var$Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
$1b43990277f8bea1$var$Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
$1b43990277f8bea1$var$Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
$1b43990277f8bea1$var$Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function negate(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
$1b43990277f8bea1$var$Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function $1b43990277f8bea1$var$JPoint(curve, x, y, z) {
    $bCe07.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new $ek2tU(0);
    } else {
        this.x = new $ek2tU(x, 16);
        this.y = new $ek2tU(y, 16);
        this.z = new $ek2tU(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
$2gGh5($1b43990277f8bea1$var$JPoint, $bCe07.BasePoint);
$1b43990277f8bea1$var$ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new $1b43990277f8bea1$var$JPoint(this, x, y, z);
};
$1b43990277f8bea1$var$JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
$1b43990277f8bea1$var$JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
$1b43990277f8bea1$var$JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity()) return p;
    // P + O = P
    if (p.isInfinity()) return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
$1b43990277f8bea1$var$JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();
    // P + O = P
    if (p.isInfinity()) return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
$1b43990277f8bea1$var$JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
$1b43990277f8bea1$var$JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
$1b43990277f8bea1$var$JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
$1b43990277f8bea1$var$JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
$1b43990277f8bea1$var$JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
$1b43990277f8bea1$var$JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
$1b43990277f8bea1$var$JPoint.prototype.mul = function mul(k, kbase) {
    k = new $ek2tU(k, kbase);
    return this.curve._wnafMul(this, k);
};
$1b43990277f8bea1$var$JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine') return this.eq(p.toJ());
    if (this === p) return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
$1b43990277f8bea1$var$JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
$1b43990277f8bea1$var$JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};
$1b43990277f8bea1$var$JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

});

parcelRequire.register("fThPq", function(module, exports) {
'use strict';

var $ek2tU = parcelRequire("ek2tU");

var $2gGh5 = parcelRequire("2gGh5");

var $bCe07 = parcelRequire("bCe07");

var $2AxbO = parcelRequire("2AxbO");
function $b919d267bbfcdb24$var$MontCurve(conf) {
    $bCe07.call(this, 'mont', conf);
    this.a = new $ek2tU(conf.a, 16).toRed(this.red);
    this.b = new $ek2tU(conf.b, 16).toRed(this.red);
    this.i4 = new $ek2tU(4).toRed(this.red).redInvm();
    this.two = new $ek2tU(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
$2gGh5($b919d267bbfcdb24$var$MontCurve, $bCe07);
module.exports = $b919d267bbfcdb24$var$MontCurve;
$b919d267bbfcdb24$var$MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function $b919d267bbfcdb24$var$Point(curve, x, z) {
    $bCe07.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    } else {
        this.x = new $ek2tU(x, 16);
        this.z = new $ek2tU(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
}
$2gGh5($b919d267bbfcdb24$var$Point, $bCe07.BasePoint);
$b919d267bbfcdb24$var$MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point($2AxbO.toArray(bytes, enc), 1);
};
$b919d267bbfcdb24$var$MontCurve.prototype.point = function point(x, z) {
    return new $b919d267bbfcdb24$var$Point(this, x, z);
};
$b919d267bbfcdb24$var$MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return $b919d267bbfcdb24$var$Point.fromJSON(this, obj);
};
$b919d267bbfcdb24$var$Point.prototype.precompute = function precompute() {
// No-op
};
$b919d267bbfcdb24$var$Point.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
};
$b919d267bbfcdb24$var$Point.fromJSON = function fromJSON(curve, obj) {
    return new $b919d267bbfcdb24$var$Point(curve, obj[0], obj[1] || curve.one);
};
$b919d267bbfcdb24$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
$b919d267bbfcdb24$var$Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
$b919d267bbfcdb24$var$Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
$b919d267bbfcdb24$var$Point.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
};
$b919d267bbfcdb24$var$Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
$b919d267bbfcdb24$var$Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));
    for(var i = bits.length - 1; i >= 0; i--)if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
    } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
    }
    return b;
};
$b919d267bbfcdb24$var$Point.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
};
$b919d267bbfcdb24$var$Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
};
$b919d267bbfcdb24$var$Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
$b919d267bbfcdb24$var$Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
$b919d267bbfcdb24$var$Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

});

parcelRequire.register("8qVnT", function(module, exports) {
'use strict';

var $2AxbO = parcelRequire("2AxbO");

var $ek2tU = parcelRequire("ek2tU");

var $2gGh5 = parcelRequire("2gGh5");

var $bCe07 = parcelRequire("bCe07");
var $623d43c90d67a386$var$assert = $2AxbO.assert;
function $623d43c90d67a386$var$EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    $bCe07.call(this, 'edwards', conf);
    this.a = new $ek2tU(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new $ek2tU(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new $ek2tU(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    $623d43c90d67a386$var$assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
$2gGh5($623d43c90d67a386$var$EdwardsCurve, $bCe07);
module.exports = $623d43c90d67a386$var$EdwardsCurve;
$623d43c90d67a386$var$EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();
    else return this.a.redMul(num);
};
$623d43c90d67a386$var$EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;
    else return this.c.redMul(num);
};
// Just for compatibility with Short curve
$623d43c90d67a386$var$EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
$623d43c90d67a386$var$EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new $ek2tU(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
$623d43c90d67a386$var$EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new $ek2tU(y, 16);
    if (!y.red) y = y.toRed(this.red);
    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error('invalid point');
        else return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
    return this.point(x, y);
};
$623d43c90d67a386$var$EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function $623d43c90d67a386$var$Point(curve, x, y, z, t) {
    $bCe07.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    } else {
        this.x = new $ek2tU(x, 16);
        this.y = new $ek2tU(y, 16);
        this.z = z ? new $ek2tU(z, 16) : this.curve.one;
        this.t = t && new $ek2tU(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
$2gGh5($623d43c90d67a386$var$Point, $bCe07.BasePoint);
$623d43c90d67a386$var$EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return $623d43c90d67a386$var$Point.fromJSON(this, obj);
};
$623d43c90d67a386$var$EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new $623d43c90d67a386$var$Point(this, x, y, z, t);
};
$623d43c90d67a386$var$Point.fromJSON = function fromJSON(curve, obj) {
    return new $623d43c90d67a386$var$Point(curve, obj[0], obj[1], obj[2]);
};
$623d43c90d67a386$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
$623d43c90d67a386$var$Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};
$623d43c90d67a386$var$Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
$623d43c90d67a386$var$Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
$623d43c90d67a386$var$Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    // Double in extended coordinates
    if (this.curve.extended) return this._extDbl();
    else return this._projDbl();
};
$623d43c90d67a386$var$Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
$623d43c90d67a386$var$Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
$623d43c90d67a386$var$Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);
    else return this._projAdd(p);
};
$623d43c90d67a386$var$Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else return this.curve._wnafMul(this, k);
};
$623d43c90d67a386$var$Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, false);
};
$623d43c90d67a386$var$Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, true);
};
$623d43c90d67a386$var$Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
$623d43c90d67a386$var$Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
$623d43c90d67a386$var$Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
$623d43c90d67a386$var$Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
$623d43c90d67a386$var$Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};
$623d43c90d67a386$var$Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
// Compatibility with BaseCurve
$623d43c90d67a386$var$Point.prototype.toP = $623d43c90d67a386$var$Point.prototype.normalize;
$623d43c90d67a386$var$Point.prototype.mixedAdd = $623d43c90d67a386$var$Point.prototype.add;

});


parcelRequire.register("6gmdc", function(module, exports) {
'use strict';
var $48f5778769d122f9$var$curves = module.exports;

var $4B2gP = parcelRequire("4B2gP");

var $eDXlQ = parcelRequire("eDXlQ");

var $2AxbO = parcelRequire("2AxbO");
var $48f5778769d122f9$var$assert = $2AxbO.assert;
function $48f5778769d122f9$var$PresetCurve(options) {
    if (options.type === 'short') this.curve = new $eDXlQ.short(options);
    else if (options.type === 'edwards') this.curve = new $eDXlQ.edwards(options);
    else this.curve = new $eDXlQ.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    $48f5778769d122f9$var$assert(this.g.validate(), 'Invalid curve');
    $48f5778769d122f9$var$assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
$48f5778769d122f9$var$curves.PresetCurve = $48f5778769d122f9$var$PresetCurve;
function $48f5778769d122f9$var$defineCurve(name, options) {
    Object.defineProperty($48f5778769d122f9$var$curves, name, {
        configurable: true,
        enumerable: true,
        get: function get() {
            var curve = new $48f5778769d122f9$var$PresetCurve(options);
            Object.defineProperty($48f5778769d122f9$var$curves, name, {
                configurable: true,
                enumerable: true,
                value: curve
            });
            return curve;
        }
    });
}
$48f5778769d122f9$var$defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: $4B2gP.sha256,
    gRed: false,
    g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811', 
    ]
});
$48f5778769d122f9$var$defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: $4B2gP.sha256,
    gRed: false,
    g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34', 
    ]
});
$48f5778769d122f9$var$defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: $4B2gP.sha256,
    gRed: false,
    g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5', 
    ]
});
$48f5778769d122f9$var$defineCurve('p384', {
    type: 'short',
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: $4B2gP.sha384,
    gRed: false,
    g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f", 
    ]
});
$48f5778769d122f9$var$defineCurve('p521', {
    type: 'short',
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: $4B2gP.sha512,
    gRed: false,
    g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650", 
    ]
});
$48f5778769d122f9$var$defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: $4B2gP.sha256,
    gRed: false,
    g: [
        '9', 
    ]
});
$48f5778769d122f9$var$defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: $4B2gP.sha256,
    gRed: false,
    g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658', 
    ]
});
var $48f5778769d122f9$var$pre;

try {
    $48f5778769d122f9$var$pre = (parcelRequire("3rsAS"));
} catch (e) {
    $48f5778769d122f9$var$pre = undefined;
}
$48f5778769d122f9$var$defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: $4B2gP.sha256,
    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
        {
            a: '3086d221a7d46bcde86c90e49284eb15',
            b: '-e4437ed6010e88286f547fa90abfe4c3'
        },
        {
            a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
            b: '3086d221a7d46bcde86c90e49284eb15'
        }, 
    ],
    gRed: false,
    g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        $48f5778769d122f9$var$pre, 
    ]
});

});
parcelRequire.register("4B2gP", function(module, exports) {
var $358c60fc539e8869$var$hash = module.exports;

$358c60fc539e8869$var$hash.utils = (parcelRequire("k7YpQ"));

$358c60fc539e8869$var$hash.common = (parcelRequire("2FEB1"));

$358c60fc539e8869$var$hash.sha = (parcelRequire("juiZl"));

$358c60fc539e8869$var$hash.ripemd = (parcelRequire("dZgMj"));

$358c60fc539e8869$var$hash.hmac = (parcelRequire("1V7zw"));
// Proxy hash functions to the main object
$358c60fc539e8869$var$hash.sha1 = $358c60fc539e8869$var$hash.sha.sha1;
$358c60fc539e8869$var$hash.sha256 = $358c60fc539e8869$var$hash.sha.sha256;
$358c60fc539e8869$var$hash.sha224 = $358c60fc539e8869$var$hash.sha.sha224;
$358c60fc539e8869$var$hash.sha384 = $358c60fc539e8869$var$hash.sha.sha384;
$358c60fc539e8869$var$hash.sha512 = $358c60fc539e8869$var$hash.sha.sha512;
$358c60fc539e8869$var$hash.ripemd160 = $358c60fc539e8869$var$hash.ripemd.ripemd160;

});
parcelRequire.register("k7YpQ", function(module, exports) {

$parcel$export(module.exports, "inherits", function () { return $ea73536bddbd94f5$export$69f1b2dcda23c5f8; }, function (v) { return $ea73536bddbd94f5$export$69f1b2dcda23c5f8 = v; });
$parcel$export(module.exports, "toArray", function () { return $ea73536bddbd94f5$export$45b10814cc054894; }, function (v) { return $ea73536bddbd94f5$export$45b10814cc054894 = v; });
$parcel$export(module.exports, "toHex", function () { return $ea73536bddbd94f5$export$7ea66e3774a60b67; }, function (v) { return $ea73536bddbd94f5$export$7ea66e3774a60b67 = v; });
$parcel$export(module.exports, "htonl", function () { return $ea73536bddbd94f5$export$34a52f00f601f6f1; }, function (v) { return $ea73536bddbd94f5$export$34a52f00f601f6f1 = v; });
$parcel$export(module.exports, "toHex32", function () { return $ea73536bddbd94f5$export$812b0cbd5e8a72ab; }, function (v) { return $ea73536bddbd94f5$export$812b0cbd5e8a72ab = v; });
$parcel$export(module.exports, "zero2", function () { return $ea73536bddbd94f5$export$f24f9e11d63bb314; }, function (v) { return $ea73536bddbd94f5$export$f24f9e11d63bb314 = v; });
$parcel$export(module.exports, "zero8", function () { return $ea73536bddbd94f5$export$b71357c7e07ca1f1; }, function (v) { return $ea73536bddbd94f5$export$b71357c7e07ca1f1 = v; });
$parcel$export(module.exports, "join32", function () { return $ea73536bddbd94f5$export$2e58a4b541fdcbe8; }, function (v) { return $ea73536bddbd94f5$export$2e58a4b541fdcbe8 = v; });
$parcel$export(module.exports, "split32", function () { return $ea73536bddbd94f5$export$183b950bde9faab8; }, function (v) { return $ea73536bddbd94f5$export$183b950bde9faab8 = v; });
$parcel$export(module.exports, "rotr32", function () { return $ea73536bddbd94f5$export$4785c77169fea59e; }, function (v) { return $ea73536bddbd94f5$export$4785c77169fea59e = v; });
$parcel$export(module.exports, "rotl32", function () { return $ea73536bddbd94f5$export$242a185dfcffac5b; }, function (v) { return $ea73536bddbd94f5$export$242a185dfcffac5b = v; });
$parcel$export(module.exports, "sum32", function () { return $ea73536bddbd94f5$export$58c04ae0ae31877d; }, function (v) { return $ea73536bddbd94f5$export$58c04ae0ae31877d = v; });
$parcel$export(module.exports, "sum32_3", function () { return $ea73536bddbd94f5$export$d058ca695f8c6f11; }, function (v) { return $ea73536bddbd94f5$export$d058ca695f8c6f11 = v; });
$parcel$export(module.exports, "sum32_4", function () { return $ea73536bddbd94f5$export$a1efd7fc3e986367; }, function (v) { return $ea73536bddbd94f5$export$a1efd7fc3e986367 = v; });
$parcel$export(module.exports, "sum32_5", function () { return $ea73536bddbd94f5$export$bbfea4a2b5abaab4; }, function (v) { return $ea73536bddbd94f5$export$bbfea4a2b5abaab4 = v; });
$parcel$export(module.exports, "sum64", function () { return $ea73536bddbd94f5$export$97ad4afc7de86152; }, function (v) { return $ea73536bddbd94f5$export$97ad4afc7de86152 = v; });
$parcel$export(module.exports, "sum64_hi", function () { return $ea73536bddbd94f5$export$ce4673d9a79f6a4b; }, function (v) { return $ea73536bddbd94f5$export$ce4673d9a79f6a4b = v; });
$parcel$export(module.exports, "sum64_lo", function () { return $ea73536bddbd94f5$export$786cc99fc6eedc0b; }, function (v) { return $ea73536bddbd94f5$export$786cc99fc6eedc0b = v; });
$parcel$export(module.exports, "sum64_4_hi", function () { return $ea73536bddbd94f5$export$45c59b9a1848dd0; }, function (v) { return $ea73536bddbd94f5$export$45c59b9a1848dd0 = v; });
$parcel$export(module.exports, "sum64_4_lo", function () { return $ea73536bddbd94f5$export$50d8f613e76d3034; }, function (v) { return $ea73536bddbd94f5$export$50d8f613e76d3034 = v; });
$parcel$export(module.exports, "sum64_5_hi", function () { return $ea73536bddbd94f5$export$b8e83683c60ee162; }, function (v) { return $ea73536bddbd94f5$export$b8e83683c60ee162 = v; });
$parcel$export(module.exports, "sum64_5_lo", function () { return $ea73536bddbd94f5$export$aeeb51790d1bcc4a; }, function (v) { return $ea73536bddbd94f5$export$aeeb51790d1bcc4a = v; });
$parcel$export(module.exports, "rotr64_hi", function () { return $ea73536bddbd94f5$export$bb7c616f719ad9c; }, function (v) { return $ea73536bddbd94f5$export$bb7c616f719ad9c = v; });
$parcel$export(module.exports, "rotr64_lo", function () { return $ea73536bddbd94f5$export$4d63290824f9d7df; }, function (v) { return $ea73536bddbd94f5$export$4d63290824f9d7df = v; });
$parcel$export(module.exports, "shr64_hi", function () { return $ea73536bddbd94f5$export$2f64ceb90ef28ea1; }, function (v) { return $ea73536bddbd94f5$export$2f64ceb90ef28ea1 = v; });
$parcel$export(module.exports, "shr64_lo", function () { return $ea73536bddbd94f5$export$8d2089d465f6d10d; }, function (v) { return $ea73536bddbd94f5$export$8d2089d465f6d10d = v; });
var $ea73536bddbd94f5$export$69f1b2dcda23c5f8;
var $ea73536bddbd94f5$export$45b10814cc054894;
var $ea73536bddbd94f5$export$7ea66e3774a60b67;
var $ea73536bddbd94f5$export$34a52f00f601f6f1;
var $ea73536bddbd94f5$export$812b0cbd5e8a72ab;
var $ea73536bddbd94f5$export$f24f9e11d63bb314;
var $ea73536bddbd94f5$export$b71357c7e07ca1f1;
var $ea73536bddbd94f5$export$2e58a4b541fdcbe8;
var $ea73536bddbd94f5$export$183b950bde9faab8;
var $ea73536bddbd94f5$export$4785c77169fea59e;
var $ea73536bddbd94f5$export$242a185dfcffac5b;
var $ea73536bddbd94f5$export$58c04ae0ae31877d;
var $ea73536bddbd94f5$export$d058ca695f8c6f11;
var $ea73536bddbd94f5$export$a1efd7fc3e986367;
var $ea73536bddbd94f5$export$bbfea4a2b5abaab4;
var $ea73536bddbd94f5$export$97ad4afc7de86152;
var $ea73536bddbd94f5$export$ce4673d9a79f6a4b;
var $ea73536bddbd94f5$export$786cc99fc6eedc0b;
var $ea73536bddbd94f5$export$45c59b9a1848dd0;
var $ea73536bddbd94f5$export$50d8f613e76d3034;
var $ea73536bddbd94f5$export$b8e83683c60ee162;
var $ea73536bddbd94f5$export$aeeb51790d1bcc4a;
var $ea73536bddbd94f5$export$bb7c616f719ad9c;
var $ea73536bddbd94f5$export$4d63290824f9d7df;
var $ea73536bddbd94f5$export$2f64ceb90ef28ea1;
var $ea73536bddbd94f5$export$8d2089d465f6d10d;
'use strict';

var $hB7g9 = parcelRequire("hB7g9");

var $2gGh5 = parcelRequire("2gGh5");
$ea73536bddbd94f5$export$69f1b2dcda23c5f8 = $2gGh5;
function $ea73536bddbd94f5$var$isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) return false;
    if (i < 0 || i + 1 >= msg.length) return false;
    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}
function $ea73536bddbd94f5$var$toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === 'string') {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) res[p++] = c;
                else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if ($ea73536bddbd94f5$var$isSurrogatePair(msg, i)) {
                    c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === 'hex') {
            msg = msg.replace(/[^a-z0-9]+/ig, '');
            if (msg.length % 2 !== 0) msg = '0' + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    return res;
}
$ea73536bddbd94f5$export$45b10814cc054894 = $ea73536bddbd94f5$var$toArray;
function $ea73536bddbd94f5$var$toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += $ea73536bddbd94f5$var$zero2(msg[i].toString(16));
    return res;
}
$ea73536bddbd94f5$export$7ea66e3774a60b67 = $ea73536bddbd94f5$var$toHex;
function $ea73536bddbd94f5$var$htonl(w) {
    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
    return res >>> 0;
}
$ea73536bddbd94f5$export$34a52f00f601f6f1 = $ea73536bddbd94f5$var$htonl;
function $ea73536bddbd94f5$var$toHex32(msg, endian) {
    var res = '';
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === 'little') w = $ea73536bddbd94f5$var$htonl(w);
        res += $ea73536bddbd94f5$var$zero8(w.toString(16));
    }
    return res;
}
$ea73536bddbd94f5$export$812b0cbd5e8a72ab = $ea73536bddbd94f5$var$toHex32;
function $ea73536bddbd94f5$var$zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
$ea73536bddbd94f5$export$f24f9e11d63bb314 = $ea73536bddbd94f5$var$zero2;
function $ea73536bddbd94f5$var$zero8(word) {
    if (word.length === 7) return '0' + word;
    else if (word.length === 6) return '00' + word;
    else if (word.length === 5) return '000' + word;
    else if (word.length === 4) return '0000' + word;
    else if (word.length === 3) return '00000' + word;
    else if (word.length === 2) return '000000' + word;
    else if (word.length === 1) return '0000000' + word;
    else return word;
}
$ea73536bddbd94f5$export$b71357c7e07ca1f1 = $ea73536bddbd94f5$var$zero8;
function $ea73536bddbd94f5$var$join32(msg, start, end, endian) {
    var len = end - start;
    $hB7g9(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
$ea73536bddbd94f5$export$2e58a4b541fdcbe8 = $ea73536bddbd94f5$var$join32;
function $ea73536bddbd94f5$var$split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === 'big') {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 0xff;
            res[k + 2] = m >>> 8 & 0xff;
            res[k + 3] = m & 0xff;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 0xff;
            res[k + 1] = m >>> 8 & 0xff;
            res[k] = m & 0xff;
        }
    }
    return res;
}
$ea73536bddbd94f5$export$183b950bde9faab8 = $ea73536bddbd94f5$var$split32;
function $ea73536bddbd94f5$var$rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
$ea73536bddbd94f5$export$4785c77169fea59e = $ea73536bddbd94f5$var$rotr32;
function $ea73536bddbd94f5$var$rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
$ea73536bddbd94f5$export$242a185dfcffac5b = $ea73536bddbd94f5$var$rotl32;
function $ea73536bddbd94f5$var$sum32(a, b) {
    return a + b >>> 0;
}
$ea73536bddbd94f5$export$58c04ae0ae31877d = $ea73536bddbd94f5$var$sum32;
function $ea73536bddbd94f5$var$sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
$ea73536bddbd94f5$export$d058ca695f8c6f11 = $ea73536bddbd94f5$var$sum32_3;
function $ea73536bddbd94f5$var$sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
$ea73536bddbd94f5$export$a1efd7fc3e986367 = $ea73536bddbd94f5$var$sum32_4;
function $ea73536bddbd94f5$var$sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
$ea73536bddbd94f5$export$bbfea4a2b5abaab4 = $ea73536bddbd94f5$var$sum32_5;
function $ea73536bddbd94f5$var$sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
$ea73536bddbd94f5$export$97ad4afc7de86152 = $ea73536bddbd94f5$var$sum64;
function $ea73536bddbd94f5$var$sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
$ea73536bddbd94f5$export$ce4673d9a79f6a4b = $ea73536bddbd94f5$var$sum64_hi;
function $ea73536bddbd94f5$var$sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
$ea73536bddbd94f5$export$786cc99fc6eedc0b = $ea73536bddbd94f5$var$sum64_lo;
function $ea73536bddbd94f5$var$sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
$ea73536bddbd94f5$export$45c59b9a1848dd0 = $ea73536bddbd94f5$var$sum64_4_hi;
function $ea73536bddbd94f5$var$sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
$ea73536bddbd94f5$export$50d8f613e76d3034 = $ea73536bddbd94f5$var$sum64_4_lo;
function $ea73536bddbd94f5$var$sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
$ea73536bddbd94f5$export$b8e83683c60ee162 = $ea73536bddbd94f5$var$sum64_5_hi;
function $ea73536bddbd94f5$var$sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
$ea73536bddbd94f5$export$aeeb51790d1bcc4a = $ea73536bddbd94f5$var$sum64_5_lo;
function $ea73536bddbd94f5$var$rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
}
$ea73536bddbd94f5$export$bb7c616f719ad9c = $ea73536bddbd94f5$var$rotr64_hi;
function $ea73536bddbd94f5$var$rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
$ea73536bddbd94f5$export$4d63290824f9d7df = $ea73536bddbd94f5$var$rotr64_lo;
function $ea73536bddbd94f5$var$shr64_hi(ah, al, num) {
    return ah >>> num;
}
$ea73536bddbd94f5$export$2f64ceb90ef28ea1 = $ea73536bddbd94f5$var$shr64_hi;
function $ea73536bddbd94f5$var$shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
$ea73536bddbd94f5$export$8d2089d465f6d10d = $ea73536bddbd94f5$var$shr64_lo;

});

parcelRequire.register("2FEB1", function(module, exports) {

$parcel$export(module.exports, "BlockHash", function () { return $1f1ee6a1bf62e02c$export$8687658379b577e6; }, function (v) { return $1f1ee6a1bf62e02c$export$8687658379b577e6 = v; });
var $1f1ee6a1bf62e02c$export$8687658379b577e6;
'use strict';

var $k7YpQ = parcelRequire("k7YpQ");

var $hB7g9 = parcelRequire("hB7g9");
function $1f1ee6a1bf62e02c$var$BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
$1f1ee6a1bf62e02c$export$8687658379b577e6 = $1f1ee6a1bf62e02c$var$BlockHash;
$1f1ee6a1bf62e02c$var$BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = $k7YpQ.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = $k7YpQ.join32(msg, 0, msg.length - r, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
$1f1ee6a1bf62e02c$var$BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    $hB7g9(this.pending === null);
    return this._digest(enc);
};
$1f1ee6a1bf62e02c$var$BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for(var i = 1; i < k; i++)res[i] = 0;
    // Append length
    len <<= 3;
    if (this.endian === 'big') {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len & 0xff;
    } else {
        res[i++] = len & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};

});

parcelRequire.register("juiZl", function(module, exports) {

$parcel$export(module.exports, "sha1", function () { return $e2ff8c63a31e14a4$export$5091bdda49ba90f5; }, function (v) { return $e2ff8c63a31e14a4$export$5091bdda49ba90f5 = v; });
$parcel$export(module.exports, "sha224", function () { return $e2ff8c63a31e14a4$export$97b70509d4e397ea; }, function (v) { return $e2ff8c63a31e14a4$export$97b70509d4e397ea = v; });
$parcel$export(module.exports, "sha256", function () { return $e2ff8c63a31e14a4$export$bced8d2aada2d1c9; }, function (v) { return $e2ff8c63a31e14a4$export$bced8d2aada2d1c9 = v; });
$parcel$export(module.exports, "sha384", function () { return $e2ff8c63a31e14a4$export$612d47d55dedde45; }, function (v) { return $e2ff8c63a31e14a4$export$612d47d55dedde45 = v; });
$parcel$export(module.exports, "sha512", function () { return $e2ff8c63a31e14a4$export$a888d2532e6dc7bb; }, function (v) { return $e2ff8c63a31e14a4$export$a888d2532e6dc7bb = v; });
var $e2ff8c63a31e14a4$export$5091bdda49ba90f5;
var $e2ff8c63a31e14a4$export$97b70509d4e397ea;
var $e2ff8c63a31e14a4$export$bced8d2aada2d1c9;
var $e2ff8c63a31e14a4$export$612d47d55dedde45;
var $e2ff8c63a31e14a4$export$a888d2532e6dc7bb;
'use strict';

$e2ff8c63a31e14a4$export$5091bdda49ba90f5 = (parcelRequire("jSupg"));

$e2ff8c63a31e14a4$export$97b70509d4e397ea = (parcelRequire("2l54S"));

$e2ff8c63a31e14a4$export$bced8d2aada2d1c9 = (parcelRequire("13b6X"));

$e2ff8c63a31e14a4$export$612d47d55dedde45 = (parcelRequire("1LTVU"));

$e2ff8c63a31e14a4$export$a888d2532e6dc7bb = (parcelRequire("74hd2"));

});
parcelRequire.register("jSupg", function(module, exports) {
'use strict';

var $k7YpQ = parcelRequire("k7YpQ");

var $2FEB1 = parcelRequire("2FEB1");

var $lT4h8 = parcelRequire("lT4h8");
var $e78aa5922c51a116$var$rotl32 = $k7YpQ.rotl32;
var $e78aa5922c51a116$var$sum32 = $k7YpQ.sum32;
var $e78aa5922c51a116$var$sum32_5 = $k7YpQ.sum32_5;
var $e78aa5922c51a116$var$ft_1 = $lT4h8.ft_1;
var $e78aa5922c51a116$var$BlockHash = $2FEB1.BlockHash;
var $e78aa5922c51a116$var$sha1_K = [
    0x5A827999,
    0x6ED9EBA1,
    0x8F1BBCDC,
    0xCA62C1D6
];
function $e78aa5922c51a116$var$SHA1() {
    if (!(this instanceof $e78aa5922c51a116$var$SHA1)) return new $e78aa5922c51a116$var$SHA1();
    $e78aa5922c51a116$var$BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.W = new Array(80);
}
$k7YpQ.inherits($e78aa5922c51a116$var$SHA1, $e78aa5922c51a116$var$BlockHash);
module.exports = $e78aa5922c51a116$var$SHA1;
$e78aa5922c51a116$var$SHA1.blockSize = 512;
$e78aa5922c51a116$var$SHA1.outSize = 160;
$e78aa5922c51a116$var$SHA1.hmacStrength = 80;
$e78aa5922c51a116$var$SHA1.padLength = 64;
$e78aa5922c51a116$var$SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = $e78aa5922c51a116$var$rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s = ~~(i / 20);
        var t = $e78aa5922c51a116$var$sum32_5($e78aa5922c51a116$var$rotl32(a, 5), $e78aa5922c51a116$var$ft_1(s, b, c, d), e, W[i], $e78aa5922c51a116$var$sha1_K[s]);
        e = d;
        d = c;
        c = $e78aa5922c51a116$var$rotl32(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = $e78aa5922c51a116$var$sum32(this.h[0], a);
    this.h[1] = $e78aa5922c51a116$var$sum32(this.h[1], b);
    this.h[2] = $e78aa5922c51a116$var$sum32(this.h[2], c);
    this.h[3] = $e78aa5922c51a116$var$sum32(this.h[3], d);
    this.h[4] = $e78aa5922c51a116$var$sum32(this.h[4], e);
};
$e78aa5922c51a116$var$SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $k7YpQ.toHex32(this.h, 'big');
    else return $k7YpQ.split32(this.h, 'big');
};

});
parcelRequire.register("lT4h8", function(module, exports) {

$parcel$export(module.exports, "ft_1", function () { return $fef20d03ba879929$export$5a92649d7ddb9f63; }, function (v) { return $fef20d03ba879929$export$5a92649d7ddb9f63 = v; });
$parcel$export(module.exports, "ch32", function () { return $fef20d03ba879929$export$c6d0d020c3a6269; }, function (v) { return $fef20d03ba879929$export$c6d0d020c3a6269 = v; });
$parcel$export(module.exports, "maj32", function () { return $fef20d03ba879929$export$eb90c27fca05f956; }, function (v) { return $fef20d03ba879929$export$eb90c27fca05f956 = v; });
$parcel$export(module.exports, "s0_256", function () { return $fef20d03ba879929$export$14a4a98e063b1999; }, function (v) { return $fef20d03ba879929$export$14a4a98e063b1999 = v; });
$parcel$export(module.exports, "s1_256", function () { return $fef20d03ba879929$export$d20cecfa1564c686; }, function (v) { return $fef20d03ba879929$export$d20cecfa1564c686 = v; });
$parcel$export(module.exports, "g0_256", function () { return $fef20d03ba879929$export$44fd472a12fc6db; }, function (v) { return $fef20d03ba879929$export$44fd472a12fc6db = v; });
$parcel$export(module.exports, "g1_256", function () { return $fef20d03ba879929$export$1ed238bb6ea1dd47; }, function (v) { return $fef20d03ba879929$export$1ed238bb6ea1dd47 = v; });
var $fef20d03ba879929$export$5a92649d7ddb9f63;
var $fef20d03ba879929$export$c6d0d020c3a6269;
var $fef20d03ba879929$export$eb90c27fca05f956;
var $fef20d03ba879929$export$cc992891a14496a1;
var $fef20d03ba879929$export$14a4a98e063b1999;
var $fef20d03ba879929$export$d20cecfa1564c686;
var $fef20d03ba879929$export$44fd472a12fc6db;
var $fef20d03ba879929$export$1ed238bb6ea1dd47;
'use strict';

var $k7YpQ = parcelRequire("k7YpQ");
var $fef20d03ba879929$var$rotr32 = $k7YpQ.rotr32;
function $fef20d03ba879929$var$ft_1(s, x, y, z) {
    if (s === 0) return $fef20d03ba879929$var$ch32(x, y, z);
    if (s === 1 || s === 3) return $fef20d03ba879929$var$p32(x, y, z);
    if (s === 2) return $fef20d03ba879929$var$maj32(x, y, z);
}
$fef20d03ba879929$export$5a92649d7ddb9f63 = $fef20d03ba879929$var$ft_1;
function $fef20d03ba879929$var$ch32(x, y, z) {
    return x & y ^ ~x & z;
}
$fef20d03ba879929$export$c6d0d020c3a6269 = $fef20d03ba879929$var$ch32;
function $fef20d03ba879929$var$maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
$fef20d03ba879929$export$eb90c27fca05f956 = $fef20d03ba879929$var$maj32;
function $fef20d03ba879929$var$p32(x, y, z) {
    return x ^ y ^ z;
}
$fef20d03ba879929$export$cc992891a14496a1 = $fef20d03ba879929$var$p32;
function $fef20d03ba879929$var$s0_256(x) {
    return $fef20d03ba879929$var$rotr32(x, 2) ^ $fef20d03ba879929$var$rotr32(x, 13) ^ $fef20d03ba879929$var$rotr32(x, 22);
}
$fef20d03ba879929$export$14a4a98e063b1999 = $fef20d03ba879929$var$s0_256;
function $fef20d03ba879929$var$s1_256(x) {
    return $fef20d03ba879929$var$rotr32(x, 6) ^ $fef20d03ba879929$var$rotr32(x, 11) ^ $fef20d03ba879929$var$rotr32(x, 25);
}
$fef20d03ba879929$export$d20cecfa1564c686 = $fef20d03ba879929$var$s1_256;
function $fef20d03ba879929$var$g0_256(x) {
    return $fef20d03ba879929$var$rotr32(x, 7) ^ $fef20d03ba879929$var$rotr32(x, 18) ^ x >>> 3;
}
$fef20d03ba879929$export$44fd472a12fc6db = $fef20d03ba879929$var$g0_256;
function $fef20d03ba879929$var$g1_256(x) {
    return $fef20d03ba879929$var$rotr32(x, 17) ^ $fef20d03ba879929$var$rotr32(x, 19) ^ x >>> 10;
}
$fef20d03ba879929$export$1ed238bb6ea1dd47 = $fef20d03ba879929$var$g1_256;

});


parcelRequire.register("2l54S", function(module, exports) {
'use strict';

var $k7YpQ = parcelRequire("k7YpQ");

var $13b6X = parcelRequire("13b6X");
function $1b417b3b5daeda11$var$SHA224() {
    if (!(this instanceof $1b417b3b5daeda11$var$SHA224)) return new $1b417b3b5daeda11$var$SHA224();
    $13b6X.call(this);
    this.h = [
        0xc1059ed8,
        0x367cd507,
        0x3070dd17,
        0xf70e5939,
        0xffc00b31,
        0x68581511,
        0x64f98fa7,
        0xbefa4fa4
    ];
}
$k7YpQ.inherits($1b417b3b5daeda11$var$SHA224, $13b6X);
module.exports = $1b417b3b5daeda11$var$SHA224;
$1b417b3b5daeda11$var$SHA224.blockSize = 512;
$1b417b3b5daeda11$var$SHA224.outSize = 224;
$1b417b3b5daeda11$var$SHA224.hmacStrength = 192;
$1b417b3b5daeda11$var$SHA224.padLength = 64;
$1b417b3b5daeda11$var$SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex') return $k7YpQ.toHex32(this.h.slice(0, 7), 'big');
    else return $k7YpQ.split32(this.h.slice(0, 7), 'big');
};

});
parcelRequire.register("13b6X", function(module, exports) {
'use strict';

var $k7YpQ = parcelRequire("k7YpQ");

var $2FEB1 = parcelRequire("2FEB1");

var $lT4h8 = parcelRequire("lT4h8");

var $hB7g9 = parcelRequire("hB7g9");
var $0c3eb0ba5217be28$var$sum32 = $k7YpQ.sum32;
var $0c3eb0ba5217be28$var$sum32_4 = $k7YpQ.sum32_4;
var $0c3eb0ba5217be28$var$sum32_5 = $k7YpQ.sum32_5;
var $0c3eb0ba5217be28$var$ch32 = $lT4h8.ch32;
var $0c3eb0ba5217be28$var$maj32 = $lT4h8.maj32;
var $0c3eb0ba5217be28$var$s0_256 = $lT4h8.s0_256;
var $0c3eb0ba5217be28$var$s1_256 = $lT4h8.s1_256;
var $0c3eb0ba5217be28$var$g0_256 = $lT4h8.g0_256;
var $0c3eb0ba5217be28$var$g1_256 = $lT4h8.g1_256;
var $0c3eb0ba5217be28$var$BlockHash = $2FEB1.BlockHash;
var $0c3eb0ba5217be28$var$sha256_K = [
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
];
function $0c3eb0ba5217be28$var$SHA256() {
    if (!(this instanceof $0c3eb0ba5217be28$var$SHA256)) return new $0c3eb0ba5217be28$var$SHA256();
    $0c3eb0ba5217be28$var$BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xbb67ae85,
        0x3c6ef372,
        0xa54ff53a,
        0x510e527f,
        0x9b05688c,
        0x1f83d9ab,
        0x5be0cd19
    ];
    this.k = $0c3eb0ba5217be28$var$sha256_K;
    this.W = new Array(64);
}
$k7YpQ.inherits($0c3eb0ba5217be28$var$SHA256, $0c3eb0ba5217be28$var$BlockHash);
module.exports = $0c3eb0ba5217be28$var$SHA256;
$0c3eb0ba5217be28$var$SHA256.blockSize = 512;
$0c3eb0ba5217be28$var$SHA256.outSize = 256;
$0c3eb0ba5217be28$var$SHA256.hmacStrength = 192;
$0c3eb0ba5217be28$var$SHA256.padLength = 64;
$0c3eb0ba5217be28$var$SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = $0c3eb0ba5217be28$var$sum32_4($0c3eb0ba5217be28$var$g1_256(W[i - 2]), W[i - 7], $0c3eb0ba5217be28$var$g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    $hB7g9(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = $0c3eb0ba5217be28$var$sum32_5(h, $0c3eb0ba5217be28$var$s1_256(e), $0c3eb0ba5217be28$var$ch32(e, f, g), this.k[i], W[i]);
        var T2 = $0c3eb0ba5217be28$var$sum32($0c3eb0ba5217be28$var$s0_256(a), $0c3eb0ba5217be28$var$maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = $0c3eb0ba5217be28$var$sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = $0c3eb0ba5217be28$var$sum32(T1, T2);
    }
    this.h[0] = $0c3eb0ba5217be28$var$sum32(this.h[0], a);
    this.h[1] = $0c3eb0ba5217be28$var$sum32(this.h[1], b);
    this.h[2] = $0c3eb0ba5217be28$var$sum32(this.h[2], c);
    this.h[3] = $0c3eb0ba5217be28$var$sum32(this.h[3], d);
    this.h[4] = $0c3eb0ba5217be28$var$sum32(this.h[4], e);
    this.h[5] = $0c3eb0ba5217be28$var$sum32(this.h[5], f);
    this.h[6] = $0c3eb0ba5217be28$var$sum32(this.h[6], g);
    this.h[7] = $0c3eb0ba5217be28$var$sum32(this.h[7], h);
};
$0c3eb0ba5217be28$var$SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $k7YpQ.toHex32(this.h, 'big');
    else return $k7YpQ.split32(this.h, 'big');
};

});


parcelRequire.register("1LTVU", function(module, exports) {
'use strict';

var $k7YpQ = parcelRequire("k7YpQ");

var $74hd2 = parcelRequire("74hd2");
function $14a59156ddbb6f20$var$SHA384() {
    if (!(this instanceof $14a59156ddbb6f20$var$SHA384)) return new $14a59156ddbb6f20$var$SHA384();
    $74hd2.call(this);
    this.h = [
        0xcbbb9d5d,
        0xc1059ed8,
        0x629a292a,
        0x367cd507,
        0x9159015a,
        0x3070dd17,
        0x152fecd8,
        0xf70e5939,
        0x67332667,
        0xffc00b31,
        0x8eb44a87,
        0x68581511,
        0xdb0c2e0d,
        0x64f98fa7,
        0x47b5481d,
        0xbefa4fa4
    ];
}
$k7YpQ.inherits($14a59156ddbb6f20$var$SHA384, $74hd2);
module.exports = $14a59156ddbb6f20$var$SHA384;
$14a59156ddbb6f20$var$SHA384.blockSize = 1024;
$14a59156ddbb6f20$var$SHA384.outSize = 384;
$14a59156ddbb6f20$var$SHA384.hmacStrength = 192;
$14a59156ddbb6f20$var$SHA384.padLength = 128;
$14a59156ddbb6f20$var$SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $k7YpQ.toHex32(this.h.slice(0, 12), 'big');
    else return $k7YpQ.split32(this.h.slice(0, 12), 'big');
};

});
parcelRequire.register("74hd2", function(module, exports) {
'use strict';

var $k7YpQ = parcelRequire("k7YpQ");

var $2FEB1 = parcelRequire("2FEB1");

var $hB7g9 = parcelRequire("hB7g9");
var $5256418bb0596321$var$rotr64_hi = $k7YpQ.rotr64_hi;
var $5256418bb0596321$var$rotr64_lo = $k7YpQ.rotr64_lo;
var $5256418bb0596321$var$shr64_hi = $k7YpQ.shr64_hi;
var $5256418bb0596321$var$shr64_lo = $k7YpQ.shr64_lo;
var $5256418bb0596321$var$sum64 = $k7YpQ.sum64;
var $5256418bb0596321$var$sum64_hi = $k7YpQ.sum64_hi;
var $5256418bb0596321$var$sum64_lo = $k7YpQ.sum64_lo;
var $5256418bb0596321$var$sum64_4_hi = $k7YpQ.sum64_4_hi;
var $5256418bb0596321$var$sum64_4_lo = $k7YpQ.sum64_4_lo;
var $5256418bb0596321$var$sum64_5_hi = $k7YpQ.sum64_5_hi;
var $5256418bb0596321$var$sum64_5_lo = $k7YpQ.sum64_5_lo;
var $5256418bb0596321$var$BlockHash = $2FEB1.BlockHash;
var $5256418bb0596321$var$sha512_K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
function $5256418bb0596321$var$SHA512() {
    if (!(this instanceof $5256418bb0596321$var$SHA512)) return new $5256418bb0596321$var$SHA512();
    $5256418bb0596321$var$BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xf3bcc908,
        0xbb67ae85,
        0x84caa73b,
        0x3c6ef372,
        0xfe94f82b,
        0xa54ff53a,
        0x5f1d36f1,
        0x510e527f,
        0xade682d1,
        0x9b05688c,
        0x2b3e6c1f,
        0x1f83d9ab,
        0xfb41bd6b,
        0x5be0cd19,
        0x137e2179
    ];
    this.k = $5256418bb0596321$var$sha512_K;
    this.W = new Array(160);
}
$k7YpQ.inherits($5256418bb0596321$var$SHA512, $5256418bb0596321$var$BlockHash);
module.exports = $5256418bb0596321$var$SHA512;
$5256418bb0596321$var$SHA512.blockSize = 1024;
$5256418bb0596321$var$SHA512.outSize = 512;
$5256418bb0596321$var$SHA512.hmacStrength = 192;
$5256418bb0596321$var$SHA512.padLength = 128;
$5256418bb0596321$var$SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    // 32 x 32bit words
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = $5256418bb0596321$var$g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = $5256418bb0596321$var$g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = $5256418bb0596321$var$g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = $5256418bb0596321$var$g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];
        W[i] = $5256418bb0596321$var$sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = $5256418bb0596321$var$sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
$5256418bb0596321$var$SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    $hB7g9(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = $5256418bb0596321$var$s1_512_hi(eh, el);
        var c1_lo = $5256418bb0596321$var$s1_512_lo(eh, el);
        var c2_hi = $5256418bb0596321$var$ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = $5256418bb0596321$var$ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = $5256418bb0596321$var$sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = $5256418bb0596321$var$sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = $5256418bb0596321$var$s0_512_hi(ah, al);
        c0_lo = $5256418bb0596321$var$s0_512_lo(ah, al);
        c1_hi = $5256418bb0596321$var$maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = $5256418bb0596321$var$maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = $5256418bb0596321$var$sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = $5256418bb0596321$var$sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = $5256418bb0596321$var$sum64_hi(dh, dl, T1_hi, T1_lo);
        el = $5256418bb0596321$var$sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = $5256418bb0596321$var$sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = $5256418bb0596321$var$sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    $5256418bb0596321$var$sum64(this.h, 0, ah, al);
    $5256418bb0596321$var$sum64(this.h, 2, bh, bl);
    $5256418bb0596321$var$sum64(this.h, 4, ch, cl);
    $5256418bb0596321$var$sum64(this.h, 6, dh, dl);
    $5256418bb0596321$var$sum64(this.h, 8, eh, el);
    $5256418bb0596321$var$sum64(this.h, 10, fh, fl);
    $5256418bb0596321$var$sum64(this.h, 12, gh, gl);
    $5256418bb0596321$var$sum64(this.h, 14, hh, hl);
};
$5256418bb0596321$var$SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $k7YpQ.toHex32(this.h, 'big');
    else return $k7YpQ.split32(this.h, 'big');
};
function $5256418bb0596321$var$ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function $5256418bb0596321$var$ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function $5256418bb0596321$var$maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function $5256418bb0596321$var$maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function $5256418bb0596321$var$s0_512_hi(xh, xl) {
    var c0_hi = $5256418bb0596321$var$rotr64_hi(xh, xl, 28);
    var c1_hi = $5256418bb0596321$var$rotr64_hi(xl, xh, 2); // 34
    var c2_hi = $5256418bb0596321$var$rotr64_hi(xl, xh, 7); // 39
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $5256418bb0596321$var$s0_512_lo(xh, xl) {
    var c0_lo = $5256418bb0596321$var$rotr64_lo(xh, xl, 28);
    var c1_lo = $5256418bb0596321$var$rotr64_lo(xl, xh, 2); // 34
    var c2_lo = $5256418bb0596321$var$rotr64_lo(xl, xh, 7); // 39
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function $5256418bb0596321$var$s1_512_hi(xh, xl) {
    var c0_hi = $5256418bb0596321$var$rotr64_hi(xh, xl, 14);
    var c1_hi = $5256418bb0596321$var$rotr64_hi(xh, xl, 18);
    var c2_hi = $5256418bb0596321$var$rotr64_hi(xl, xh, 9); // 41
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $5256418bb0596321$var$s1_512_lo(xh, xl) {
    var c0_lo = $5256418bb0596321$var$rotr64_lo(xh, xl, 14);
    var c1_lo = $5256418bb0596321$var$rotr64_lo(xh, xl, 18);
    var c2_lo = $5256418bb0596321$var$rotr64_lo(xl, xh, 9); // 41
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function $5256418bb0596321$var$g0_512_hi(xh, xl) {
    var c0_hi = $5256418bb0596321$var$rotr64_hi(xh, xl, 1);
    var c1_hi = $5256418bb0596321$var$rotr64_hi(xh, xl, 8);
    var c2_hi = $5256418bb0596321$var$shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $5256418bb0596321$var$g0_512_lo(xh, xl) {
    var c0_lo = $5256418bb0596321$var$rotr64_lo(xh, xl, 1);
    var c1_lo = $5256418bb0596321$var$rotr64_lo(xh, xl, 8);
    var c2_lo = $5256418bb0596321$var$shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function $5256418bb0596321$var$g1_512_hi(xh, xl) {
    var c0_hi = $5256418bb0596321$var$rotr64_hi(xh, xl, 19);
    var c1_hi = $5256418bb0596321$var$rotr64_hi(xl, xh, 29); // 61
    var c2_hi = $5256418bb0596321$var$shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $5256418bb0596321$var$g1_512_lo(xh, xl) {
    var c0_lo = $5256418bb0596321$var$rotr64_lo(xh, xl, 19);
    var c1_lo = $5256418bb0596321$var$rotr64_lo(xl, xh, 29); // 61
    var c2_lo = $5256418bb0596321$var$shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}

});



parcelRequire.register("dZgMj", function(module, exports) {

$parcel$export(module.exports, "ripemd160", function () { return $a2edfcab2011ca51$export$d1cea0ee4e3f0d3e; }, function (v) { return $a2edfcab2011ca51$export$d1cea0ee4e3f0d3e = v; });
var $a2edfcab2011ca51$export$d1cea0ee4e3f0d3e;
'use strict';

var $k7YpQ = parcelRequire("k7YpQ");

var $2FEB1 = parcelRequire("2FEB1");
var $a2edfcab2011ca51$var$rotl32 = $k7YpQ.rotl32;
var $a2edfcab2011ca51$var$sum32 = $k7YpQ.sum32;
var $a2edfcab2011ca51$var$sum32_3 = $k7YpQ.sum32_3;
var $a2edfcab2011ca51$var$sum32_4 = $k7YpQ.sum32_4;
var $a2edfcab2011ca51$var$BlockHash = $2FEB1.BlockHash;
function $a2edfcab2011ca51$var$RIPEMD160() {
    if (!(this instanceof $a2edfcab2011ca51$var$RIPEMD160)) return new $a2edfcab2011ca51$var$RIPEMD160();
    $a2edfcab2011ca51$var$BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.endian = 'little';
}
$k7YpQ.inherits($a2edfcab2011ca51$var$RIPEMD160, $a2edfcab2011ca51$var$BlockHash);
$a2edfcab2011ca51$export$d1cea0ee4e3f0d3e = $a2edfcab2011ca51$var$RIPEMD160;
$a2edfcab2011ca51$var$RIPEMD160.blockSize = 512;
$a2edfcab2011ca51$var$RIPEMD160.outSize = 160;
$a2edfcab2011ca51$var$RIPEMD160.hmacStrength = 192;
$a2edfcab2011ca51$var$RIPEMD160.padLength = 64;
$a2edfcab2011ca51$var$RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = $a2edfcab2011ca51$var$sum32($a2edfcab2011ca51$var$rotl32($a2edfcab2011ca51$var$sum32_4(A, $a2edfcab2011ca51$var$f(j, B, C, D), msg[$a2edfcab2011ca51$var$r[j] + start], $a2edfcab2011ca51$var$K(j)), $a2edfcab2011ca51$var$s[j]), E);
        A = E;
        E = D;
        D = $a2edfcab2011ca51$var$rotl32(C, 10);
        C = B;
        B = T;
        T = $a2edfcab2011ca51$var$sum32($a2edfcab2011ca51$var$rotl32($a2edfcab2011ca51$var$sum32_4(Ah, $a2edfcab2011ca51$var$f(79 - j, Bh, Ch, Dh), msg[$a2edfcab2011ca51$var$rh[j] + start], $a2edfcab2011ca51$var$Kh(j)), $a2edfcab2011ca51$var$sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = $a2edfcab2011ca51$var$rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = $a2edfcab2011ca51$var$sum32_3(this.h[1], C, Dh);
    this.h[1] = $a2edfcab2011ca51$var$sum32_3(this.h[2], D, Eh);
    this.h[2] = $a2edfcab2011ca51$var$sum32_3(this.h[3], E, Ah);
    this.h[3] = $a2edfcab2011ca51$var$sum32_3(this.h[4], A, Bh);
    this.h[4] = $a2edfcab2011ca51$var$sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};
$a2edfcab2011ca51$var$RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $k7YpQ.toHex32(this.h, 'little');
    else return $k7YpQ.split32(this.h, 'little');
};
function $a2edfcab2011ca51$var$f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function $a2edfcab2011ca51$var$K(j) {
    if (j <= 15) return 0x00000000;
    else if (j <= 31) return 0x5a827999;
    else if (j <= 47) return 0x6ed9eba1;
    else if (j <= 63) return 0x8f1bbcdc;
    else return 0xa953fd4e;
}
function $a2edfcab2011ca51$var$Kh(j) {
    if (j <= 15) return 0x50a28be6;
    else if (j <= 31) return 0x5c4dd124;
    else if (j <= 47) return 0x6d703ef3;
    else if (j <= 63) return 0x7a6d76e9;
    else return 0x00000000;
}
var $a2edfcab2011ca51$var$r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var $a2edfcab2011ca51$var$rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var $a2edfcab2011ca51$var$s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var $a2edfcab2011ca51$var$sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];

});

parcelRequire.register("1V7zw", function(module, exports) {
'use strict';

var $k7YpQ = parcelRequire("k7YpQ");

var $hB7g9 = parcelRequire("hB7g9");
function $1660fcf854aa588e$var$Hmac(hash, key, enc) {
    if (!(this instanceof $1660fcf854aa588e$var$Hmac)) return new $1660fcf854aa588e$var$Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init($k7YpQ.toArray(key, enc));
}
module.exports = $1660fcf854aa588e$var$Hmac;
$1660fcf854aa588e$var$Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    $hB7g9(key.length <= this.blockSize);
    // Add padding to key
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);
    // 0x36 ^ 0x5c = 0x6a
    for(i = 0; i < key.length; i++)key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
};
$1660fcf854aa588e$var$Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
$1660fcf854aa588e$var$Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

});


parcelRequire.register("3rsAS", function(module, exports) {
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821', 
            ],
            [
                '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf', 
            ],
            [
                '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695', 
            ],
            [
                '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9', 
            ],
            [
                '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36', 
            ],
            [
                '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f', 
            ],
            [
                'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999', 
            ],
            [
                '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09', 
            ],
            [
                'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d', 
            ],
            [
                'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088', 
            ],
            [
                'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d', 
            ],
            [
                '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8', 
            ],
            [
                '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a', 
            ],
            [
                '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453', 
            ],
            [
                '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160', 
            ],
            [
                '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0', 
            ],
            [
                '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6', 
            ],
            [
                '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589', 
            ],
            [
                '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17', 
            ],
            [
                'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda', 
            ],
            [
                'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd', 
            ],
            [
                '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2', 
            ],
            [
                '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6', 
            ],
            [
                'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f', 
            ],
            [
                '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01', 
            ],
            [
                'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3', 
            ],
            [
                'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f', 
            ],
            [
                'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7', 
            ],
            [
                'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78', 
            ],
            [
                'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1', 
            ],
            [
                '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150', 
            ],
            [
                '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82', 
            ],
            [
                'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc', 
            ],
            [
                '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b', 
            ],
            [
                'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51', 
            ],
            [
                'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45', 
            ],
            [
                'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120', 
            ],
            [
                '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84', 
            ],
            [
                '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d', 
            ],
            [
                '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d', 
            ],
            [
                '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8', 
            ],
            [
                'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8', 
            ],
            [
                '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac', 
            ],
            [
                '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f', 
            ],
            [
                '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962', 
            ],
            [
                'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907', 
            ],
            [
                '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec', 
            ],
            [
                'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d', 
            ],
            [
                'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414', 
            ],
            [
                '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd', 
            ],
            [
                '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0', 
            ],
            [
                'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811', 
            ],
            [
                'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1', 
            ],
            [
                'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c', 
            ],
            [
                '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73', 
            ],
            [
                '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd', 
            ],
            [
                'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405', 
            ],
            [
                '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589', 
            ],
            [
                '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e', 
            ],
            [
                '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27', 
            ],
            [
                'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1', 
            ],
            [
                '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482', 
            ],
            [
                '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945', 
            ],
            [
                'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573', 
            ],
            [
                'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82', 
            ], 
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672', 
            ],
            [
                '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6', 
            ],
            [
                '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da', 
            ],
            [
                'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37', 
            ],
            [
                '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b', 
            ],
            [
                'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81', 
            ],
            [
                'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58', 
            ],
            [
                'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77', 
            ],
            [
                '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a', 
            ],
            [
                '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c', 
            ],
            [
                '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67', 
            ],
            [
                '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402', 
            ],
            [
                'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55', 
            ],
            [
                'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482', 
            ],
            [
                '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82', 
            ],
            [
                '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396', 
            ],
            [
                '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49', 
            ],
            [
                '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf', 
            ],
            [
                '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a', 
            ],
            [
                '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7', 
            ],
            [
                'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933', 
            ],
            [
                '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a', 
            ],
            [
                '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6', 
            ],
            [
                'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37', 
            ],
            [
                '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e', 
            ],
            [
                'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6', 
            ],
            [
                'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476', 
            ],
            [
                '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40', 
            ],
            [
                '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61', 
            ],
            [
                '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683', 
            ],
            [
                'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5', 
            ],
            [
                '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b', 
            ],
            [
                'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417', 
            ],
            [
                '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868', 
            ],
            [
                '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a', 
            ],
            [
                'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6', 
            ],
            [
                '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996', 
            ],
            [
                '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e', 
            ],
            [
                'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d', 
            ],
            [
                '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2', 
            ],
            [
                '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e', 
            ],
            [
                '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437', 
            ],
            [
                '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311', 
            ],
            [
                'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4', 
            ],
            [
                '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575', 
            ],
            [
                '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d', 
            ],
            [
                '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d', 
            ],
            [
                'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629', 
            ],
            [
                'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06', 
            ],
            [
                '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374', 
            ],
            [
                '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee', 
            ],
            [
                'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1', 
            ],
            [
                'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b', 
            ],
            [
                '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661', 
            ],
            [
                '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6', 
            ],
            [
                'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e', 
            ],
            [
                '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d', 
            ],
            [
                'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc', 
            ],
            [
                '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4', 
            ],
            [
                '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c', 
            ],
            [
                'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b', 
            ],
            [
                'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913', 
            ],
            [
                '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154', 
            ],
            [
                '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865', 
            ],
            [
                '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc', 
            ],
            [
                '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224', 
            ],
            [
                '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e', 
            ],
            [
                '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6', 
            ],
            [
                '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511', 
            ],
            [
                '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b', 
            ],
            [
                'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2', 
            ],
            [
                '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c', 
            ],
            [
                'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3', 
            ],
            [
                'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d', 
            ],
            [
                'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700', 
            ],
            [
                'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4', 
            ],
            [
                '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196', 
            ],
            [
                '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4', 
            ],
            [
                '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257', 
            ],
            [
                'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13', 
            ],
            [
                'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096', 
            ],
            [
                'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38', 
            ],
            [
                'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f', 
            ],
            [
                '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448', 
            ],
            [
                'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a', 
            ],
            [
                'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4', 
            ],
            [
                '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437', 
            ],
            [
                '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7', 
            ],
            [
                'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d', 
            ],
            [
                'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a', 
            ],
            [
                'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54', 
            ],
            [
                '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77', 
            ],
            [
                'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517', 
            ],
            [
                '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10', 
            ],
            [
                'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125', 
            ],
            [
                'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e', 
            ],
            [
                '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1', 
            ],
            [
                'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2', 
            ],
            [
                'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423', 
            ],
            [
                'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8', 
            ],
            [
                '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758', 
            ],
            [
                '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375', 
            ],
            [
                'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d', 
            ],
            [
                '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec', 
            ],
            [
                '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0', 
            ],
            [
                '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c', 
            ],
            [
                'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4', 
            ],
            [
                '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f', 
            ],
            [
                '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649', 
            ],
            [
                '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826', 
            ],
            [
                '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5', 
            ],
            [
                'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87', 
            ],
            [
                '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b', 
            ],
            [
                'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc', 
            ],
            [
                '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c', 
            ],
            [
                'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f', 
            ],
            [
                'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a', 
            ],
            [
                'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46', 
            ],
            [
                '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f', 
            ],
            [
                '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03', 
            ],
            [
                '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08', 
            ],
            [
                '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8', 
            ],
            [
                '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373', 
            ],
            [
                '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3', 
            ],
            [
                '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8', 
            ],
            [
                '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1', 
            ],
            [
                '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9', 
            ], 
        ]
    }
};

});


parcelRequire.register("9HwJB", function(module, exports) {
'use strict';

var $ek2tU = parcelRequire("ek2tU");

var $fDKZ9 = parcelRequire("fDKZ9");

var $2AxbO = parcelRequire("2AxbO");

var $6gmdc = parcelRequire("6gmdc");

var $3cL3l = parcelRequire("3cL3l");
var $710185967f501ac4$var$assert = $2AxbO.assert;

var $49wAI = parcelRequire("49wAI");

var $55TG5 = parcelRequire("55TG5");
function $710185967f501ac4$var$EC(options) {
    if (!(this instanceof $710185967f501ac4$var$EC)) return new $710185967f501ac4$var$EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
        $710185967f501ac4$var$assert(Object.prototype.hasOwnProperty.call($6gmdc, options), 'Unknown curve ' + options);
        options = $6gmdc[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof $6gmdc.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = $710185967f501ac4$var$EC;
$710185967f501ac4$var$EC.prototype.keyPair = function keyPair(options) {
    return new $49wAI(this, options);
};
$710185967f501ac4$var$EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return $49wAI.fromPrivate(this, priv, enc);
};
$710185967f501ac4$var$EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return $49wAI.fromPublic(this, pub, enc);
};
$710185967f501ac4$var$EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {};
    // Instantiate Hmac_DRBG
    var drbg = new $fDKZ9({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || $3cL3l(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new $ek2tU(2));
    for(;;){
        var priv = new $ek2tU(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
$710185967f501ac4$var$EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
$710185967f501ac4$var$EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
        options = enc;
        enc = null;
    }
    if (!options) options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new $ek2tU(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);
    // Instantiate Hmac_DRBG
    var drbg = new $fDKZ9({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8'
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new $ek2tU(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new $ek2tU(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new $55TG5({
            r: r,
            s: s,
            recoveryParam: recoveryParam
        });
    }
};
$710185967f501ac4$var$EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new $ek2tU(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new $55TG5(signature, 'hex');
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
$710185967f501ac4$var$EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    $710185967f501ac4$var$assert((3 & j) === j, 'The recovery param is more than two bits');
    signature = new $55TG5(signature, enc);
    var n = this.n;
    var e = new $ek2tU(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate');
    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
$710185967f501ac4$var$EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new $55TG5(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error('Unable to find valid recovery factor');
};

});
parcelRequire.register("fDKZ9", function(module, exports) {
'use strict';

var $4B2gP = parcelRequire("4B2gP");

var $kHTF4 = parcelRequire("kHTF4");

var $hB7g9 = parcelRequire("hB7g9");
function $b62ef1d0634df297$var$HmacDRBG(options) {
    if (!(this instanceof $b62ef1d0634df297$var$HmacDRBG)) return new $b62ef1d0634df297$var$HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = $kHTF4.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = $kHTF4.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = $kHTF4.toArray(options.pers, options.persEnc || 'hex');
    $hB7g9(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
}
module.exports = $b62ef1d0634df297$var$HmacDRBG;
$b62ef1d0634df297$var$HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0x00;
        this.V[i] = 0x01;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000; // 2^48
};
$b62ef1d0634df297$var$HmacDRBG.prototype._hmac = function hmac() {
    return new $4B2gP.hmac(this.hash, this.K);
};
$b62ef1d0634df297$var$HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0x00
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        0x01
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
$b62ef1d0634df297$var$HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    entropy = $kHTF4.toArray(entropy, entropyEnc);
    add = $kHTF4.toArray(add, addEnc);
    $hB7g9(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
$b62ef1d0634df297$var$HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error('Reseed is required');
    // Optional encoding
    if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = $kHTF4.toArray(add, addEnc || 'hex');
        this._update(add);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return $kHTF4.encode(res, enc);
};

});

parcelRequire.register("49wAI", function(module, exports) {
'use strict';

var $ek2tU = parcelRequire("ek2tU");

var $2AxbO = parcelRequire("2AxbO");
var $306148a4324f5dc6$var$assert = $2AxbO.assert;
function $306148a4324f5dc6$var$KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = $306148a4324f5dc6$var$KeyPair;
$306148a4324f5dc6$var$KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof $306148a4324f5dc6$var$KeyPair) return pub;
    return new $306148a4324f5dc6$var$KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
$306148a4324f5dc6$var$KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof $306148a4324f5dc6$var$KeyPair) return priv;
    return new $306148a4324f5dc6$var$KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
$306148a4324f5dc6$var$KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: 'Invalid public key'
    };
    if (!pub.validate()) return {
        result: false,
        reason: 'Public key is not a point'
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: 'Public key * N != O'
    };
    return {
        result: true,
        reason: null
    };
};
$306148a4324f5dc6$var$KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
$306148a4324f5dc6$var$KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex') return this.priv.toString(16, 2);
    else return this.priv;
};
$306148a4324f5dc6$var$KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new $ek2tU(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
$306148a4324f5dc6$var$KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') $306148a4324f5dc6$var$assert(key.x, 'Need x coordinate');
        else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') $306148a4324f5dc6$var$assert(key.x && key.y, 'Need both x and y coordinate');
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
$306148a4324f5dc6$var$KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) $306148a4324f5dc6$var$assert(pub.validate(), 'public point not validated');
    return pub.mul(this.priv).getX();
};
// ECDSA
$306148a4324f5dc6$var$KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
$306148a4324f5dc6$var$KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};
$306148a4324f5dc6$var$KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

});

parcelRequire.register("55TG5", function(module, exports) {
'use strict';

var $ek2tU = parcelRequire("ek2tU");

var $2AxbO = parcelRequire("2AxbO");
var $3b589bd457085f1c$var$assert = $2AxbO.assert;
function $3b589bd457085f1c$var$Signature(options, enc) {
    if (options instanceof $3b589bd457085f1c$var$Signature) return options;
    if (this._importDER(options, enc)) return;
    $3b589bd457085f1c$var$assert(options.r && options.s, 'Signature without r or s');
    this.r = new $ek2tU(options.r, 16);
    this.s = new $ek2tU(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
module.exports = $3b589bd457085f1c$var$Signature;
function $3b589bd457085f1c$var$Position() {
    this.place = 0;
}
function $3b589bd457085f1c$var$getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) return initial;
    var octetLen = initial & 0xf;
    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) return false;
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    // Leading zeroes
    if (val <= 0x7f) return false;
    p.place = off;
    return val;
}
function $3b589bd457085f1c$var$rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len)i++;
    if (i === 0) return buf;
    return buf.slice(i);
}
$3b589bd457085f1c$var$Signature.prototype._importDER = function _importDER(data, enc) {
    data = $2AxbO.toArray(data, enc);
    var p = new $3b589bd457085f1c$var$Position();
    if (data[p.place++] !== 0x30) return false;
    var len = $3b589bd457085f1c$var$getLength(data, p);
    if (len === false) return false;
    if (len + p.place !== data.length) return false;
    if (data[p.place++] !== 0x02) return false;
    var rlen = $3b589bd457085f1c$var$getLength(data, p);
    if (rlen === false) return false;
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) return false;
    var slen = $3b589bd457085f1c$var$getLength(data, p);
    if (slen === false) return false;
    if (data.length !== slen + p.place) return false;
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 0x80) r = r.slice(1);
        else // Leading zeroes
        return false;
    }
    if (s[0] === 0) {
        if (s[1] & 0x80) s = s.slice(1);
        else // Leading zeroes
        return false;
    }
    this.r = new $ek2tU(r);
    this.s = new $ek2tU(s);
    this.recoveryParam = null;
    return true;
};
function $3b589bd457085f1c$var$constructLength(arr, len) {
    if (len < 0x80) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while(--octets)arr.push(len >>> (octets << 3) & 0xff);
    arr.push(len);
}
$3b589bd457085f1c$var$Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    // Pad values
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    r = $3b589bd457085f1c$var$rmPadding(r);
    s = $3b589bd457085f1c$var$rmPadding(s);
    while(!s[0] && !(s[1] & 0x80))s = s.slice(1);
    var arr = [
        0x02
    ];
    $3b589bd457085f1c$var$constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    $3b589bd457085f1c$var$constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        0x30
    ];
    $3b589bd457085f1c$var$constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return $2AxbO.encode(res, enc);
};

});


parcelRequire.register("kAZxC", function(module, exports) {
'use strict';

var $4B2gP = parcelRequire("4B2gP");

var $6gmdc = parcelRequire("6gmdc");

var $2AxbO = parcelRequire("2AxbO");
var $efe6e83f1e0e776d$var$assert = $2AxbO.assert;
var $efe6e83f1e0e776d$var$parseBytes = $2AxbO.parseBytes;

var $laGqP = parcelRequire("laGqP");

var $5JJCl = parcelRequire("5JJCl");
function $efe6e83f1e0e776d$var$EDDSA(curve) {
    $efe6e83f1e0e776d$var$assert(curve === 'ed25519', 'only tested with ed25519 so far');
    if (!(this instanceof $efe6e83f1e0e776d$var$EDDSA)) return new $efe6e83f1e0e776d$var$EDDSA(curve);
    curve = $6gmdc[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = $4B2gP.sha512;
}
module.exports = $efe6e83f1e0e776d$var$EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/ $efe6e83f1e0e776d$var$EDDSA.prototype.sign = function sign(message, secret) {
    message = $efe6e83f1e0e776d$var$parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
    });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/ $efe6e83f1e0e776d$var$EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = $efe6e83f1e0e776d$var$parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
$efe6e83f1e0e776d$var$EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for(var i = 0; i < arguments.length; i++)hash.update(arguments[i]);
    return $2AxbO.intFromLE(hash.digest()).umod(this.curve.n);
};
$efe6e83f1e0e776d$var$EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return $laGqP.fromPublic(this, pub);
};
$efe6e83f1e0e776d$var$EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return $laGqP.fromSecret(this, secret);
};
$efe6e83f1e0e776d$var$EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof $5JJCl) return sig;
    return new $5JJCl(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/ $efe6e83f1e0e776d$var$EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
};
$efe6e83f1e0e776d$var$EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = $2AxbO.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
    var y = $2AxbO.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
$efe6e83f1e0e776d$var$EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
};
$efe6e83f1e0e776d$var$EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return $2AxbO.intFromLE(bytes);
};
$efe6e83f1e0e776d$var$EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

});
parcelRequire.register("laGqP", function(module, exports) {
'use strict';

var $2AxbO = parcelRequire("2AxbO");
var $f69b7234ba40ed46$var$assert = $2AxbO.assert;
var $f69b7234ba40ed46$var$parseBytes = $2AxbO.parseBytes;
var $f69b7234ba40ed46$var$cachedProperty = $2AxbO.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/ function $f69b7234ba40ed46$var$KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = $f69b7234ba40ed46$var$parseBytes(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
    else this._pubBytes = $f69b7234ba40ed46$var$parseBytes(params.pub);
}
$f69b7234ba40ed46$var$KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof $f69b7234ba40ed46$var$KeyPair) return pub;
    return new $f69b7234ba40ed46$var$KeyPair(eddsa, {
        pub: pub
    });
};
$f69b7234ba40ed46$var$KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof $f69b7234ba40ed46$var$KeyPair) return secret;
    return new $f69b7234ba40ed46$var$KeyPair(eddsa, {
        secret: secret
    });
};
$f69b7234ba40ed46$var$KeyPair.prototype.secret = function secret() {
    return this._secret;
};
$f69b7234ba40ed46$var$cachedProperty($f69b7234ba40ed46$var$KeyPair, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
$f69b7234ba40ed46$var$cachedProperty($f69b7234ba40ed46$var$KeyPair, 'pub', function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
$f69b7234ba40ed46$var$cachedProperty($f69b7234ba40ed46$var$KeyPair, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
$f69b7234ba40ed46$var$cachedProperty($f69b7234ba40ed46$var$KeyPair, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
$f69b7234ba40ed46$var$cachedProperty($f69b7234ba40ed46$var$KeyPair, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
$f69b7234ba40ed46$var$cachedProperty($f69b7234ba40ed46$var$KeyPair, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
$f69b7234ba40ed46$var$KeyPair.prototype.sign = function sign(message) {
    $f69b7234ba40ed46$var$assert(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
};
$f69b7234ba40ed46$var$KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
$f69b7234ba40ed46$var$KeyPair.prototype.getSecret = function getSecret(enc) {
    $f69b7234ba40ed46$var$assert(this._secret, 'KeyPair is public only');
    return $2AxbO.encode(this.secret(), enc);
};
$f69b7234ba40ed46$var$KeyPair.prototype.getPublic = function getPublic(enc) {
    return $2AxbO.encode(this.pubBytes(), enc);
};
module.exports = $f69b7234ba40ed46$var$KeyPair;

});

parcelRequire.register("5JJCl", function(module, exports) {
'use strict';

var $ek2tU = parcelRequire("ek2tU");

var $2AxbO = parcelRequire("2AxbO");
var $42d48a640ca75803$var$assert = $2AxbO.assert;
var $42d48a640ca75803$var$cachedProperty = $2AxbO.cachedProperty;
var $42d48a640ca75803$var$parseBytes = $2AxbO.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/ function $42d48a640ca75803$var$Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== 'object') sig = $42d48a640ca75803$var$parseBytes(sig);
    if (Array.isArray(sig)) sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
    };
    $42d48a640ca75803$var$assert(sig.R && sig.S, 'Signature without R or S');
    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof $ek2tU) this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
$42d48a640ca75803$var$cachedProperty($42d48a640ca75803$var$Signature, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
$42d48a640ca75803$var$cachedProperty($42d48a640ca75803$var$Signature, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
$42d48a640ca75803$var$cachedProperty($42d48a640ca75803$var$Signature, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
$42d48a640ca75803$var$cachedProperty($42d48a640ca75803$var$Signature, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
$42d48a640ca75803$var$Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
$42d48a640ca75803$var$Signature.prototype.toHex = function toHex() {
    return $2AxbO.encode(this.toBytes(), 'hex').toUpperCase();
};
module.exports = $42d48a640ca75803$var$Signature;

});



parcelRequire.register("7W4xt", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function TempCtor() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("ksweO")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, 'Invalid character in ' + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 0xa;
            else if (c >= 17) b = c - 17 + 0xa;
            else b = c;
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') try {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e1) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 0xff;
            if (position < res.length) res[position++] = word >> 8 & 0xff;
            if (position < res.length) res[position++] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 0xff;
            if (position >= 0) res[position--] = word >> 8 & 0xff;
            if (position >= 0) res[position--] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 0x01;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("c1Cul", function(module, exports) {

var $7JVY9 = parcelRequire("7JVY9");

var $fhSMH = parcelRequire("fhSMH");

var $3n1O4 = parcelRequire("3n1O4");

var $2OZGO = parcelRequire("2OZGO");

var $fFjQO = parcelRequire("fFjQO");

var $6DGcH = parcelRequire("6DGcH");
var $8c136f08aac40bf9$require$Buffer = $6DGcH.Buffer;
module.exports = $8c136f08aac40bf9$var$parseKeys;
function $8c136f08aac40bf9$var$parseKeys(buffer) {
    var password;
    if (typeof buffer === 'object' && !$8c136f08aac40bf9$require$Buffer.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
    }
    if (typeof buffer === 'string') buffer = $8c136f08aac40bf9$require$Buffer.from(buffer);
    var stripped = $3n1O4(buffer, password);
    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch(type){
        case 'CERTIFICATE':
            ndata = $7JVY9.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
        // falls through
        case 'PUBLIC KEY':
            if (!ndata) ndata = $7JVY9.PublicKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return $7JVY9.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
                case '1.2.840.10045.2.1':
                    ndata.subjectPrivateKey = ndata.subjectPublicKey;
                    return {
                        type: 'ec',
                        data: ndata
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.pub_key = $7JVY9.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
                    return {
                        type: 'dsa',
                        data: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'ENCRYPTED PRIVATE KEY':
            data = $7JVY9.EncryptedPrivateKey.decode(data, 'der');
            data = $8c136f08aac40bf9$var$decrypt(data, password);
        // falls through
        case 'PRIVATE KEY':
            ndata = $7JVY9.PrivateKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return $7JVY9.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
                case '1.2.840.10045.2.1':
                    return {
                        curve: ndata.algorithm.curve,
                        privateKey: $7JVY9.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.priv_key = $7JVY9.DSAparam.decode(ndata.subjectPrivateKey, 'der');
                    return {
                        type: 'dsa',
                        params: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'RSA PUBLIC KEY':
            return $7JVY9.RSAPublicKey.decode(data, 'der');
        case 'RSA PRIVATE KEY':
            return $7JVY9.RSAPrivateKey.decode(data, 'der');
        case 'DSA PRIVATE KEY':
            return {
                type: 'dsa',
                params: $7JVY9.DSAPrivateKey.decode(data, 'der')
            };
        case 'EC PRIVATE KEY':
            data = $7JVY9.ECPrivateKey.decode(data, 'der');
            return {
                curve: data.parameters.value,
                privateKey: data.privateKey
            };
        default:
            throw new Error('unknown key type ' + type);
    }
}
$8c136f08aac40bf9$var$parseKeys.signature = $7JVY9.signature;
function $8c136f08aac40bf9$var$decrypt(data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = $fhSMH[data.algorithm.decrypt.cipher.algo.join('.')];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split('-')[1], 10) / 8;
    var key = $fFjQO.pbkdf2Sync(password, salt, iters, keylen, 'sha1');
    var cipher = $2OZGO.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    return $8c136f08aac40bf9$require$Buffer.concat(out);
}

});
parcelRequire.register("7JVY9", function(module, exports) {

$parcel$export(module.exports, "certificate", function () { return $5a29b3da10ab63cd$export$c98397a6eb8d0678; }, function (v) { return $5a29b3da10ab63cd$export$c98397a6eb8d0678 = v; });
$parcel$export(module.exports, "RSAPrivateKey", function () { return $5a29b3da10ab63cd$export$f4aab6816f64fa6b; }, function (v) { return $5a29b3da10ab63cd$export$f4aab6816f64fa6b = v; });
$parcel$export(module.exports, "RSAPublicKey", function () { return $5a29b3da10ab63cd$export$4471f5c65d097c11; }, function (v) { return $5a29b3da10ab63cd$export$4471f5c65d097c11 = v; });
$parcel$export(module.exports, "PublicKey", function () { return $5a29b3da10ab63cd$export$ca8b6604d6ce14de; }, function (v) { return $5a29b3da10ab63cd$export$ca8b6604d6ce14de = v; });
$parcel$export(module.exports, "PrivateKey", function () { return $5a29b3da10ab63cd$export$8f54525b330fd87b; }, function (v) { return $5a29b3da10ab63cd$export$8f54525b330fd87b = v; });
$parcel$export(module.exports, "EncryptedPrivateKey", function () { return $5a29b3da10ab63cd$export$23cd2842b44ca3e7; }, function (v) { return $5a29b3da10ab63cd$export$23cd2842b44ca3e7 = v; });
$parcel$export(module.exports, "DSAPrivateKey", function () { return $5a29b3da10ab63cd$export$245c9aaa9f5ce4ce; }, function (v) { return $5a29b3da10ab63cd$export$245c9aaa9f5ce4ce = v; });
$parcel$export(module.exports, "DSAparam", function () { return $5a29b3da10ab63cd$export$8ad762e3e6399afe; }, function (v) { return $5a29b3da10ab63cd$export$8ad762e3e6399afe = v; });
$parcel$export(module.exports, "ECPrivateKey", function () { return $5a29b3da10ab63cd$export$32ef6f92e22c6ab0; }, function (v) { return $5a29b3da10ab63cd$export$32ef6f92e22c6ab0 = v; });
$parcel$export(module.exports, "signature", function () { return $5a29b3da10ab63cd$export$c9cd164b539ebb63; }, function (v) { return $5a29b3da10ab63cd$export$c9cd164b539ebb63 = v; });
var $5a29b3da10ab63cd$export$c98397a6eb8d0678;
var $5a29b3da10ab63cd$export$f4aab6816f64fa6b;
var $5a29b3da10ab63cd$export$4471f5c65d097c11;
var $5a29b3da10ab63cd$export$ca8b6604d6ce14de;
var $5a29b3da10ab63cd$export$8f54525b330fd87b;
var $5a29b3da10ab63cd$export$23cd2842b44ca3e7;
var $5a29b3da10ab63cd$export$245c9aaa9f5ce4ce;
var $5a29b3da10ab63cd$export$8ad762e3e6399afe;
var $5a29b3da10ab63cd$export$32ef6f92e22c6ab0;
var $5a29b3da10ab63cd$export$c9cd164b539ebb63;
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict';

var $deYI8 = parcelRequire("deYI8");

$5a29b3da10ab63cd$export$c98397a6eb8d0678 = (parcelRequire("4sSWb"));
var $5a29b3da10ab63cd$var$RSAPrivateKey = $deYI8.define('RSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
});
$5a29b3da10ab63cd$export$f4aab6816f64fa6b = $5a29b3da10ab63cd$var$RSAPrivateKey;
var $5a29b3da10ab63cd$var$RSAPublicKey = $deYI8.define('RSAPublicKey', function() {
    this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
});
$5a29b3da10ab63cd$export$4471f5c65d097c11 = $5a29b3da10ab63cd$var$RSAPublicKey;
var $5a29b3da10ab63cd$var$PublicKey = $deYI8.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use($5a29b3da10ab63cd$var$AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
$5a29b3da10ab63cd$export$ca8b6604d6ce14de = $5a29b3da10ab63cd$var$PublicKey;
var $5a29b3da10ab63cd$var$AlgorithmIdentifier = $deYI8.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());
});
var $5a29b3da10ab63cd$var$PrivateKeyInfo = $deYI8.define('PrivateKeyInfo', function() {
    this.seq().obj(this.key('version').int(), this.key('algorithm').use($5a29b3da10ab63cd$var$AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
});
$5a29b3da10ab63cd$export$8f54525b330fd87b = $5a29b3da10ab63cd$var$PrivateKeyInfo;
var $5a29b3da10ab63cd$var$EncryptedPrivateKeyInfo = $deYI8.define('EncryptedPrivateKeyInfo', function() {
    this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
});
$5a29b3da10ab63cd$export$23cd2842b44ca3e7 = $5a29b3da10ab63cd$var$EncryptedPrivateKeyInfo;
var $5a29b3da10ab63cd$var$DSAPrivateKey = $deYI8.define('DSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());
});
$5a29b3da10ab63cd$export$245c9aaa9f5ce4ce = $5a29b3da10ab63cd$var$DSAPrivateKey;
$5a29b3da10ab63cd$export$8ad762e3e6399afe = $deYI8.define('DSAparam', function() {
    this.int();
});
var $5a29b3da10ab63cd$var$ECPrivateKey = $deYI8.define('ECPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use($5a29b3da10ab63cd$var$ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
});
$5a29b3da10ab63cd$export$32ef6f92e22c6ab0 = $5a29b3da10ab63cd$var$ECPrivateKey;
var $5a29b3da10ab63cd$var$ECParameters = $deYI8.define('ECParameters', function() {
    this.choice({
        namedCurve: this.objid()
    });
});
$5a29b3da10ab63cd$export$c9cd164b539ebb63 = $deYI8.define('signature', function() {
    this.seq().obj(this.key('r').int(), this.key('s').int());
});

});
parcelRequire.register("deYI8", function(module, exports) {
'use strict';
var $9a3bad0f4c2df4ff$var$asn1 = module.exports;

$9a3bad0f4c2df4ff$var$asn1.bignum = (parcelRequire("ek2tU"));

$9a3bad0f4c2df4ff$var$asn1.define = (parcelRequire("4AjUm")).define;

$9a3bad0f4c2df4ff$var$asn1.base = (parcelRequire("lOJI7"));

$9a3bad0f4c2df4ff$var$asn1.constants = (parcelRequire("JCK3h"));

$9a3bad0f4c2df4ff$var$asn1.decoders = (parcelRequire("553RJ"));

$9a3bad0f4c2df4ff$var$asn1.encoders = (parcelRequire("1aQGt"));

});
parcelRequire.register("4AjUm", function(module, exports) {
'use strict';

var $1aQGt = parcelRequire("1aQGt");

var $553RJ = parcelRequire("553RJ");

var $2gGh5 = parcelRequire("2gGh5");
var $3569f789418d51fa$var$api = module.exports;
$3569f789418d51fa$var$api.define = function define(name, body) {
    return new $3569f789418d51fa$var$Entity(name, body);
};
function $3569f789418d51fa$var$Entity(name, body) {
    this.name = name;
    this.body = body;
    this.decoders = {};
    this.encoders = {};
}
$3569f789418d51fa$var$Entity.prototype._createNamed = function createNamed(Base) {
    var name1 = this.name;
    function Generated(entity) {
        this._initNamed(entity, name1);
    }
    $2gGh5(Generated, Base);
    Generated.prototype._initNamed = function _initNamed(entity, name) {
        Base.call(this, entity, name);
    };
    return new Generated(this);
};
$3569f789418d51fa$var$Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || 'der';
    // Lazily create decoder
    if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed($553RJ[enc]);
    return this.decoders[enc];
};
$3569f789418d51fa$var$Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
};
$3569f789418d51fa$var$Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || 'der';
    // Lazily create encoder
    if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed($1aQGt[enc]);
    return this.encoders[enc];
};
$3569f789418d51fa$var$Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
    return this._getEncoder(enc).encode(data, reporter);
};

});
parcelRequire.register("1aQGt", function(module, exports) {
'use strict';
var $0daf9791208c6717$var$encoders = module.exports;

$0daf9791208c6717$var$encoders.der = (parcelRequire("5u0yw"));

$0daf9791208c6717$var$encoders.pem = (parcelRequire("JnSwC"));

});
parcelRequire.register("5u0yw", function(module, exports) {
'use strict';

var $2gGh5 = parcelRequire("2gGh5");

var $9KkuM = parcelRequire("9KkuM");
var $3fe02f706229e046$require$Buffer = $9KkuM.Buffer;

var $itNl8 = parcelRequire("itNl8");

var $kSw01 = parcelRequire("kSw01");
function $3fe02f706229e046$var$DEREncoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new $3fe02f706229e046$var$DERNode();
    this.tree._init(entity.body);
}
module.exports = $3fe02f706229e046$var$DEREncoder;
$3fe02f706229e046$var$DEREncoder.prototype.encode = function encode(data, reporter) {
    return this.tree._encode(data, reporter).join();
};
// Tree methods
function $3fe02f706229e046$var$DERNode(parent) {
    $itNl8.call(this, 'der', parent);
}
$2gGh5($3fe02f706229e046$var$DERNode, $itNl8);
$3fe02f706229e046$var$DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    var encodedTag = $3fe02f706229e046$var$encodeTag(tag, primitive, cls, this.reporter);
    // Short form
    if (content.length < 0x80) {
        var header = $3fe02f706229e046$require$Buffer.alloc(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([
            header,
            content
        ]);
    }
    // Long form
    // Count octets required to store length
    var lenOctets = 1;
    for(var i = content.length; i >= 0x100; i >>= 8)lenOctets++;
    var header1 = $3fe02f706229e046$require$Buffer.alloc(2 + lenOctets);
    header1[0] = encodedTag;
    header1[1] = 0x80 | lenOctets;
    for(var i1 = 1 + lenOctets, j = content.length; j > 0; i1--, j >>= 8)header1[i1] = j & 0xff;
    return this._createEncoderBuffer([
        header1,
        content
    ]);
};
$3fe02f706229e046$var$DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === 'bitstr') return this._createEncoderBuffer([
        str.unused | 0,
        str.data
    ]);
    else if (tag === 'bmpstr') {
        var buf = $3fe02f706229e046$require$Buffer.alloc(str.length * 2);
        for(var i = 0; i < str.length; i++)buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        return this._createEncoderBuffer(buf);
    } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        return this._createEncoderBuffer(str);
    } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) return this._createEncoderBuffer(str);
    else if (tag === 'objDesc') return this._createEncoderBuffer(str);
    else return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
};
$3fe02f706229e046$var$DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === 'string') {
        if (!values) return this.reporter.error('string objid given, but no values map found');
        if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s.]+/g);
        for(var i = 0; i < id.length; i++)id[i] |= 0;
    } else if (Array.isArray(id)) {
        id = id.slice();
        for(var i2 = 0; i2 < id.length; i2++)id[i2] |= 0;
    }
    if (!Array.isArray(id)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
    if (!relative) {
        if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
    }
    // Count number of octets
    var size = 0;
    for(var i3 = 0; i3 < id.length; i3++){
        var ident = id[i3];
        for(size++; ident >= 0x80; ident >>= 7)size++;
    }
    var objid = $3fe02f706229e046$require$Buffer.alloc(size);
    var offset = objid.length - 1;
    for(var i4 = id.length - 1; i4 >= 0; i4--){
        var ident1 = id[i4];
        objid[offset--] = ident1 & 0x7f;
        while((ident1 >>= 7) > 0)objid[offset--] = 0x80 | ident1 & 0x7f;
    }
    return this._createEncoderBuffer(objid);
};
function $3fe02f706229e046$var$two(num) {
    if (num < 10) return '0' + num;
    else return num;
}
$3fe02f706229e046$var$DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    var str;
    var date = new Date(time);
    if (tag === 'gentime') str = [
        $3fe02f706229e046$var$two(date.getUTCFullYear()),
        $3fe02f706229e046$var$two(date.getUTCMonth() + 1),
        $3fe02f706229e046$var$two(date.getUTCDate()),
        $3fe02f706229e046$var$two(date.getUTCHours()),
        $3fe02f706229e046$var$two(date.getUTCMinutes()),
        $3fe02f706229e046$var$two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else if (tag === 'utctime') str = [
        $3fe02f706229e046$var$two(date.getUTCFullYear() % 100),
        $3fe02f706229e046$var$two(date.getUTCMonth() + 1),
        $3fe02f706229e046$var$two(date.getUTCDate()),
        $3fe02f706229e046$var$two(date.getUTCHours()),
        $3fe02f706229e046$var$two(date.getUTCMinutes()),
        $3fe02f706229e046$var$two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else this.reporter.error('Encoding ' + tag + ' time is not supported yet');
    return this._encodeStr(str, 'octstr');
};
$3fe02f706229e046$var$DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer('');
};
$3fe02f706229e046$var$DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === 'string') {
        if (!values) return this.reporter.error('String int or enum given, but no values map');
        if (!values.hasOwnProperty(num)) return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
        num = values[num];
    }
    // Bignum, assume big endian
    if (typeof num !== 'number' && !$3fe02f706229e046$require$Buffer.isBuffer(num)) {
        var numArray = num.toArray();
        if (!num.sign && numArray[0] & 0x80) numArray.unshift(0);
        num = $3fe02f706229e046$require$Buffer.from(numArray);
    }
    if ($3fe02f706229e046$require$Buffer.isBuffer(num)) {
        var size = num.length;
        if (num.length === 0) size++;
        var out = $3fe02f706229e046$require$Buffer.alloc(size);
        num.copy(out);
        if (num.length === 0) out[0] = 0;
        return this._createEncoderBuffer(out);
    }
    if (num < 0x80) return this._createEncoderBuffer(num);
    if (num < 0x100) return this._createEncoderBuffer([
        0,
        num
    ]);
    var size1 = 1;
    for(var i = num; i >= 0x100; i >>= 8)size1++;
    var out1 = new Array(size1);
    for(var i5 = out1.length - 1; i5 >= 0; i5--){
        out1[i5] = num & 0xff;
        num >>= 8;
    }
    if (out1[0] & 0x80) out1.unshift(0);
    return this._createEncoderBuffer($3fe02f706229e046$require$Buffer.from(out1));
};
$3fe02f706229e046$var$DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 0xff : 0);
};
$3fe02f706229e046$var$DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getEncoder('der').tree;
};
$3fe02f706229e046$var$DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    var state = this._baseState;
    var i;
    if (state['default'] === null) return false;
    var data = dataBuffer.join();
    if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
    if (data.length !== state.defaultBuffer.length) return false;
    for(i = 0; i < data.length; i++)if (data[i] !== state.defaultBuffer[i]) return false;
    return true;
};
// Utility methods
function $3fe02f706229e046$var$encodeTag(tag, primitive, cls, reporter) {
    var res;
    if (tag === 'seqof') tag = 'seq';
    else if (tag === 'setof') tag = 'set';
    if ($kSw01.tagByName.hasOwnProperty(tag)) res = $kSw01.tagByName[tag];
    else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;
    else return reporter.error('Unknown tag: ' + tag);
    if (res >= 0x1f) return reporter.error('Multi-octet tag encoding unsupported');
    if (!primitive) res |= 0x20;
    res |= $kSw01.tagClassByName[cls || 'universal'] << 6;
    return res;
}

});
parcelRequire.register("9KkuM", function(module, exports) {
parcelRequire("6vt9n");
var $83MoV = parcelRequire("83MoV");
/* eslint-disable node/no-deprecated-api */ 'use strict';

var $iUMdb = parcelRequire("iUMdb");

var $5vuHX = parcelRequire("5vuHX");
var $71884ee149a069b5$var$Buffer = $5vuHX.Buffer;
var $71884ee149a069b5$var$safer = {};
var $71884ee149a069b5$var$key;
for($71884ee149a069b5$var$key in $5vuHX){
    if (!$5vuHX.hasOwnProperty($71884ee149a069b5$var$key)) continue;
    if ($71884ee149a069b5$var$key === 'SlowBuffer' || $71884ee149a069b5$var$key === 'Buffer') continue;
    $71884ee149a069b5$var$safer[$71884ee149a069b5$var$key] = $5vuHX[$71884ee149a069b5$var$key];
}
var $71884ee149a069b5$var$Safer = $71884ee149a069b5$var$safer.Buffer = {};
for($71884ee149a069b5$var$key in $71884ee149a069b5$var$Buffer){
    if (!$71884ee149a069b5$var$Buffer.hasOwnProperty($71884ee149a069b5$var$key)) continue;
    if ($71884ee149a069b5$var$key === 'allocUnsafe' || $71884ee149a069b5$var$key === 'allocUnsafeSlow') continue;
    $71884ee149a069b5$var$Safer[$71884ee149a069b5$var$key] = $71884ee149a069b5$var$Buffer[$71884ee149a069b5$var$key];
}
$71884ee149a069b5$var$safer.Buffer.prototype = $71884ee149a069b5$var$Buffer.prototype;
if (!$71884ee149a069b5$var$Safer.from || $71884ee149a069b5$var$Safer.from === Uint8Array.from) $71884ee149a069b5$var$Safer.from = function(value, encodingOrOffset, length) {
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type ' + (typeof value === "undefined" ? "undefined" : $83MoV.default(value)));
    if (value && typeof value.length === 'undefined') throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + (typeof value === "undefined" ? "undefined" : $83MoV.default(value)));
    return $71884ee149a069b5$var$Buffer(value, encodingOrOffset, length);
};
if (!$71884ee149a069b5$var$Safer.alloc) $71884ee149a069b5$var$Safer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('The "size" argument must be of type number. Received type ' + (typeof size === "undefined" ? "undefined" : $83MoV.default(size)));
    if (size < 0 || size >= 2147483648) throw new RangeError('The value "' + size + '" is invalid for option "size"');
    var buf = $71884ee149a069b5$var$Buffer(size);
    if (!fill || fill.length === 0) buf.fill(0);
    else if (typeof encoding === 'string') buf.fill(fill, encoding);
    else buf.fill(fill);
    return buf;
};
if (!$71884ee149a069b5$var$safer.kStringMaxLength) try {
    $71884ee149a069b5$var$safer.kStringMaxLength = $iUMdb.binding('buffer').kStringMaxLength;
} catch (e) {
// we can't determine kStringMaxLength in environments where process.binding
// is unsupported, so let's not set it
}
if (!$71884ee149a069b5$var$safer.constants) {
    $71884ee149a069b5$var$safer.constants = {
        MAX_LENGTH: $71884ee149a069b5$var$safer.kMaxLength
    };
    if ($71884ee149a069b5$var$safer.kStringMaxLength) $71884ee149a069b5$var$safer.constants.MAX_STRING_LENGTH = $71884ee149a069b5$var$safer.kStringMaxLength;
}
module.exports = $71884ee149a069b5$var$safer;

});

parcelRequire.register("itNl8", function(module, exports) {
'use strict';

var $jTqkv = parcelRequire("jTqkv");
var $d741354ba42ac962$require$Reporter = $jTqkv.Reporter;

var $b5hZc = parcelRequire("b5hZc");
var $d741354ba42ac962$require$EncoderBuffer = $b5hZc.EncoderBuffer;

var $b5hZc = parcelRequire("b5hZc");
var $d741354ba42ac962$require$DecoderBuffer = $b5hZc.DecoderBuffer;

var $hB7g9 = parcelRequire("hB7g9");
// Supported tags
var $d741354ba42ac962$var$tags = [
    'seq',
    'seqof',
    'set',
    'setof',
    'objid',
    'bool',
    'gentime',
    'utctime',
    'null_',
    'enum',
    'int',
    'objDesc',
    'bitstr',
    'bmpstr',
    'charstr',
    'genstr',
    'graphstr',
    'ia5str',
    'iso646str',
    'numstr',
    'octstr',
    'printstr',
    't61str',
    'unistr',
    'utf8str',
    'videostr'
];
// Public methods list
var $d741354ba42ac962$var$methods = [
    'key',
    'obj',
    'use',
    'optional',
    'explicit',
    'implicit',
    'def',
    'choice',
    'any',
    'contains'
].concat($d741354ba42ac962$var$tags);
// Overrided methods list
var $d741354ba42ac962$var$overrided = [
    '_peekTag',
    '_decodeTag',
    '_use',
    '_decodeStr',
    '_decodeObjid',
    '_decodeTime',
    '_decodeNull',
    '_decodeInt',
    '_decodeBool',
    '_decodeList',
    '_encodeComposite',
    '_encodeStr',
    '_encodeObjid',
    '_encodeTime',
    '_encodeNull',
    '_encodeInt',
    '_encodeBool'
];
function $d741354ba42ac962$var$Node(enc, parent, name) {
    var state = {};
    this._baseState = state;
    state.name = name;
    state.enc = enc;
    state.parent = parent || null;
    state.children = null;
    // State
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state['default'] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;
    // Should create new instance on each method
    if (!state.parent) {
        state.children = [];
        this._wrap();
    }
}
module.exports = $d741354ba42ac962$var$Node;
var $d741354ba42ac962$var$stateProps = [
    'enc',
    'parent',
    'children',
    'tag',
    'args',
    'reverseArgs',
    'choice',
    'optional',
    'any',
    'obj',
    'use',
    'alteredUse',
    'key',
    'default',
    'explicit',
    'implicit',
    'contains'
];
$d741354ba42ac962$var$Node.prototype.clone = function clone() {
    var state = this._baseState;
    var cstate = {};
    $d741354ba42ac962$var$stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
    });
    var res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
};
$d741354ba42ac962$var$Node.prototype._wrap = function wrap() {
    var state = this._baseState;
    $d741354ba42ac962$var$methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
            var clone = new this.constructor(this);
            state.children.push(clone);
            return clone[method].apply(clone, arguments);
        };
    }, this);
};
$d741354ba42ac962$var$Node.prototype._init = function init(body) {
    var state = this._baseState;
    $hB7g9(state.parent === null);
    body.call(this);
    // Filter children
    state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
    }, this);
    $hB7g9.equal(state.children.length, 1, 'Root node can have only one child');
};
$d741354ba42ac962$var$Node.prototype._useArgs = function useArgs(args) {
    var state = this._baseState;
    // Filter children and args
    var children = args.filter(function(arg) {
        return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
        $hB7g9(state.children === null);
        state.children = children;
        // Replace parent to maintain backward link
        children.forEach(function(child) {
            child._baseState.parent = this;
        }, this);
    }
    if (args.length !== 0) {
        $hB7g9(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
            if (typeof arg !== 'object' || arg.constructor !== Object) return arg;
            var res = {};
            Object.keys(arg).forEach(function(key) {
                if (key == (key | 0)) key |= 0;
                var value = arg[key];
                res[value] = key;
            });
            return res;
        });
    }
};
//
// Overrided methods
//
$d741354ba42ac962$var$overrided.forEach(function(method) {
    $d741354ba42ac962$var$Node.prototype[method] = function _overrided() {
        var state = this._baseState;
        throw new Error(method + ' not implemented for encoding: ' + state.enc);
    };
});
//
// Public methods
//
$d741354ba42ac962$var$tags.forEach(function(tag) {
    $d741354ba42ac962$var$Node.prototype[tag] = function _tagMethod() {
        var state = this._baseState;
        var args = Array.prototype.slice.call(arguments);
        $hB7g9(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
    };
});
$d741354ba42ac962$var$Node.prototype.use = function use(item) {
    $hB7g9(item);
    var state = this._baseState;
    $hB7g9(state.use === null);
    state.use = item;
    return this;
};
$d741354ba42ac962$var$Node.prototype.optional = function optional() {
    var state = this._baseState;
    state.optional = true;
    return this;
};
$d741354ba42ac962$var$Node.prototype.def = function def(val) {
    var state = this._baseState;
    $hB7g9(state['default'] === null);
    state['default'] = val;
    state.optional = true;
    return this;
};
$d741354ba42ac962$var$Node.prototype.explicit = function explicit(num) {
    var state = this._baseState;
    $hB7g9(state.explicit === null && state.implicit === null);
    state.explicit = num;
    return this;
};
$d741354ba42ac962$var$Node.prototype.implicit = function implicit(num) {
    var state = this._baseState;
    $hB7g9(state.explicit === null && state.implicit === null);
    state.implicit = num;
    return this;
};
$d741354ba42ac962$var$Node.prototype.obj = function obj() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);
    state.obj = true;
    if (args.length !== 0) this._useArgs(args);
    return this;
};
$d741354ba42ac962$var$Node.prototype.key = function key(newKey) {
    var state = this._baseState;
    $hB7g9(state.key === null);
    state.key = newKey;
    return this;
};
$d741354ba42ac962$var$Node.prototype.any = function any() {
    var state = this._baseState;
    state.any = true;
    return this;
};
$d741354ba42ac962$var$Node.prototype.choice = function choice(obj) {
    var state = this._baseState;
    $hB7g9(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
    }));
    return this;
};
$d741354ba42ac962$var$Node.prototype.contains = function contains(item) {
    var state = this._baseState;
    $hB7g9(state.use === null);
    state.contains = item;
    return this;
};
//
// Decoding
//
$d741354ba42ac962$var$Node.prototype._decode = function decode(input, options) {
    var state = this._baseState;
    // Decode root node
    if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
    var result = state['default'];
    var present = true;
    var prevKey = null;
    if (state.key !== null) prevKey = input.enterKey(state.key);
    // Check if tag is there
    if (state.optional) {
        var tag = null;
        if (state.explicit !== null) tag = state.explicit;
        else if (state.implicit !== null) tag = state.implicit;
        else if (state.tag !== null) tag = state.tag;
        if (tag === null && !state.any) {
            // Trial and Error
            var save = input.save();
            try {
                if (state.choice === null) this._decodeGeneric(state.tag, input, options);
                else this._decodeChoice(input, options);
                present = true;
            } catch (e) {
                present = false;
            }
            input.restore(save);
        } else {
            present = this._peekTag(input, tag, state.any);
            if (input.isError(present)) return present;
        }
    }
    // Push object on stack
    var prevObj;
    if (state.obj && present) prevObj = input.enterObject();
    if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
            var explicit = this._decodeTag(input, state.explicit);
            if (input.isError(explicit)) return explicit;
            input = explicit;
        }
        var start = input.offset;
        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
            var save1;
            if (state.any) save1 = input.save();
            var body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
            if (input.isError(body)) return body;
            if (state.any) result = input.raw(save1);
            else input = body;
        }
        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');
        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content');
        // Select proper method for tag
        if (state.any) ;
        else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);
        else result = this._decodeChoice(input, options);
        if (input.isError(result)) return result;
        // Decode children
        if (!state.any && state.choice === null && state.children !== null) state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
        });
        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
            var data = new $d741354ba42ac962$require$DecoderBuffer(result);
            result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
    }
    // Pop object
    if (state.obj && present) result = input.leaveObject(prevObj);
    // Set key
    if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null) input.exitKey(prevKey);
    return result;
};
$d741354ba42ac962$var$Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    var state = this._baseState;
    if (tag === 'seq' || tag === 'set') return null;
    if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
    else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === 'objid') return this._decodeObjid(input, null, null, options);
    else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);
    else if (tag === 'null_') return this._decodeNull(input, options);
    else if (tag === 'bool') return this._decodeBool(input, options);
    else if (tag === 'objDesc') return this._decodeStr(input, tag, options);
    else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);
    if (state.use !== null) return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
    else return input.error('unknown tag: ' + tag);
};
$d741354ba42ac962$var$Node.prototype._getUse = function _getUse(entity, obj) {
    var state = this._baseState;
    // Create altered use decoder if implicit is set
    state.useDecoder = this._use(entity, obj);
    $hB7g9(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
};
$d741354ba42ac962$var$Node.prototype._decodeChoice = function decodeChoice(input, options) {
    var state = this._baseState;
    var result = null;
    var match = false;
    Object.keys(state.choice).some(function(key) {
        var save = input.save();
        var node = state.choice[key];
        try {
            var value = node._decode(input, options);
            if (input.isError(value)) return false;
            result = {
                type: key,
                value: value
            };
            match = true;
        } catch (e) {
            input.restore(save);
            return false;
        }
        return true;
    }, this);
    if (!match) return input.error('Choice not matched');
    return result;
};
//
// Encoding
//
$d741354ba42ac962$var$Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new $d741354ba42ac962$require$EncoderBuffer(data, this.reporter);
};
$d741354ba42ac962$var$Node.prototype._encode = function encode(data, reporter, parent) {
    var state = this._baseState;
    if (state['default'] !== null && state['default'] === data) return;
    var result = this._encodeValue(data, reporter, parent);
    if (result === undefined) return;
    if (this._skipDefault(result, reporter, parent)) return;
    return result;
};
$d741354ba42ac962$var$Node.prototype._encodeValue = function encode(data, reporter, parent) {
    var state1 = this._baseState;
    // Decode root node
    if (state1.parent === null) return state1.children[0]._encode(data, reporter || new $d741354ba42ac962$require$Reporter());
    var result = null;
    // Set reporter to share it with a child class
    this.reporter = reporter;
    // Check if data is there
    if (state1.optional && data === undefined) {
        if (state1['default'] !== null) data = state1['default'];
        else return;
    }
    // Encode children first
    var content = null;
    var primitive = false;
    if (state1.any) // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
    else if (state1.choice) result = this._encodeChoice(data, reporter);
    else if (state1.contains) {
        content = this._getUse(state1.contains, parent)._encode(data, reporter);
        primitive = true;
    } else if (state1.children) {
        content = state1.children.map(function(child) {
            if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);
            if (child._baseState.key === null) return reporter.error('Child should have a key');
            var prevKey = reporter.enterKey(child._baseState.key);
            if (typeof data !== 'object') return reporter.error('Child expected, but input is not object');
            var res = child._encode(data[child._baseState.key], reporter, data);
            reporter.leaveKey(prevKey);
            return res;
        }, this).filter(function(child) {
            return child;
        });
        content = this._createEncoderBuffer(content);
    } else {
        if (state1.tag === 'seqof' || state1.tag === 'setof') {
            // TODO(indutny): this should be thrown on DSL level
            if (!(state1.args && state1.args.length === 1)) return reporter.error('Too many args for : ' + state1.tag);
            if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');
            var child1 = this.clone();
            child1._baseState.implicit = null;
            content = this._createEncoderBuffer(data.map(function(item) {
                var state = this._baseState;
                return this._getUse(state.args[0], data)._encode(item, reporter);
            }, child1));
        } else if (state1.use !== null) result = this._getUse(state1.use, parent)._encode(data, reporter);
        else {
            content = this._encodePrimitive(state1.tag, data);
            primitive = true;
        }
    }
    // Encode data itself
    if (!state1.any && state1.choice === null) {
        var tag = state1.implicit !== null ? state1.implicit : state1.tag;
        var cls = state1.implicit === null ? 'universal' : 'context';
        if (tag === null) {
            if (state1.use === null) reporter.error('Tag could be omitted only for .use()');
        } else if (state1.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
    // Wrap in explicit
    if (state1.explicit !== null) result = this._encodeComposite(state1.explicit, false, 'context', result);
    return result;
};
$d741354ba42ac962$var$Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    var state = this._baseState;
    var node = state.choice[data.type];
    if (!node) $hB7g9(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
    return node._encode(data.value, reporter);
};
$d741354ba42ac962$var$Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    var state = this._baseState;
    if (/str$/.test(tag)) return this._encodeStr(data, tag);
    else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === 'objid') return this._encodeObjid(data, null, null);
    else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);
    else if (tag === 'null_') return this._encodeNull();
    else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === 'bool') return this._encodeBool(data);
    else if (tag === 'objDesc') return this._encodeStr(data, tag);
    else throw new Error('Unsupported tag: ' + tag);
};
$d741354ba42ac962$var$Node.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
};
$d741354ba42ac962$var$Node.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

});
parcelRequire.register("jTqkv", function(module, exports) {

$parcel$export(module.exports, "Reporter", function () { return $e7b793e99e5b166a$export$957313a2f485e5ed; }, function (v) { return $e7b793e99e5b166a$export$957313a2f485e5ed = v; });
var $e7b793e99e5b166a$export$957313a2f485e5ed;
'use strict';

var $2gGh5 = parcelRequire("2gGh5");
function $e7b793e99e5b166a$var$Reporter(options) {
    this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
    };
}
$e7b793e99e5b166a$export$957313a2f485e5ed = $e7b793e99e5b166a$var$Reporter;
$e7b793e99e5b166a$var$Reporter.prototype.isError = function isError(obj) {
    return obj instanceof $e7b793e99e5b166a$var$ReporterError;
};
$e7b793e99e5b166a$var$Reporter.prototype.save = function save() {
    var state = this._reporterState;
    return {
        obj: state.obj,
        pathLen: state.path.length
    };
};
$e7b793e99e5b166a$var$Reporter.prototype.restore = function restore(data) {
    var state = this._reporterState;
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
};
$e7b793e99e5b166a$var$Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
};
$e7b793e99e5b166a$var$Reporter.prototype.exitKey = function exitKey(index) {
    var state = this._reporterState;
    state.path = state.path.slice(0, index - 1);
};
$e7b793e99e5b166a$var$Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    var state = this._reporterState;
    this.exitKey(index);
    if (state.obj !== null) state.obj[key] = value;
};
$e7b793e99e5b166a$var$Reporter.prototype.path = function path() {
    return this._reporterState.path.join('/');
};
$e7b793e99e5b166a$var$Reporter.prototype.enterObject = function enterObject() {
    var state = this._reporterState;
    var prev = state.obj;
    state.obj = {};
    return prev;
};
$e7b793e99e5b166a$var$Reporter.prototype.leaveObject = function leaveObject(prev) {
    var state = this._reporterState;
    var now = state.obj;
    state.obj = prev;
    return now;
};
$e7b793e99e5b166a$var$Reporter.prototype.error = function error(msg) {
    var err;
    var state = this._reporterState;
    var inherited = msg instanceof $e7b793e99e5b166a$var$ReporterError;
    if (inherited) err = msg;
    else err = new $e7b793e99e5b166a$var$ReporterError(state.path.map(function(elem) {
        return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
    if (!state.options.partial) throw err;
    if (!inherited) state.errors.push(err);
    return err;
};
$e7b793e99e5b166a$var$Reporter.prototype.wrapResult = function wrapResult(result) {
    var state = this._reporterState;
    if (!state.options.partial) return result;
    return {
        result: this.isError(result) ? null : result,
        errors: state.errors
    };
};
function $e7b793e99e5b166a$var$ReporterError(path, msg) {
    this.path = path;
    this.rethrow(msg);
}
$2gGh5($e7b793e99e5b166a$var$ReporterError, Error);
$e7b793e99e5b166a$var$ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + ' at: ' + (this.path || '(shallow)');
    if (Error.captureStackTrace) Error.captureStackTrace(this, $e7b793e99e5b166a$var$ReporterError);
    if (!this.stack) try {
        // IE only adds stack when thrown
        throw new Error(this.message);
    } catch (e) {
        this.stack = e.stack;
    }
    return this;
};

});

parcelRequire.register("b5hZc", function(module, exports) {

$parcel$export(module.exports, "DecoderBuffer", function () { return $811e1d03a71b3b92$export$bf9f79cdc4a49163; }, function (v) { return $811e1d03a71b3b92$export$bf9f79cdc4a49163 = v; });
$parcel$export(module.exports, "EncoderBuffer", function () { return $811e1d03a71b3b92$export$8ff24f7760c7a78e; }, function (v) { return $811e1d03a71b3b92$export$8ff24f7760c7a78e = v; });
parcelRequire("6vt9n");
var $83MoV = parcelRequire("83MoV");
var $811e1d03a71b3b92$export$bf9f79cdc4a49163;
var $811e1d03a71b3b92$export$8ff24f7760c7a78e;
'use strict';

var $2gGh5 = parcelRequire("2gGh5");

var $jTqkv = parcelRequire("jTqkv");
var $811e1d03a71b3b92$require$Reporter = $jTqkv.Reporter;

var $9KkuM = parcelRequire("9KkuM");
var $811e1d03a71b3b92$require$Buffer = $9KkuM.Buffer;
function $811e1d03a71b3b92$var$DecoderBuffer(base, options) {
    $811e1d03a71b3b92$require$Reporter.call(this, options);
    if (!$811e1d03a71b3b92$require$Buffer.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
    }
    this.base = base;
    this.offset = 0;
    this.length = base.length;
}
$2gGh5($811e1d03a71b3b92$var$DecoderBuffer, $811e1d03a71b3b92$require$Reporter);
$811e1d03a71b3b92$export$bf9f79cdc4a49163 = $811e1d03a71b3b92$var$DecoderBuffer;
$811e1d03a71b3b92$var$DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
    if (data instanceof $811e1d03a71b3b92$var$DecoderBuffer) return true;
    // Or accept compatible API
    var isCompatible = typeof data === 'object' && $811e1d03a71b3b92$require$Buffer.isBuffer(data.base) && data.constructor.name === 'DecoderBuffer' && typeof data.offset === 'number' && typeof data.length === 'number' && typeof data.save === 'function' && typeof data.restore === 'function' && typeof data.isEmpty === 'function' && typeof data.readUInt8 === 'function' && typeof data.skip === 'function' && typeof data.raw === 'function';
    return isCompatible;
};
$811e1d03a71b3b92$var$DecoderBuffer.prototype.save = function save() {
    return {
        offset: this.offset,
        reporter: $811e1d03a71b3b92$require$Reporter.prototype.save.call(this)
    };
};
$811e1d03a71b3b92$var$DecoderBuffer.prototype.restore = function restore(save) {
    // Return skipped data
    var res = new $811e1d03a71b3b92$var$DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;
    this.offset = save.offset;
    $811e1d03a71b3b92$require$Reporter.prototype.restore.call(this, save.reporter);
    return res;
};
$811e1d03a71b3b92$var$DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
};
$811e1d03a71b3b92$var$DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);
    else return this.error(fail || 'DecoderBuffer overrun');
};
$811e1d03a71b3b92$var$DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');
    var res = new $811e1d03a71b3b92$var$DecoderBuffer(this.base);
    // Share reporter state
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
};
$811e1d03a71b3b92$var$DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
};
function $811e1d03a71b3b92$var$EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
            if (!$811e1d03a71b3b92$var$EncoderBuffer.isEncoderBuffer(item)) item = new $811e1d03a71b3b92$var$EncoderBuffer(item, reporter);
            this.length += item.length;
            return item;
        }, this);
    } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 0xff)) return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
    } else if (typeof value === 'string') {
        this.value = value;
        this.length = $811e1d03a71b3b92$require$Buffer.byteLength(value);
    } else if ($811e1d03a71b3b92$require$Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
    } else return reporter.error('Unsupported type: ' + (typeof value === "undefined" ? "undefined" : $83MoV.default(value)));
}
$811e1d03a71b3b92$export$8ff24f7760c7a78e = $811e1d03a71b3b92$var$EncoderBuffer;
$811e1d03a71b3b92$var$EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
    if (data instanceof $811e1d03a71b3b92$var$EncoderBuffer) return true;
    // Or accept compatible API
    var isCompatible = typeof data === 'object' && data.constructor.name === 'EncoderBuffer' && typeof data.length === 'number' && typeof data.join === 'function';
    return isCompatible;
};
$811e1d03a71b3b92$var$EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out) out = $811e1d03a71b3b92$require$Buffer.alloc(this.length);
    if (!offset) offset = 0;
    if (this.length === 0) return out;
    if (Array.isArray(this.value)) this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
    });
    else {
        if (typeof this.value === 'number') out[offset] = this.value;
        else if (typeof this.value === 'string') out.write(this.value, offset);
        else if ($811e1d03a71b3b92$require$Buffer.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
    }
    return out;
};

});


parcelRequire.register("kSw01", function(module, exports) {

$parcel$export(module.exports, "tagClass", function () { return $f331ac3948e4e55f$export$3584c46ed60baee8; }, function (v) { return $f331ac3948e4e55f$export$3584c46ed60baee8 = v; });
$parcel$export(module.exports, "tagClassByName", function () { return $f331ac3948e4e55f$export$f18596ef8d632e49; }, function (v) { return $f331ac3948e4e55f$export$f18596ef8d632e49 = v; });
$parcel$export(module.exports, "tag", function () { return $f331ac3948e4e55f$export$2b067c6666111485; }, function (v) { return $f331ac3948e4e55f$export$2b067c6666111485 = v; });
$parcel$export(module.exports, "tagByName", function () { return $f331ac3948e4e55f$export$f17df38a421ab9e3; }, function (v) { return $f331ac3948e4e55f$export$f17df38a421ab9e3 = v; });
var $f331ac3948e4e55f$export$3584c46ed60baee8;
var $f331ac3948e4e55f$export$f18596ef8d632e49;
var $f331ac3948e4e55f$export$2b067c6666111485;
var $f331ac3948e4e55f$export$f17df38a421ab9e3;
'use strict';
// Helper
function $f331ac3948e4e55f$var$reverse(map) {
    var res = {};
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        var value = map[key];
        res[value] = key;
    });
    return res;
}
$f331ac3948e4e55f$export$3584c46ed60baee8 = {
    0: 'universal',
    1: 'application',
    2: 'context',
    3: 'private'
};
$f331ac3948e4e55f$export$f18596ef8d632e49 = $f331ac3948e4e55f$var$reverse($f331ac3948e4e55f$export$3584c46ed60baee8);
$f331ac3948e4e55f$export$2b067c6666111485 = {
    0x00: 'end',
    0x01: 'bool',
    0x02: 'int',
    0x03: 'bitstr',
    0x04: 'octstr',
    0x05: 'null_',
    0x06: 'objid',
    0x07: 'objDesc',
    0x08: 'external',
    0x09: 'real',
    0x0a: 'enum',
    0x0b: 'embed',
    0x0c: 'utf8str',
    0x0d: 'relativeOid',
    0x10: 'seq',
    0x11: 'set',
    0x12: 'numstr',
    0x13: 'printstr',
    0x14: 't61str',
    0x15: 'videostr',
    0x16: 'ia5str',
    0x17: 'utctime',
    0x18: 'gentime',
    0x19: 'graphstr',
    0x1a: 'iso646str',
    0x1b: 'genstr',
    0x1c: 'unistr',
    0x1d: 'charstr',
    0x1e: 'bmpstr'
};
$f331ac3948e4e55f$export$f17df38a421ab9e3 = $f331ac3948e4e55f$var$reverse($f331ac3948e4e55f$export$2b067c6666111485);

});


parcelRequire.register("JnSwC", function(module, exports) {
'use strict';

var $2gGh5 = parcelRequire("2gGh5");

var $5u0yw = parcelRequire("5u0yw");
function $0886b9d80ead749d$var$PEMEncoder(entity) {
    $5u0yw.call(this, entity);
    this.enc = 'pem';
}
$2gGh5($0886b9d80ead749d$var$PEMEncoder, $5u0yw);
module.exports = $0886b9d80ead749d$var$PEMEncoder;
$0886b9d80ead749d$var$PEMEncoder.prototype.encode = function encode(data, options) {
    var buf = $5u0yw.prototype.encode.call(this, data);
    var p = buf.toString('base64');
    var out = [
        '-----BEGIN ' + options.label + '-----'
    ];
    for(var i = 0; i < p.length; i += 64)out.push(p.slice(i, i + 64));
    out.push('-----END ' + options.label + '-----');
    return out.join('\n');
};

});


parcelRequire.register("553RJ", function(module, exports) {
'use strict';
var $3b306afd809990c5$var$decoders = module.exports;

$3b306afd809990c5$var$decoders.der = (parcelRequire("aQBnb"));

$3b306afd809990c5$var$decoders.pem = (parcelRequire("3Du7q"));

});
parcelRequire.register("aQBnb", function(module, exports) {
'use strict';

var $2gGh5 = parcelRequire("2gGh5");

var $ek2tU = parcelRequire("ek2tU");

var $b5hZc = parcelRequire("b5hZc");
var $7e5bc033bf0d6846$require$DecoderBuffer = $b5hZc.DecoderBuffer;

var $itNl8 = parcelRequire("itNl8");

var $kSw01 = parcelRequire("kSw01");
function $7e5bc033bf0d6846$var$DERDecoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new $7e5bc033bf0d6846$var$DERNode();
    this.tree._init(entity.body);
}
module.exports = $7e5bc033bf0d6846$var$DERDecoder;
$7e5bc033bf0d6846$var$DERDecoder.prototype.decode = function decode(data, options) {
    if (!$7e5bc033bf0d6846$require$DecoderBuffer.isDecoderBuffer(data)) data = new $7e5bc033bf0d6846$require$DecoderBuffer(data, options);
    return this.tree._decode(data, options);
};
// Tree methods
function $7e5bc033bf0d6846$var$DERNode(parent) {
    $itNl8.call(this, 'der', parent);
}
$2gGh5($7e5bc033bf0d6846$var$DERNode, $itNl8);
$7e5bc033bf0d6846$var$DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
    if (buffer.isEmpty()) return false;
    var state = buffer.save();
    var decodedTag = $7e5bc033bf0d6846$var$derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    buffer.restore(state);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
};
$7e5bc033bf0d6846$var$DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
    var decodedTag = $7e5bc033bf0d6846$var$derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    var len = $7e5bc033bf0d6846$var$derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
    // Failure
    if (buffer.isError(len)) return len;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) return buffer.error('Failed to match tag: "' + tag + '"');
    if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    // Indefinite length... find END tag
    var state = buffer.save();
    var res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer.isError(res)) return res;
    len = buffer.offset - state.offset;
    buffer.restore(state);
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};
$7e5bc033bf0d6846$var$DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
    for(;;){
        var tag = $7e5bc033bf0d6846$var$derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        var len = $7e5bc033bf0d6846$var$derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;
        var res = void 0;
        if (tag.primitive || len !== null) res = buffer.skip(len);
        else res = this._skipUntilEnd(buffer, fail);
        // Failure
        if (buffer.isError(res)) return res;
        if (tag.tagStr === 'end') break;
    }
};
$7e5bc033bf0d6846$var$DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
    var result = [];
    while(!buffer.isEmpty()){
        var possibleEnd = this._peekTag(buffer, 'end');
        if (buffer.isError(possibleEnd)) return possibleEnd;
        var res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
    }
    return result;
};
$7e5bc033bf0d6846$var$DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
    if (tag === 'bitstr') {
        var unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return {
            unused: unused,
            data: buffer.raw()
        };
    } else if (tag === 'bmpstr') {
        var raw = buffer.raw();
        if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');
        var str = '';
        for(var i = 0; i < raw.length / 2; i++)str += String.fromCharCode(raw.readUInt16BE(i * 2));
        return str;
    } else if (tag === 'numstr') {
        var numstr = buffer.raw().toString('ascii');
        if (!this._isNumstr(numstr)) return buffer.error("Decoding of string type: numstr unsupported characters");
        return numstr;
    } else if (tag === 'octstr') return buffer.raw();
    else if (tag === 'objDesc') return buffer.raw();
    else if (tag === 'printstr') {
        var printstr = buffer.raw().toString('ascii');
        if (!this._isPrintstr(printstr)) return buffer.error("Decoding of string type: printstr unsupported characters");
        return printstr;
    } else if (/str$/.test(tag)) return buffer.raw().toString();
    else return buffer.error('Decoding of string type: ' + tag + ' unsupported');
};
$7e5bc033bf0d6846$var$DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
    var result;
    var identifiers = [];
    var ident = 0;
    var subident = 0;
    while(!buffer.isEmpty()){
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 0x7f;
        if ((subident & 0x80) === 0) {
            identifiers.push(ident);
            ident = 0;
        }
    }
    if (subident & 0x80) identifiers.push(ident);
    var first = identifiers[0] / 40 | 0;
    var second = identifiers[0] % 40;
    if (relative) result = identifiers;
    else result = [
        first,
        second
    ].concat(identifiers.slice(1));
    if (values) {
        var tmp = values[result.join(' ')];
        if (tmp === undefined) tmp = values[result.join('.')];
        if (tmp !== undefined) result = tmp;
    }
    return result;
};
$7e5bc033bf0d6846$var$DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
    var str = buffer.raw().toString();
    var year;
    var mon;
    var day;
    var hour;
    var min;
    var sec;
    if (tag === 'gentime') {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
    } else if (tag === 'utctime') {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2000 + year;
        else year = 1900 + year;
    } else return buffer.error('Decoding ' + tag + ' time is not supported yet');
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};
$7e5bc033bf0d6846$var$DERNode.prototype._decodeNull = function decodeNull() {
    return null;
};
$7e5bc033bf0d6846$var$DERNode.prototype._decodeBool = function decodeBool(buffer) {
    var res = buffer.readUInt8();
    if (buffer.isError(res)) return res;
    else return res !== 0;
};
$7e5bc033bf0d6846$var$DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
    // Bigint, return as it is (assume big endian)
    var raw = buffer.raw();
    var res = new $ek2tU(raw);
    if (values) res = values[res.toString(10)] || res;
    return res;
};
$7e5bc033bf0d6846$var$DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getDecoder('der').tree;
};
// Utility methods
function $7e5bc033bf0d6846$var$derDecodeTag(buf, fail) {
    var tag = buf.readUInt8(fail);
    if (buf.isError(tag)) return tag;
    var cls = $kSw01.tagClass[tag >> 6];
    var primitive = (tag & 0x20) === 0;
    // Multi-octet tag - load
    if ((tag & 0x1f) === 0x1f) {
        var oct = tag;
        tag = 0;
        while((oct & 0x80) === 0x80){
            oct = buf.readUInt8(fail);
            if (buf.isError(oct)) return oct;
            tag <<= 7;
            tag |= oct & 0x7f;
        }
    } else tag &= 0x1f;
    var tagStr = $kSw01.tag[tag];
    return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
    };
}
function $7e5bc033bf0d6846$var$derDecodeLen(buf, primitive, fail) {
    var len = buf.readUInt8(fail);
    if (buf.isError(len)) return len;
    // Indefinite form
    if (!primitive && len === 0x80) return null;
    // Definite form
    if ((len & 0x80) === 0) // Short form
    return len;
    // Long form
    var num = len & 0x7f;
    if (num > 4) return buf.error('length octect is too long');
    len = 0;
    for(var i = 0; i < num; i++){
        len <<= 8;
        var j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
    }
    return len;
}

});

parcelRequire.register("3Du7q", function(module, exports) {
'use strict';

var $2gGh5 = parcelRequire("2gGh5");

var $9KkuM = parcelRequire("9KkuM");
var $2a5c608fe30903f0$require$Buffer = $9KkuM.Buffer;

var $aQBnb = parcelRequire("aQBnb");
function $2a5c608fe30903f0$var$PEMDecoder(entity) {
    $aQBnb.call(this, entity);
    this.enc = 'pem';
}
$2gGh5($2a5c608fe30903f0$var$PEMDecoder, $aQBnb);
module.exports = $2a5c608fe30903f0$var$PEMDecoder;
$2a5c608fe30903f0$var$PEMDecoder.prototype.decode = function decode(data, options) {
    var lines = data.toString().split(/[\r\n]+/g);
    var label = options.label.toUpperCase();
    var re = /^-----(BEGIN|END) ([^-]+)-----$/;
    var start = -1;
    var end = -1;
    for(var i = 0; i < lines.length; i++){
        var match = lines[i].match(re);
        if (match === null) continue;
        if (match[2] !== label) continue;
        if (start === -1) {
            if (match[1] !== 'BEGIN') break;
            start = i;
        } else {
            if (match[1] !== 'END') break;
            end = i;
            break;
        }
    }
    if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);
    var base64 = lines.slice(start + 1, end).join('');
    // Remove excessive symbols
    base64.replace(/[^a-z0-9+/=]+/gi, '');
    var input = $2a5c608fe30903f0$require$Buffer.from(base64, 'base64');
    return $aQBnb.prototype.decode.call(this, input, options);
};

});



parcelRequire.register("lOJI7", function(module, exports) {
'use strict';
var $fe21b9ab6131bab9$var$base = module.exports;

$fe21b9ab6131bab9$var$base.Reporter = (parcelRequire("jTqkv")).Reporter;

$fe21b9ab6131bab9$var$base.DecoderBuffer = (parcelRequire("b5hZc")).DecoderBuffer;

$fe21b9ab6131bab9$var$base.EncoderBuffer = (parcelRequire("b5hZc")).EncoderBuffer;

$fe21b9ab6131bab9$var$base.Node = (parcelRequire("itNl8"));

});

parcelRequire.register("JCK3h", function(module, exports) {
'use strict';
var $089241648439b024$var$constants = module.exports;
// Helper
$089241648439b024$var$constants._reverse = function reverse(map) {
    var res = {};
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        var value = map[key];
        res[value] = key;
    });
    return res;
};

$089241648439b024$var$constants.der = (parcelRequire("kSw01"));

});


parcelRequire.register("4sSWb", function(module, exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen
'use strict';

var $deYI8 = parcelRequire("deYI8");
var $3404646118241287$var$Time = $deYI8.define('Time', function() {
    this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
    });
});
var $3404646118241287$var$AttributeTypeValue = $deYI8.define('AttributeTypeValue', function() {
    this.seq().obj(this.key('type').objid(), this.key('value').any());
});
var $3404646118241287$var$AlgorithmIdentifier = $deYI8.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('parameters').optional(), this.key('curve').objid().optional());
});
var $3404646118241287$var$SubjectPublicKeyInfo = $deYI8.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use($3404646118241287$var$AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
var $3404646118241287$var$RelativeDistinguishedName = $deYI8.define('RelativeDistinguishedName', function() {
    this.setof($3404646118241287$var$AttributeTypeValue);
});
var $3404646118241287$var$RDNSequence = $deYI8.define('RDNSequence', function() {
    this.seqof($3404646118241287$var$RelativeDistinguishedName);
});
var $3404646118241287$var$Name = $deYI8.define('Name', function() {
    this.choice({
        rdnSequence: this.use($3404646118241287$var$RDNSequence)
    });
});
var $3404646118241287$var$Validity = $deYI8.define('Validity', function() {
    this.seq().obj(this.key('notBefore').use($3404646118241287$var$Time), this.key('notAfter').use($3404646118241287$var$Time));
});
var $3404646118241287$var$Extension = $deYI8.define('Extension', function() {
    this.seq().obj(this.key('extnID').objid(), this.key('critical').bool().def(false), this.key('extnValue').octstr());
});
var $3404646118241287$var$TBSCertificate = $deYI8.define('TBSCertificate', function() {
    this.seq().obj(this.key('version').explicit(0).int().optional(), this.key('serialNumber').int(), this.key('signature').use($3404646118241287$var$AlgorithmIdentifier), this.key('issuer').use($3404646118241287$var$Name), this.key('validity').use($3404646118241287$var$Validity), this.key('subject').use($3404646118241287$var$Name), this.key('subjectPublicKeyInfo').use($3404646118241287$var$SubjectPublicKeyInfo), this.key('issuerUniqueID').implicit(1).bitstr().optional(), this.key('subjectUniqueID').implicit(2).bitstr().optional(), this.key('extensions').explicit(3).seqof($3404646118241287$var$Extension).optional());
});
var $3404646118241287$var$X509Certificate = $deYI8.define('X509Certificate', function() {
    this.seq().obj(this.key('tbsCertificate').use($3404646118241287$var$TBSCertificate), this.key('signatureAlgorithm').use($3404646118241287$var$AlgorithmIdentifier), this.key('signatureValue').bitstr());
});
module.exports = $3404646118241287$var$X509Certificate;

});


parcelRequire.register("fhSMH", function(module, exports) {
module.exports = JSON.parse("{\"2.16.840.1.101.3.4.1.1\":\"aes-128-ecb\",\"2.16.840.1.101.3.4.1.2\":\"aes-128-cbc\",\"2.16.840.1.101.3.4.1.3\":\"aes-128-ofb\",\"2.16.840.1.101.3.4.1.4\":\"aes-128-cfb\",\"2.16.840.1.101.3.4.1.21\":\"aes-192-ecb\",\"2.16.840.1.101.3.4.1.22\":\"aes-192-cbc\",\"2.16.840.1.101.3.4.1.23\":\"aes-192-ofb\",\"2.16.840.1.101.3.4.1.24\":\"aes-192-cfb\",\"2.16.840.1.101.3.4.1.41\":\"aes-256-ecb\",\"2.16.840.1.101.3.4.1.42\":\"aes-256-cbc\",\"2.16.840.1.101.3.4.1.43\":\"aes-256-ofb\",\"2.16.840.1.101.3.4.1.44\":\"aes-256-cfb\"}");

});

parcelRequire.register("3n1O4", function(module, exports) {
// adapted from https://github.com/apatil/pemstrip
var $2744ebd105a1bf96$var$findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
var $2744ebd105a1bf96$var$startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
var $2744ebd105a1bf96$var$fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;

var $hQ9sa = parcelRequire("hQ9sa");

var $2OZGO = parcelRequire("2OZGO");

var $6DGcH = parcelRequire("6DGcH");
var $2744ebd105a1bf96$require$Buffer = $6DGcH.Buffer;
module.exports = function(okey, password) {
    var key = okey.toString();
    var match = key.match($2744ebd105a1bf96$var$findProc);
    var decrypted;
    if (!match) {
        var match2 = key.match($2744ebd105a1bf96$var$fullRegex);
        decrypted = $2744ebd105a1bf96$require$Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64');
    } else {
        var suite = 'aes' + match[1];
        var iv = $2744ebd105a1bf96$require$Buffer.from(match[2], 'hex');
        var cipherText = $2744ebd105a1bf96$require$Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64');
        var cipherKey = $hQ9sa(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = $2OZGO.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = $2744ebd105a1bf96$require$Buffer.concat(out);
    }
    var tag = key.match($2744ebd105a1bf96$var$startRegex)[1];
    return {
        tag: tag,
        data: decrypted
    };
};

});


parcelRequire.register("cUEXt", function(module, exports) {
module.exports = JSON.parse("{\"1.3.132.0.10\":\"secp256k1\",\"1.3.132.0.33\":\"p224\",\"1.2.840.10045.3.1.1\":\"p192\",\"1.2.840.10045.3.1.7\":\"p256\",\"1.3.132.0.34\":\"p384\",\"1.3.132.0.35\":\"p521\"}");

});


parcelRequire.register("iipMK", function(module, exports) {

var $6DGcH = parcelRequire("6DGcH");
var $d51de8d6a4d1ba81$require$Buffer = $6DGcH.Buffer;

var $7W4xt = parcelRequire("7W4xt");

var $aSFVr = parcelRequire("aSFVr");
var $d51de8d6a4d1ba81$require$EC = $aSFVr.ec;

var $c1Cul = parcelRequire("c1Cul");

var $cUEXt = parcelRequire("cUEXt");
function $d51de8d6a4d1ba81$var$verify(sig, hash, key, signType, tag) {
    var pub = $c1Cul(key);
    if (pub.type === 'ec') {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
        return $d51de8d6a4d1ba81$var$ecVerify(sig, hash, pub);
    } else if (pub.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong public key type');
        return $d51de8d6a4d1ba81$var$dsaVerify(sig, hash, pub);
    } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
    }
    hash = $d51de8d6a4d1ba81$require$Buffer.concat([
        tag,
        hash
    ]);
    var len = pub.modulus.byteLength();
    var pad = [
        1
    ];
    var padNum = 0;
    while(hash.length + pad.length + 2 < len){
        pad.push(0xff);
        padNum++;
    }
    pad.push(0x00);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    pad = $d51de8d6a4d1ba81$require$Buffer.from(pad);
    var red = $7W4xt.mont(pub.modulus);
    sig = new $7W4xt(sig).toRed(red);
    sig = sig.redPow(new $7W4xt(pub.publicExponent));
    sig = $d51de8d6a4d1ba81$require$Buffer.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length) out = 1;
    i = -1;
    while(++i < len)out |= sig[i] ^ pad[i];
    return out === 0;
}
function $d51de8d6a4d1ba81$var$ecVerify(sig, hash, pub) {
    var curveId = $cUEXt[pub.data.algorithm.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));
    var curve = new $d51de8d6a4d1ba81$require$EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve.verify(hash, sig, pubkey);
}
function $d51de8d6a4d1ba81$var$dsaVerify(sig, hash, pub) {
    var p = pub.data.p;
    var q = pub.data.q;
    var g = pub.data.g;
    var y = pub.data.pub_key;
    var unpacked = $c1Cul.signature.decode(sig, 'der');
    var s = unpacked.s;
    var r = unpacked.r;
    $d51de8d6a4d1ba81$var$checkValue(s, q);
    $d51de8d6a4d1ba81$var$checkValue(r, q);
    var montp = $7W4xt.mont(p);
    var w = s.invm(q);
    var v = g.toRed(montp).redPow(new $7W4xt(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
    return v.cmp(r) === 0;
}
function $d51de8d6a4d1ba81$var$checkValue(b, q) {
    if (b.cmpn(0) <= 0) throw new Error('invalid sig');
    if (b.cmp(q) >= q) throw new Error('invalid sig');
}
module.exports = $d51de8d6a4d1ba81$var$verify;

});


parcelRequire.register("5ADd5", function(module, exports) {

var $5vuHX = parcelRequire("5vuHX");
var $411ebad594e85015$require$Buffer = $5vuHX.Buffer;

var $aSFVr = parcelRequire("aSFVr");

var $ek2tU = parcelRequire("ek2tU");
module.exports = function createECDH(curve) {
    return new $411ebad594e85015$var$ECDH(curve);
};
var $411ebad594e85015$var$aliases = {
    secp256k1: {
        name: 'secp256k1',
        byteLength: 32
    },
    secp224r1: {
        name: 'p224',
        byteLength: 28
    },
    prime256v1: {
        name: 'p256',
        byteLength: 32
    },
    prime192v1: {
        name: 'p192',
        byteLength: 24
    },
    ed25519: {
        name: 'ed25519',
        byteLength: 32
    },
    secp384r1: {
        name: 'p384',
        byteLength: 48
    },
    secp521r1: {
        name: 'p521',
        byteLength: 66
    }
};
$411ebad594e85015$var$aliases.p224 = $411ebad594e85015$var$aliases.secp224r1;
$411ebad594e85015$var$aliases.p256 = $411ebad594e85015$var$aliases.secp256r1 = $411ebad594e85015$var$aliases.prime256v1;
$411ebad594e85015$var$aliases.p192 = $411ebad594e85015$var$aliases.secp192r1 = $411ebad594e85015$var$aliases.prime192v1;
$411ebad594e85015$var$aliases.p384 = $411ebad594e85015$var$aliases.secp384r1;
$411ebad594e85015$var$aliases.p521 = $411ebad594e85015$var$aliases.secp521r1;
function $411ebad594e85015$var$ECDH(curve) {
    this.curveType = $411ebad594e85015$var$aliases[curve];
    if (!this.curveType) this.curveType = {
        name: curve
    };
    this.curve = new $aSFVr.ec(this.curveType.name) // eslint-disable-line new-cap
    ;
    this.keys = void 0;
}
$411ebad594e85015$var$ECDH.prototype.generateKeys = function(enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format);
};
$411ebad594e85015$var$ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || 'utf8';
    if (!$411ebad594e85015$require$Buffer.isBuffer(other)) other = new $411ebad594e85015$require$Buffer(other, inenc);
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return $411ebad594e85015$var$formatReturnValue(out, enc, this.curveType.byteLength);
};
$411ebad594e85015$var$ECDH.prototype.getPublicKey = function(enc, format) {
    var key = this.keys.getPublic(format === 'compressed', true);
    if (format === 'hybrid') {
        if (key[key.length - 1] % 2) key[0] = 7;
        else key[0] = 6;
    }
    return $411ebad594e85015$var$formatReturnValue(key, enc);
};
$411ebad594e85015$var$ECDH.prototype.getPrivateKey = function(enc) {
    return $411ebad594e85015$var$formatReturnValue(this.keys.getPrivate(), enc);
};
$411ebad594e85015$var$ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || 'utf8';
    if (!$411ebad594e85015$require$Buffer.isBuffer(pub)) pub = new $411ebad594e85015$require$Buffer(pub, enc);
    this.keys._importPublic(pub);
    return this;
};
$411ebad594e85015$var$ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || 'utf8';
    if (!$411ebad594e85015$require$Buffer.isBuffer(priv)) priv = new $411ebad594e85015$require$Buffer(priv, enc);
    var _priv = new $ek2tU(priv);
    _priv = _priv.toString(16);
    this.keys = this.curve.genKeyPair();
    this.keys._importPrivate(_priv);
    return this;
};
function $411ebad594e85015$var$formatReturnValue(bn, enc, len) {
    if (!Array.isArray(bn)) bn = bn.toArray();
    var buf = new $411ebad594e85015$require$Buffer(bn);
    if (len && buf.length < len) {
        var zeros = new $411ebad594e85015$require$Buffer(len - buf.length);
        zeros.fill(0);
        buf = $411ebad594e85015$require$Buffer.concat([
            zeros,
            buf
        ]);
    }
    if (!enc) return buf;
    else return buf.toString(enc);
}

});

parcelRequire.register("giux8", function(module, exports) {

$parcel$export(module.exports, "publicEncrypt", function () { return $bdd60317714774ef$export$512823e338ddb1b7; }, function (v) { return $bdd60317714774ef$export$512823e338ddb1b7 = v; });
$parcel$export(module.exports, "privateDecrypt", function () { return $bdd60317714774ef$export$7efb24e2fddf99b9; }, function (v) { return $bdd60317714774ef$export$7efb24e2fddf99b9 = v; });
$parcel$export(module.exports, "privateEncrypt", function () { return $bdd60317714774ef$export$9d0e0c0c4a8d30f3; }, function (v) { return $bdd60317714774ef$export$9d0e0c0c4a8d30f3 = v; });
$parcel$export(module.exports, "publicDecrypt", function () { return $bdd60317714774ef$export$b9d55ff329113abd; }, function (v) { return $bdd60317714774ef$export$b9d55ff329113abd = v; });
var $bdd60317714774ef$export$512823e338ddb1b7;
var $bdd60317714774ef$export$7efb24e2fddf99b9;
var $bdd60317714774ef$export$9d0e0c0c4a8d30f3;
var $bdd60317714774ef$export$b9d55ff329113abd;

$bdd60317714774ef$export$512823e338ddb1b7 = (parcelRequire("ecHy1"));

$bdd60317714774ef$export$7efb24e2fddf99b9 = (parcelRequire("ekLQX"));
$bdd60317714774ef$export$9d0e0c0c4a8d30f3 = function privateEncrypt(key, buf) {
    return $bdd60317714774ef$export$512823e338ddb1b7(key, buf, true);
};
$bdd60317714774ef$export$b9d55ff329113abd = function publicDecrypt(key, buf) {
    return $bdd60317714774ef$export$7efb24e2fddf99b9(key, buf, true);
};

});
parcelRequire.register("ecHy1", function(module, exports) {

var $c1Cul = parcelRequire("c1Cul");

var $1umH4 = parcelRequire("1umH4");

var $c9fiB = parcelRequire("c9fiB");

var $2vLki = parcelRequire("2vLki");

var $lRkD6 = parcelRequire("lRkD6");

var $ek2tU = parcelRequire("ek2tU");

var $9tGjq = parcelRequire("9tGjq");

var $1sFyv = parcelRequire("1sFyv");

var $6DGcH = parcelRequire("6DGcH");
var $a573f75d18c223e4$require$Buffer = $6DGcH.Buffer;
module.exports = function publicEncrypt(publicKey, msg, reverse) {
    var padding;
    if (publicKey.padding) padding = publicKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = $c1Cul(publicKey);
    var paddedMsg;
    if (padding === 4) paddedMsg = $a573f75d18c223e4$var$oaep(key, msg);
    else if (padding === 1) paddedMsg = $a573f75d18c223e4$var$pkcs1(key, msg, reverse);
    else if (padding === 3) {
        paddedMsg = new $ek2tU(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) throw new Error('data too long for modulus');
    } else throw new Error('unknown padding');
    if (reverse) return $1sFyv(paddedMsg, key);
    else return $9tGjq(paddedMsg, key);
};
function $a573f75d18c223e4$var$oaep(key, msg) {
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = $c9fiB('sha1').update($a573f75d18c223e4$require$Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k - hLen2 - 2) throw new Error('message too long');
    var ps = $a573f75d18c223e4$require$Buffer.alloc(k - mLen - hLen2 - 2);
    var dblen = k - hLen - 1;
    var seed = $1umH4(hLen);
    var maskedDb = $lRkD6($a573f75d18c223e4$require$Buffer.concat([
        iHash,
        ps,
        $a573f75d18c223e4$require$Buffer.alloc(1, 1),
        msg
    ], dblen), $2vLki(seed, dblen));
    var maskedSeed = $lRkD6(seed, $2vLki(maskedDb, hLen));
    return new $ek2tU($a573f75d18c223e4$require$Buffer.concat([
        $a573f75d18c223e4$require$Buffer.alloc(1),
        maskedSeed,
        maskedDb
    ], k));
}
function $a573f75d18c223e4$var$pkcs1(key, msg, reverse) {
    var mLen = msg.length;
    var k = key.modulus.byteLength();
    if (mLen > k - 11) throw new Error('message too long');
    var ps;
    if (reverse) ps = $a573f75d18c223e4$require$Buffer.alloc(k - mLen - 3, 0xff);
    else ps = $a573f75d18c223e4$var$nonZero(k - mLen - 3);
    return new $ek2tU($a573f75d18c223e4$require$Buffer.concat([
        $a573f75d18c223e4$require$Buffer.from([
            0,
            reverse ? 1 : 2
        ]),
        ps,
        $a573f75d18c223e4$require$Buffer.alloc(1),
        msg
    ], k));
}
function $a573f75d18c223e4$var$nonZero(len) {
    var out = $a573f75d18c223e4$require$Buffer.allocUnsafe(len);
    var i = 0;
    var cache = $1umH4(len * 2);
    var cur = 0;
    var num;
    while(i < len){
        if (cur === cache.length) {
            cache = $1umH4(len * 2);
            cur = 0;
        }
        num = cache[cur++];
        if (num) out[i++] = num;
    }
    return out;
}

});
parcelRequire.register("2vLki", function(module, exports) {

var $c9fiB = parcelRequire("c9fiB");

var $6DGcH = parcelRequire("6DGcH");
var $1d43300b8432ed76$require$Buffer = $6DGcH.Buffer;
module.exports = function(seed, len) {
    var t = $1d43300b8432ed76$require$Buffer.alloc(0);
    var i = 0;
    var c;
    while(t.length < len){
        c = $1d43300b8432ed76$var$i2ops(i++);
        t = $1d43300b8432ed76$require$Buffer.concat([
            t,
            $c9fiB('sha1').update(seed).update(c).digest()
        ]);
    }
    return t.slice(0, len);
};
function $1d43300b8432ed76$var$i2ops(c) {
    var out = $1d43300b8432ed76$require$Buffer.allocUnsafe(4);
    out.writeUInt32BE(c, 0);
    return out;
}

});

parcelRequire.register("lRkD6", function(module, exports) {
module.exports = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while(++i < len)a[i] ^= b[i];
    return a;
};

});

parcelRequire.register("9tGjq", function(module, exports) {

var $ek2tU = parcelRequire("ek2tU");

var $6DGcH = parcelRequire("6DGcH");
var $6e67a4d3bc60e7dc$require$Buffer = $6DGcH.Buffer;
function $6e67a4d3bc60e7dc$var$withPublic(paddedMsg, key) {
    return $6e67a4d3bc60e7dc$require$Buffer.from(paddedMsg.toRed($ek2tU.mont(key.modulus)).redPow(new $ek2tU(key.publicExponent)).fromRed().toArray());
}
module.exports = $6e67a4d3bc60e7dc$var$withPublic;

});


parcelRequire.register("ekLQX", function(module, exports) {

var $c1Cul = parcelRequire("c1Cul");

var $2vLki = parcelRequire("2vLki");

var $lRkD6 = parcelRequire("lRkD6");

var $ek2tU = parcelRequire("ek2tU");

var $1sFyv = parcelRequire("1sFyv");

var $c9fiB = parcelRequire("c9fiB");

var $9tGjq = parcelRequire("9tGjq");

var $6DGcH = parcelRequire("6DGcH");
var $a6f80d964e995df1$require$Buffer = $6DGcH.Buffer;
module.exports = function privateDecrypt(privateKey, enc, reverse) {
    var padding;
    if (privateKey.padding) padding = privateKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = $c1Cul(privateKey);
    var k = key.modulus.byteLength();
    if (enc.length > k || new $ek2tU(enc).cmp(key.modulus) >= 0) throw new Error('decryption error');
    var msg;
    if (reverse) msg = $9tGjq(new $ek2tU(enc), key);
    else msg = $1sFyv(enc, key);
    var zBuffer = $a6f80d964e995df1$require$Buffer.alloc(k - msg.length);
    msg = $a6f80d964e995df1$require$Buffer.concat([
        zBuffer,
        msg
    ], k);
    if (padding === 4) return $a6f80d964e995df1$var$oaep(key, msg);
    else if (padding === 1) return $a6f80d964e995df1$var$pkcs1(key, msg, reverse);
    else if (padding === 3) return msg;
    else throw new Error('unknown padding');
};
function $a6f80d964e995df1$var$oaep(key, msg) {
    var k = key.modulus.byteLength();
    var iHash = $c9fiB('sha1').update($a6f80d964e995df1$require$Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) throw new Error('decryption error');
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = $lRkD6(maskedSeed, $2vLki(maskedDb, hLen));
    var db = $lRkD6(maskedDb, $2vLki(seed, k - hLen - 1));
    if ($a6f80d964e995df1$var$compare(iHash, db.slice(0, hLen))) throw new Error('decryption error');
    var i = hLen;
    while(db[i] === 0)i++;
    if (db[i++] !== 1) throw new Error('decryption error');
    return db.slice(i);
}
function $a6f80d964e995df1$var$pkcs1(key, msg, reverse) {
    var p1 = msg.slice(0, 2);
    var i = 2;
    var status = 0;
    while(msg[i++] !== 0)if (i >= msg.length) {
        status++;
        break;
    }
    var ps = msg.slice(2, i - 1);
    if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) status++;
    if (ps.length < 8) status++;
    if (status) throw new Error('decryption error');
    return msg.slice(i);
}
function $a6f80d964e995df1$var$compare(a, b) {
    a = $a6f80d964e995df1$require$Buffer.from(a);
    b = $a6f80d964e995df1$require$Buffer.from(b);
    var dif = 0;
    var len = a.length;
    if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
    }
    var i = -1;
    while(++i < len)dif += a[i] ^ b[i];
    return dif;
}

});


parcelRequire.register("fLF50", function(module, exports) {

$parcel$export(module.exports, "randomFill", function () { return $b7ab1c62106d0b53$export$bb1abf2ce84fc7e8; }, function (v) { return $b7ab1c62106d0b53$export$bb1abf2ce84fc7e8 = v; });
$parcel$export(module.exports, "randomFillSync", function () { return $b7ab1c62106d0b53$export$2f7171e78e524d5e; }, function (v) { return $b7ab1c62106d0b53$export$2f7171e78e524d5e = v; });
var $b7ab1c62106d0b53$export$bb1abf2ce84fc7e8;
var $b7ab1c62106d0b53$export$2f7171e78e524d5e;
'use strict';

var $iUMdb = parcelRequire("iUMdb");
function $b7ab1c62106d0b53$var$oldBrowser() {
    throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
}

var $6DGcH = parcelRequire("6DGcH");

var $1umH4 = parcelRequire("1umH4");
var $b7ab1c62106d0b53$var$Buffer = $6DGcH.Buffer;
var $b7ab1c62106d0b53$var$kBufferMaxLength = $6DGcH.kMaxLength;
var $b7ab1c62106d0b53$var$crypto = $parcel$global.crypto || $parcel$global.msCrypto;
var $b7ab1c62106d0b53$var$kMaxUint32 = Math.pow(2, 32) - 1;
function $b7ab1c62106d0b53$var$assertOffset(offset, length) {
    if (typeof offset !== 'number' || offset !== offset) throw new TypeError('offset must be a number');
    if (offset > $b7ab1c62106d0b53$var$kMaxUint32 || offset < 0) throw new TypeError('offset must be a uint32');
    if (offset > $b7ab1c62106d0b53$var$kBufferMaxLength || offset > length) throw new RangeError('offset out of range');
}
function $b7ab1c62106d0b53$var$assertSize(size, offset, length) {
    if (typeof size !== 'number' || size !== size) throw new TypeError('size must be a number');
    if (size > $b7ab1c62106d0b53$var$kMaxUint32 || size < 0) throw new TypeError('size must be a uint32');
    if (size + offset > length || size > $b7ab1c62106d0b53$var$kBufferMaxLength) throw new RangeError('buffer too small');
}
if ($b7ab1c62106d0b53$var$crypto && $b7ab1c62106d0b53$var$crypto.getRandomValues || false) {
    $b7ab1c62106d0b53$export$bb1abf2ce84fc7e8 = $b7ab1c62106d0b53$var$randomFill;
    $b7ab1c62106d0b53$export$2f7171e78e524d5e = $b7ab1c62106d0b53$var$randomFillSync;
} else {
    $b7ab1c62106d0b53$export$bb1abf2ce84fc7e8 = $b7ab1c62106d0b53$var$oldBrowser;
    $b7ab1c62106d0b53$export$2f7171e78e524d5e = $b7ab1c62106d0b53$var$oldBrowser;
}
function $b7ab1c62106d0b53$var$randomFill(buf, offset, size, cb) {
    if (!$b7ab1c62106d0b53$var$Buffer.isBuffer(buf) && !(buf instanceof $parcel$global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    if (typeof offset === 'function') {
        cb = offset;
        offset = 0;
        size = buf.length;
    } else if (typeof size === 'function') {
        cb = size;
        size = buf.length - offset;
    } else if (typeof cb !== 'function') throw new TypeError('"cb" argument must be a function');
    $b7ab1c62106d0b53$var$assertOffset(offset, buf.length);
    $b7ab1c62106d0b53$var$assertSize(size, offset, buf.length);
    return $b7ab1c62106d0b53$var$actualFill(buf, offset, size, cb);
}
function $b7ab1c62106d0b53$var$actualFill(buf, offset, size, cb) {
    var ourBuf = buf.buffer;
    var uint = new Uint8Array(ourBuf, offset, size);
    $b7ab1c62106d0b53$var$crypto.getRandomValues(uint);
    if (cb) {
        $iUMdb.nextTick(function() {
            cb(null, buf);
        });
        return;
    }
    return buf;
    if (cb) {
        $1umH4(size, function(err, bytes) {
            if (err) return cb(err);
            bytes.copy(buf, offset);
            cb(null, buf);
        });
        return;
    }
    var bytes1 = $1umH4(size);
    bytes1.copy(buf, offset);
    return buf;
}
function $b7ab1c62106d0b53$var$randomFillSync(buf, offset, size) {
    if (typeof offset === 'undefined') offset = 0;
    if (!$b7ab1c62106d0b53$var$Buffer.isBuffer(buf) && !(buf instanceof $parcel$global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    $b7ab1c62106d0b53$var$assertOffset(offset, buf.length);
    if (size === undefined) size = buf.length - offset;
    $b7ab1c62106d0b53$var$assertSize(size, offset, buf.length);
    return $b7ab1c62106d0b53$var$actualFill(buf, offset, size);
}

});


parcelRequire.register("cYEEb", function(module, exports) {

$parcel$export(module.exports, "WorkerTool", function () { return $f4079b0ece69be75$export$39229950d9f3cd80; });
parcelRequire("6vt9n");
var $347Dd = parcelRequire("347Dd");
var $gTmwS = parcelRequire("gTmwS");
var $bguNN = parcelRequire("bguNN");
var $9v3E5 = parcelRequire("9v3E5");

var $9dvvU = parcelRequire("9dvvU");

var $2xfx7 = parcelRequire("2xfx7");
parcelRequire("1Nhm1");
var $9from = parcelRequire("9from");

var $1IjS8 = parcelRequire("1IjS8");

var $aghNo = parcelRequire("aghNo");

var $hq89M = parcelRequire("hq89M");

var $4aKPk = parcelRequire("4aKPk");

var $eAxv7 = parcelRequire("eAxv7");
var $f4079b0ece69be75$export$39229950d9f3cd80 = /*#__PURE__*/ function() {
    "use strict";
    function $f4079b0ece69be75$export$39229950d9f3cd80(id) {
        $347Dd.default(this, $f4079b0ece69be75$export$39229950d9f3cd80);
        this.id = id;
        this.storages = {};
        this.isStorageMounted = {};
        var _this = this;
        this.toolPromise = $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
            return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                while(1)switch(_ctx.prev = _ctx.next){
                    case 0:
                        _ctx.next = 2;
                        return _this.initialize();
                    case 2:
                        _this.tool = _ctx.sent;
                    case 3:
                    case "end":
                        return _ctx.stop();
                }
            }, _callee);
        }))();
        addEventListener('message', this.handleMessage.bind(this));
        addEventListener('messageerror', this.handleMessageError.bind(this));
    }
    $bguNN.default($f4079b0ece69be75$export$39229950d9f3cd80, [
        {
            key: "handleMessage",
            value: function handleMessage(event) {
                switch(event.data.type){
                    case 'init':
                        this.init(event.data);
                        break;
                    case 'storage':
                        this.updateStorage(event.data);
                        break;
                    case 'call':
                        this.call(event.data);
                        break;
                }
            }
        },
        {
            key: "handleMessageError",
            value: function handleMessageError(event) {
                console.error('Failed to deserialize worker message.', event);
            }
        },
        {
            key: "init",
            value: function init(message) {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _this.sharedBuffer = message.sharedBuffer;
                                _this.arrayInt32 = new Int32Array(_this.sharedBuffer);
                                _this.lockFs = new $eAxv7.Mutex(_this.arrayInt32, $aghNo.INDEX_FS_LOCK);
                                _this.lockWorker = new $eAxv7.Mutex(_this.arrayInt32, $aghNo.INDEX_WORKER_LOCK);
                                _this.data = new $hq89M.Data(_this.sharedBuffer, $aghNo.INDEX_DATA * 4);
                                _this.portFs = message.portFs;
                                if (_this.tool) {
                                    _ctx.next = 9;
                                    break;
                                }
                                _ctx.next = 9;
                                return _this.toolPromise;
                            case 9:
                                // Initialize file system
                                _this.fs = _this.tool.getFS();
                                _this.storageFs = $4aKPk.createStorageFS(_this.fs, _this);
                                _this.fs.mkdir('/storages');
                                _this.mountStorages();
                            case 13:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "updateStorage",
            value: function updateStorage(message) {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    var storage;
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                storage = $2xfx7.deserializeState(message.storage);
                                _this.storages[storage.getID()] = storage;
                                _this.mountStorages();
                            case 3:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "mountStorages",
            value: function mountStorages() {
                if (!this.fs) return;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = Object.keys(this.storages)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var storageId = _step.value;
                        if (!this.isStorageMounted[storageId]) {
                            var path = "/storages/".concat(storageId);
                            this.fs.mkdir(path);
                            this.fs.mount(this.storageFs, {
                                storageId: storageId
                            }, path);
                            this.isStorageMounted[storageId] = true;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "call",
            value: function call(message) {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    var storage, file, directory, filePath, directoryPath, result;
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                storage = _this.storages[message.storageId];
                                if (storage) {
                                    _ctx.next = 3;
                                    break;
                                }
                                throw new Error('Unknown storage "'.concat(message.storageId, '".'));
                            case 3:
                                _ctx.next = 5;
                                return storage.getEntry(message.path);
                            case 5:
                                file = _ctx.sent;
                                if (file instanceof $9from.StorageFile) {
                                    _ctx.next = 8;
                                    break;
                                }
                                throw new Error('Storage entry is not a file.');
                            case 8:
                                if (_this.tool) {
                                    _ctx.next = 11;
                                    break;
                                }
                                _ctx.next = 11;
                                return _this.toolPromise;
                            case 11:
                                directory = file.getParent();
                                filePath = "/storages/".concat(file.getFullPath());
                                directoryPath = "/storages/".concat(directory.getFullPath());
                                _ctx.next = 16;
                                return _this.execute(filePath, file, directoryPath, directory);
                            case 16:
                                result = _ctx.sent;
                                postMessage({
                                    id: message.id,
                                    result: result
                                });
                            case 18:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "callFs",
            value: function callFs(storageId, path, operation, args) {
                $1IjS8.debug('fs', "worker ".concat(this.id, " is waiting for lock..."));
                // Acquire worker lock
                this.lockWorker.acquire();
                $1IjS8.debug('fs', "worker ".concat(this.id, " has lock"));
                // Acquire FS lock
                this.lockFs.acquire();
                this.portFs.postMessage($9v3E5.default({
                    type: 'call',
                    storageId: storageId,
                    path: path,
                    operation: operation
                }, args));
                // Release of FS lock
                this.lockFs.release();
                $1IjS8.debug('fs', "worker ".concat(this.id, " is waiting for response..."));
                // Wait for worker notify
                Atomics.wait(this.arrayInt32, $aghNo.INDEX_WORKER_NOTIFY, 0);
                // Read response from data buffer
                this.data.resetOffset();
                var result;
                // Check if the response was an error
                var errorCode = this.data.readUint8();
                if (errorCode > 0) throw new Error("FS error: ".concat(this.data.readString()));
                // Read data
                switch(operation){
                    case 'readdir':
                        result = this.data.readStringArray();
                        break;
                    case 'stat':
                        result = [
                            this.data.readUint8(),
                            this.data.readUint32()
                        ];
                        break;
                    case 'read':
                        result = this.data.readUint8Array();
                        break;
                }
                // Clear data buffer
                this.data.clear();
                $1IjS8.debug('fs', "worker ".concat(this.id, " received"), result);
                // Release worker lock
                this.lockWorker.release();
                $1IjS8.debug('fs', "worker ".concat(this.id, " is done"));
                return result;
            }
        }
    ]);
    return $f4079b0ece69be75$export$39229950d9f3cd80;
}();

});
parcelRequire.register("9dvvU", function(module, exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var $6b5dc5e751f62da0$var$runtime = function(exports) {
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        return obj[key];
    }
    try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
    } catch (err1) {
        define = function define(obj, key, value) {
            return obj[key] = value;
        };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
    }
    exports.wrap = wrap;
    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
        try {
            return {
                type: "normal",
                arg: fn.call(obj, arg)
            };
        } catch (err) {
            return {
                type: "throw",
                arg: err
            };
        }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};
    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function() {
        return this;
    });
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define(Gp, "constructor", GeneratorFunctionPrototype);
    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
        [
            "next",
            "throw",
            "return"
        ].forEach(function(method) {
            define(prototype, method, function(arg) {
                return this._invoke(method, arg);
            });
        });
    }
    exports.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports.mark = function(genFun) {
        if (Object.setPrototypeOf) Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
    };
    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
        return {
            __await: arg
        };
    };
    function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type === "throw") reject(record.arg);
            else {
                var result = record.arg;
                var value1 = result.value;
                if (value1 && typeof value1 === "object" && hasOwn.call(value1, "__await")) return PromiseImpl.resolve(value1.__await).then(function(value) {
                    invoke("next", value, resolve, reject);
                }, function(err) {
                    invoke("throw", err, resolve, reject);
                });
                return PromiseImpl.resolve(value1).then(function(unwrapped) {
                    // When a yielded Promise is resolved, its final value becomes
                    // the .value of the Promise<{value,done}> result for the
                    // current iteration.
                    result.value = unwrapped;
                    resolve(result);
                }, function(error) {
                    // If a rejected Promise was yielded, throw the rejection back
                    // into the async generator function so it can be handled there.
                    return invoke("throw", error, resolve, reject);
                });
            }
        }
        var previousPromise;
        function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                });
            }
            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
    }
    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
    });
    exports.AsyncIterator = AsyncIterator;
    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
         : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
    };
    function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
            if (state === GenStateExecuting) throw new Error("Generator is already running");
            if (state === GenStateCompleted) {
                if (method === "throw") throw arg;
                // Be forgiving, per 25.3.3.3.3 of the spec:
                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                return doneResult();
            }
            context.method = method;
            context.arg = arg;
            while(true){
                var delegate = context.delegate;
                if (delegate) {
                    var delegateResult = maybeInvokeDelegate(delegate, context);
                    if (delegateResult) {
                        if (delegateResult === ContinueSentinel) continue;
                        return delegateResult;
                    }
                }
                if (context.method === "next") // Setting context._sent for legacy support of Babel's
                // function.sent implementation.
                context.sent = context._sent = context.arg;
                else if (context.method === "throw") {
                    if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                    }
                    context.dispatchException(context.arg);
                } else if (context.method === "return") context.abrupt("return", context.arg);
                state = GenStateExecuting;
                var record = tryCatch(innerFn, self, context);
                if (record.type === "normal") {
                    // If an exception is thrown from innerFn, we leave state ===
                    // GenStateExecuting and loop back for another invocation.
                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                    if (record.arg === ContinueSentinel) continue;
                    return {
                        value: record.arg,
                        done: context.done
                    };
                } else if (record.type === "throw") {
                    state = GenStateCompleted;
                    // Dispatch the exception by looping back around to the
                    // context.dispatchException(context.arg) call above.
                    context.method = "throw";
                    context.arg = record.arg;
                }
            }
        };
    }
    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined) {
            // A .throw or .return when the delegate iterator has no .throw
            // method always terminates the yield* loop.
            context.delegate = null;
            if (context.method === "throw") {
                // Note: ["return"] must be used for ES3 parsing compatibility.
                if (delegate.iterator["return"]) {
                    // If the delegate iterator has a return method, give it a
                    // chance to clean up.
                    context.method = "return";
                    context.arg = undefined;
                    maybeInvokeDelegate(delegate, context);
                    if (context.method === "throw") // If maybeInvokeDelegate(context) changed context.method from
                    // "return" to "throw", let that override the TypeError below.
                    return ContinueSentinel;
                }
                context.method = "throw";
                context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
        }
        var info = record.arg;
        if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
        }
        if (info.done) {
            // Assign the result of the finished delegate to the temporary
            // variable specified by delegate.resultName (see delegateYield).
            context[delegate.resultName] = info.value;
            // Resume execution at the desired location (see delegateYield).
            context.next = delegate.nextLoc;
            // If context.method was "throw" but the delegate handled the
            // exception, let the outer generator proceed normally. If
            // context.method was "next", forget context.arg since it has been
            // "consumed" by the delegate iterator. If context.method was
            // "return", allow the original .return call to continue in the
            // outer generator.
            if (context.method !== "return") {
                context.method = "next";
                context.arg = undefined;
            }
        } else // Re-yield the result returned by the delegate method.
        return info;
        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
    }
    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");
    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    define(Gp, iteratorSymbol, function() {
        return this;
    });
    define(Gp, "toString", function() {
        return "[object Generator]";
    });
    function pushTryEntry(locs) {
        var entry = {
            tryLoc: locs[0]
        };
        if (1 in locs) entry.catchLoc = locs[1];
        if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
    }
    function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [
            {
                tryLoc: "root"
            }
        ];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
    }
    exports.keys = function(object) {
        var keys = [];
        for(var key1 in object)keys.push(key1);
        keys.reverse();
        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
            while(keys.length){
                var key = keys.pop();
                if (key in object) {
                    next.value = key;
                    next.done = false;
                    return next;
                }
            }
            // To avoid creating an additional object, we just hang the .value
            // and .done properties off the next function object itself. This
            // also ensures that the minifier will not anonymize the function.
            next.done = true;
            return next;
        };
    };
    function values(iterable) {
        if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) return iteratorMethod.call(iterable);
            if (typeof iterable.next === "function") return iterable;
            if (!isNaN(iterable.length)) {
                var i = -1, next1 = function next() {
                    while(++i < iterable.length)if (hasOwn.call(iterable, i)) {
                        next.value = iterable[i];
                        next.done = false;
                        return next;
                    }
                    next.value = undefined;
                    next.done = true;
                    return next;
                };
                return next1.next = next1;
            }
        }
        // Return an iterator with no values.
        return {
            next: doneResult
        };
    }
    exports.values = values;
    function doneResult() {
        return {
            value: undefined,
            done: true
        };
    }
    Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            // Resetting context._sent for legacy support of Babel's
            // function.sent implementation.
            this.sent = this._sent = undefined;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
                for(var name in this)// Not sure about the optimal order of these conditions:
                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) this[name] = undefined;
            }
        },
        stop: function stop() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") throw rootRecord.arg;
            return this.rval;
        },
        dispatchException: function dispatchException(exception) {
            if (this.done) throw exception;
            var context = this;
            function handle(loc, caught) {
                record.type = "throw";
                record.arg = exception;
                context.next = loc;
                if (caught) {
                    // If the dispatched exception was caught by a catch block,
                    // then let that catch block handle the exception normally.
                    context.method = "next";
                    context.arg = undefined;
                }
                return !!caught;
            }
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                var record = entry.completion;
                if (entry.tryLoc === "root") // Exception thrown outside of any try block that could handle
                // it, so set the completion value of the entire function to
                // throw the exception.
                return handle("end");
                if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc");
                    var hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                        else if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                    } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else throw new Error("try statement without catch or finally");
                }
            }
        },
        abrupt: function abrupt(type, arg) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                }
            }
            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;
            if (finallyEntry) {
                this.method = "next";
                this.next = finallyEntry.finallyLoc;
                return ContinueSentinel;
            }
            return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
            if (record.type === "throw") throw record.arg;
            if (record.type === "break" || record.type === "continue") this.next = record.arg;
            else if (record.type === "return") {
                this.rval = this.arg = record.arg;
                this.method = "return";
                this.next = "end";
            } else if (record.type === "normal" && afterLoc) this.next = afterLoc;
            return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) {
                    this.complete(entry.completion, entry.afterLoc);
                    resetTryEntry(entry);
                    return ContinueSentinel;
                }
            }
        },
        "catch": function(tryLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                    }
                    return thrown;
                }
            }
            // The context.catch method must only be called with a location
            // argument that corresponds to a known catch block.
            throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
            };
            if (this.method === "next") // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined;
            return ContinueSentinel;
        }
    };
    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;
}(module.exports);
try {
    regeneratorRuntime = $6b5dc5e751f62da0$var$runtime;
} catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if (typeof globalThis === "object") globalThis.regeneratorRuntime = $6b5dc5e751f62da0$var$runtime;
    else Function("r", "regeneratorRuntime = r")($6b5dc5e751f62da0$var$runtime);
}

});

parcelRequire.register("2xfx7", function(module, exports) {

$parcel$export(module.exports, "getSerialId", function () { return $914bba84f2c01919$export$768bdae9291ced9b; });
$parcel$export(module.exports, "serialize", function () { return $914bba84f2c01919$export$dfdc1655ccc5b9cb; });
$parcel$export(module.exports, "deserialize", function () { return $914bba84f2c01919$export$efcd34ab6248d3cd; });
$parcel$export(module.exports, "serializable", function () { return $914bba84f2c01919$export$c1faf8344a396331; });
$parcel$export(module.exports, "deserializeState", function () { return $914bba84f2c01919$export$7ca8667598519375; });
parcelRequire("6vt9n");
var $9v3E5 = parcelRequire("9v3E5");
var $Kg1DN = parcelRequire("Kg1DN");
var $kpZXk = parcelRequire("kpZXk");
var $914bba84f2c01919$export$768bdae9291ced9b = Symbol('getSerialId');
var $914bba84f2c01919$export$dfdc1655ccc5b9cb = Symbol('serialize');
var $914bba84f2c01919$export$efcd34ab6248d3cd = Symbol('deserialize');
var $914bba84f2c01919$var$serializables = {};
var $914bba84f2c01919$export$c1faf8344a396331 = function(identifier) {
    return function(target) {
        $914bba84f2c01919$var$serializables[identifier] = target;
    };
};
var $914bba84f2c01919$export$fe8d49dd66e9fe47 = function(object) {
    return typeof object[$914bba84f2c01919$export$dfdc1655ccc5b9cb] === 'function';
};
var $914bba84f2c01919$export$8414966dbdbfc8a3 = function(state) {
    if (Array.isArray(state)) return state.map(function(value) {
        return $914bba84f2c01919$export$8414966dbdbfc8a3(value);
    });
    else if (typeof state === 'object' && state !== null) {
        if ($914bba84f2c01919$export$fe8d49dd66e9fe47(state)) return $9v3E5.default({
            __serialId__: state[$914bba84f2c01919$export$768bdae9291ced9b]()
        }, state[$914bba84f2c01919$export$dfdc1655ccc5b9cb]());
        else {
            var data = {};
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = Object.entries(state)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var _value = $Kg1DN.default(_step.value, 2), key = _value[0], value1 = _value[1];
                    data[key] = $914bba84f2c01919$export$8414966dbdbfc8a3(value1);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            return data;
        }
    } else return state;
};
var $914bba84f2c01919$export$7ca8667598519375 = function(data, partialState) {
    if (Array.isArray(data)) return data.map(function(value) {
        return $914bba84f2c01919$export$7ca8667598519375(value, partialState);
    });
    else if (typeof data === 'object' && data !== null) {
        if (typeof data.__serialId__ === 'string') {
            var id = data.__serialId__, serialized = $kpZXk.default(data, [
                "__serialId__"
            ]);
            var SerializableClass = $914bba84f2c01919$var$serializables[id];
            if (!SerializableClass) console.warn('Unknown seriazable ID "'.concat(id, '".'));
            var state = new SerializableClass();
            state[$914bba84f2c01919$export$efcd34ab6248d3cd](serialized, partialState);
            return state;
        } else {
            var state1 = {};
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = Object.entries(data)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var _value = $Kg1DN.default(_step.value, 2), key = _value[0], value2 = _value[1];
                    state1[key] = $914bba84f2c01919$export$7ca8667598519375(value2, partialState);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            return state1;
        }
    } else return data;
};

});

parcelRequire.register("1Nhm1", function(module, exports) {
$parcel$export(module.exports, "StorageType", function () { return (parcelRequire("EstAn")).StorageType; });
$parcel$export(module.exports, "StorageFSA", function () { return (parcelRequire("7rfxJ")).StorageFSA; });
$parcel$export(module.exports, "StorageDirectory", function () { return (parcelRequire("9from")).StorageDirectory; });
$parcel$export(module.exports, "StorageFile", function () { return (parcelRequire("9from")).StorageFile; });
parcelRequire("6vt9n");
var $gFyhy = parcelRequire("gFyhy");

var $EstAn = parcelRequire("EstAn");

var $7rfxJ = parcelRequire("7rfxJ");
parcelRequire("9from");

var $EstAn = parcelRequire("EstAn");

var $7rfxJ = parcelRequire("7rfxJ");
var $5f10686625c465f0$export$ffbf50e09d99dcf1 = $gFyhy.default({}, $EstAn.StorageType.FILE_SYSTEM_ACCESS, $7rfxJ.StorageFSA);

});
parcelRequire.register("EstAn", function(module, exports) {

$parcel$export(module.exports, "StorageType", function () { return $70ca3b575a653bf1$export$d5f3ec63cad061d9; });
var $70ca3b575a653bf1$export$d5f3ec63cad061d9;
(function($70ca3b575a653bf1$export$d5f3ec63cad061d9) {
    $70ca3b575a653bf1$export$d5f3ec63cad061d9["FILE_SYSTEM_ACCESS"] = "FILE_SYSTEM_ACCESS";
})($70ca3b575a653bf1$export$d5f3ec63cad061d9 || ($70ca3b575a653bf1$export$d5f3ec63cad061d9 = {}));

});

parcelRequire.register("7rfxJ", function(module, exports) {

$parcel$export(module.exports, "StorageFSA", function () { return $9d72711aa666cc1d$export$e27fb04f1d186cc2; });
parcelRequire("6vt9n");
var $fBBi7 = parcelRequire("fBBi7");
var $eHKgn = parcelRequire("eHKgn");
var $347Dd = parcelRequire("347Dd");
var $bguNN = parcelRequire("bguNN");
var $gTmwS = parcelRequire("gTmwS");
var $lLct5 = parcelRequire("lLct5");
var $9v3E5 = parcelRequire("9v3E5");
var $iZhGW = parcelRequire("iZhGW");
var $clec8 = parcelRequire("clec8");
var $kKnyI = parcelRequire("kKnyI");
var $gFyhy = parcelRequire("gFyhy");

var $9dvvU = parcelRequire("9dvvU");

var $2xfx7 = parcelRequire("2xfx7");

var $9from = parcelRequire("9from");

var $EstAn = parcelRequire("EstAn");
var _getSerialId, _serialize, _deserialize;
var _StorageFSA;
var _class;
var $9d72711aa666cc1d$export$55792b1bf8a712b1 = /*#__PURE__*/ function(StorageDirectory) {
    "use strict";
    $fBBi7.default($9d72711aa666cc1d$export$55792b1bf8a712b1, StorageDirectory);
    var _super = $eHKgn.default($9d72711aa666cc1d$export$55792b1bf8a712b1);
    function $9d72711aa666cc1d$export$55792b1bf8a712b1(storage, parent, handle) {
        $347Dd.default(this, $9d72711aa666cc1d$export$55792b1bf8a712b1);
        return _super.call(this, storage, parent, handle);
    }
    $bguNN.default($9d72711aa666cc1d$export$55792b1bf8a712b1, [
        {
            key: "getName",
            value: function getName() {
                return this.handle.name;
            }
        },
        {
            key: "getEntries",
            value: function getEntries(force) {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    var entries, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, handle;
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (!(!force && _this._entries)) {
                                    _ctx.next = 2;
                                    break;
                                }
                                return _ctx.abrupt("return", _this._entries);
                            case 2:
                                entries = [];
                                _iteratorAbruptCompletion = false, _didIteratorError = false;
                                _ctx.prev = 4;
                                _iterator = $lLct5.default(_this.handle.values());
                            case 6:
                                _ctx.next = 8;
                                return _iterator.next();
                            case 8:
                                if (!(_iteratorAbruptCompletion = !(_step = _ctx.sent).done)) {
                                    _ctx.next = 13;
                                    break;
                                }
                                {
                                    _value = _step.value;
                                    handle = _value;
                                    if (handle.kind === 'directory') entries.push(new $9d72711aa666cc1d$export$55792b1bf8a712b1(_this.storage, _this, handle));
                                    else entries.push(new $9d72711aa666cc1d$export$8281baebfbd31da5(_this.storage, _this, handle));
                                }
                            case 10:
                                _iteratorAbruptCompletion = false;
                                _ctx.next = 6;
                                break;
                            case 13:
                                _ctx.next = 19;
                                break;
                            case 15:
                                _ctx.prev = 15;
                                _ctx.t0 = _ctx["catch"](4);
                                _didIteratorError = true;
                                _iteratorError = _ctx.t0;
                            case 19:
                                _ctx.prev = 19;
                                _ctx.prev = 20;
                                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {
                                    _ctx.next = 24;
                                    break;
                                }
                                _ctx.next = 24;
                                return _iteratorError.return();
                            case 24:
                                _ctx.prev = 24;
                                if (!_didIteratorError) {
                                    _ctx.next = 27;
                                    break;
                                }
                                throw _iteratorError;
                            case 27:
                                return _ctx.finish(24);
                            case 28:
                                return _ctx.finish(19);
                            case 29:
                                _this._entries = entries;
                                return _ctx.abrupt("return", entries);
                            case 31:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, null, [
                        [
                            4,
                            15,
                            19,
                            29
                        ],
                        [
                            20,
                            ,
                            24,
                            28
                        ]
                    ]);
                }))();
            }
        },
        {
            key: "getEntry",
            value: function getEntry(name, force) {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    var entries;
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return _this.getEntries(force);
                            case 2:
                                entries = _ctx.sent;
                                return _ctx.abrupt("return", entries.find(function(entry) {
                                    return entry.getName() === name;
                                }));
                            case 4:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "createDirectory",
            value: function createDirectory(name) {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    var handle;
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return _this.handle.getDirectoryHandle(name, {
                                    create: true
                                });
                            case 2:
                                handle = _ctx.sent;
                                return _ctx.abrupt("return", new $9d72711aa666cc1d$export$55792b1bf8a712b1(_this.storage, _this, handle));
                            case 4:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "createFile",
            value: function createFile(name) {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    var handle;
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return _this.handle.getFileHandle(name, {
                                    create: true
                                });
                            case 2:
                                handle = _ctx.sent;
                                return _ctx.abrupt("return", new $9d72711aa666cc1d$export$8281baebfbd31da5(_this.storage, _this, handle));
                            case 4:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "getSize",
            value: function getSize() {
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                return _ctx.abrupt("return", 4096);
                            case 1:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "delete",
            value: function _delete(recursive) {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (_this.parent) {
                                    _ctx.next = 2;
                                    break;
                                }
                                throw new $9from.StorageError('Can\'t delete root directory.');
                            case 2:
                                _ctx.next = 4;
                                return _this.parent.getHandle().removeEntry(_this.handle.name, {
                                    recursive: recursive
                                });
                            case 4:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        }
    ]);
    return $9d72711aa666cc1d$export$55792b1bf8a712b1;
}($9from.StorageDirectory);
var $9d72711aa666cc1d$export$8281baebfbd31da5 = /*#__PURE__*/ function(StorageFile) {
    "use strict";
    $fBBi7.default($9d72711aa666cc1d$export$8281baebfbd31da5, StorageFile);
    var _super = $eHKgn.default($9d72711aa666cc1d$export$8281baebfbd31da5);
    function $9d72711aa666cc1d$export$8281baebfbd31da5(storage, parent, handle) {
        $347Dd.default(this, $9d72711aa666cc1d$export$8281baebfbd31da5);
        return _super.call(this, storage, parent, handle);
    }
    $bguNN.default($9d72711aa666cc1d$export$8281baebfbd31da5, [
        {
            key: "getName",
            value: function getName() {
                return this.handle.name;
            }
        },
        {
            key: "getSize",
            value: function getSize() {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    var file;
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return _this.handle.getFile();
                            case 2:
                                file = _ctx.sent;
                                return _ctx.abrupt("return", file.size);
                            case 4:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "read",
            value: function read(start, end) {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    var file;
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return _this.handle.getFile();
                            case 2:
                                file = _ctx.sent;
                                _ctx.next = 5;
                                return file.slice(start, end).arrayBuffer();
                            case 5:
                                return _ctx.abrupt("return", _ctx.sent);
                            case 6:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "readText",
            value: function readText(start, end) {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    var file;
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return _this.handle.getFile();
                            case 2:
                                file = _ctx.sent;
                                _ctx.next = 5;
                                return file.slice(start, end).text();
                            case 5:
                                return _ctx.abrupt("return", _ctx.sent);
                            case 6:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "write",
            value: function write(buffer, start, end) {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    var writable;
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return _this.handle.createWritable();
                            case 2:
                                writable = _ctx.sent;
                                if (start) {
                                    writable.seek(start);
                                    if (end) buffer = buffer.slice(0, end - start);
                                }
                                _ctx.next = 6;
                                return writable.write(buffer);
                            case 6:
                                _ctx.next = 8;
                                return writable.close();
                            case 8:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "writeText",
            value: function writeText(content, start) {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    var writable;
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return _this.handle.createWritable();
                            case 2:
                                writable = _ctx.sent;
                                if (start) writable.seek(start);
                                _ctx.next = 6;
                                return writable.write(content);
                            case 6:
                                _ctx.next = 8;
                                return writable.close();
                            case 8:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "delete",
            value: function _delete() {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return _this.parent.getHandle().removeEntry(_this.handle.name);
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        }
    ]);
    return $9d72711aa666cc1d$export$8281baebfbd31da5;
}($9from.StorageFile);
var $9d72711aa666cc1d$var$SERIAL_ID = 'StorageFSA';
var _dec = $2xfx7.serializable($9d72711aa666cc1d$var$SERIAL_ID);
var $9d72711aa666cc1d$export$e27fb04f1d186cc2 = _class = _dec(_class = (_getSerialId = $2xfx7.getSerialId, _serialize = $2xfx7.serialize, _deserialize = $2xfx7.deserialize, _StorageFSA = /*#__PURE__*/ function(Storage) {
    "use strict";
    $fBBi7.default($9d72711aa666cc1d$export$e27fb04f1d186cc2, Storage);
    var _super = $eHKgn.default($9d72711aa666cc1d$export$e27fb04f1d186cc2);
    function $9d72711aa666cc1d$export$e27fb04f1d186cc2() {
        $347Dd.default(this, $9d72711aa666cc1d$export$e27fb04f1d186cc2);
        return _super.apply(this, arguments);
    }
    $bguNN.default($9d72711aa666cc1d$export$e27fb04f1d186cc2, [
        {
            key: _getSerialId,
            value: function value() {
                return $9d72711aa666cc1d$var$SERIAL_ID;
            }
        },
        {
            key: _serialize,
            value: function value() {
                return $9v3E5.default({}, $iZhGW.default($clec8.default($9d72711aa666cc1d$export$e27fb04f1d186cc2.prototype), $2xfx7.serialize, this).call(this), {
                    handle: this.root.getHandle()
                });
            }
        },
        {
            key: _deserialize,
            value: function value(data) {
                $iZhGW.default($clec8.default($9d72711aa666cc1d$export$e27fb04f1d186cc2.prototype), $2xfx7.deserialize, this).call(this, data);
                this.root = new $9d72711aa666cc1d$export$55792b1bf8a712b1(this, null, data.handle);
            }
        },
        {
            key: "getRoot",
            value: function getRoot() {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                return _ctx.abrupt("return", _this.root);
                            case 1:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "hasPermission",
            value: function hasPermission() {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return _this.root.getHandle().queryPermission($9d72711aa666cc1d$export$e27fb04f1d186cc2.PERMISSION_OPTIONS);
                            case 2:
                                _ctx.t0 = _ctx.sent;
                                return _ctx.abrupt("return", _ctx.t0 === 'granted');
                            case 4:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "requestPermission",
            value: function requestPermission() {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return _this.root.getHandle().requestPermission($9d72711aa666cc1d$export$e27fb04f1d186cc2.PERMISSION_OPTIONS);
                            case 2:
                                _ctx.t0 = _ctx.sent;
                                return _ctx.abrupt("return", _ctx.t0 === 'granted');
                            case 4:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "add",
            value: function add() {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.t0 = $9d72711aa666cc1d$export$55792b1bf8a712b1;
                                _ctx.t1 = _this;
                                _ctx.next = 4;
                                return window.showDirectoryPicker();
                            case 4:
                                _ctx.t2 = _ctx.sent;
                                _this.root = new _ctx.t0(_ctx.t1, null, _ctx.t2);
                                _ctx.next = 8;
                                return _this.hasPermission();
                            case 8:
                                if (_ctx.sent) {
                                    _ctx.next = 11;
                                    break;
                                }
                                _ctx.next = 11;
                                return _this.requestPermission();
                            case 11:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        }
    ], [
        {
            key: "getType",
            value: function getType() {
                return $EstAn.StorageType.FILE_SYSTEM_ACCESS;
            }
        },
        {
            key: "getName",
            value: function getName() {
                return 'File System Access';
            }
        },
        {
            key: "getAddText",
            value: function getAddText() {
                return 'Open local directory';
            }
        }
    ]);
    return $9d72711aa666cc1d$export$e27fb04f1d186cc2;
}($kKnyI.default($9from.Storage)), $gFyhy.default(_StorageFSA, "PERMISSION_OPTIONS", {
    mode: 'readwrite'
}), _StorageFSA)) || _class;

});
parcelRequire.register("9from", function(module, exports) {

$parcel$export(module.exports, "StorageError", function () { return $bf020c4ba4602f5e$export$697502632950e9d3; });
$parcel$export(module.exports, "StorageDirectory", function () { return $bf020c4ba4602f5e$export$d6925643f2f9f008; });
$parcel$export(module.exports, "StorageFile", function () { return $bf020c4ba4602f5e$export$5b52ad4b875197ac; });
$parcel$export(module.exports, "Storage", function () { return $bf020c4ba4602f5e$export$bf2a15d34f3c441c; });
parcelRequire("6vt9n");
var $fBBi7 = parcelRequire("fBBi7");
var $eHKgn = parcelRequire("eHKgn");
var $347Dd = parcelRequire("347Dd");
var $kKnyI = parcelRequire("kKnyI");
var $bguNN = parcelRequire("bguNN");
var $1Q8JB = parcelRequire("1Q8JB");
var $gTmwS = parcelRequire("gTmwS");

var $9dvvU = parcelRequire("9dvvU");

var $h2c7q = parcelRequire("h2c7q");

var $2xfx7 = parcelRequire("2xfx7");
var $bf020c4ba4602f5e$export$697502632950e9d3 = /*#__PURE__*/ function(Error) {
    "use strict";
    $fBBi7.default($bf020c4ba4602f5e$export$697502632950e9d3, Error);
    var _super = $eHKgn.default($bf020c4ba4602f5e$export$697502632950e9d3);
    function $bf020c4ba4602f5e$export$697502632950e9d3() {
        $347Dd.default(this, $bf020c4ba4602f5e$export$697502632950e9d3);
        return _super.apply(this, arguments);
    }
    return $bf020c4ba4602f5e$export$697502632950e9d3;
}($kKnyI.default(Error));
var $bf020c4ba4602f5e$export$e741e9ec924242dd;
(function($bf020c4ba4602f5e$export$e741e9ec924242dd) {
    $bf020c4ba4602f5e$export$e741e9ec924242dd["DIRECTORY"] = "DIRECTORY";
    $bf020c4ba4602f5e$export$e741e9ec924242dd["FILE"] = "FILE";
})($bf020c4ba4602f5e$export$e741e9ec924242dd || ($bf020c4ba4602f5e$export$e741e9ec924242dd = {}));
var $bf020c4ba4602f5e$export$1e78234312a5cf64 = /*#__PURE__*/ function() {
    "use strict";
    function $bf020c4ba4602f5e$export$1e78234312a5cf64(storage, parent, handle, type) {
        $347Dd.default(this, $bf020c4ba4602f5e$export$1e78234312a5cf64);
        this.storage = storage;
        this.parent = parent;
        this.handle = handle;
        this.type = type;
    }
    $bguNN.default($bf020c4ba4602f5e$export$1e78234312a5cf64, [
        {
            key: "getStorage",
            value: function getStorage() {
                return this.storage;
            }
        },
        {
            key: "getParent",
            value: function getParent() {
                return this.parent;
            }
        },
        {
            key: "getHandle",
            value: function getHandle() {
                return this.handle;
            }
        },
        {
            key: "getType",
            value: function getType() {
                return this.type;
            }
        },
        {
            key: "getNameWithoutExtension",
            value: function getNameWithoutExtension() {
                var name = this.getName();
                return name.includes('.') ? name.substring(0, name.indexOf('.')) : name;
            }
        },
        {
            key: "getExtension",
            value: function getExtension() {
                var name = this.getName();
                return name.includes('.') ? name.substring(name.indexOf('.') + 1, name.length) : '';
            }
        },
        {
            key: "getPath",
            value: function getPath() {
                if (!this.parent) return [];
                return this.parent.getParent() ? $1Q8JB.default(this.parent.getPath()).concat([
                    this.getName()
                ]) : [
                    this.getName()
                ];
            }
        },
        {
            key: "getFullPath",
            value: function getFullPath() {
                return [
                    this.getStorage().getID()
                ].concat(this.getPath()).join('/');
            }
        }
    ]);
    return $bf020c4ba4602f5e$export$1e78234312a5cf64;
}();
var $bf020c4ba4602f5e$export$d6925643f2f9f008 = /*#__PURE__*/ function($bf020c4ba4602f5e$export$1e78234312a5cf64) {
    "use strict";
    $fBBi7.default($bf020c4ba4602f5e$export$d6925643f2f9f008, $bf020c4ba4602f5e$export$1e78234312a5cf64);
    var _super = $eHKgn.default($bf020c4ba4602f5e$export$d6925643f2f9f008);
    function $bf020c4ba4602f5e$export$d6925643f2f9f008(storage, parent, handle) {
        $347Dd.default(this, $bf020c4ba4602f5e$export$d6925643f2f9f008);
        return _super.call(this, storage, parent, handle, $bf020c4ba4602f5e$export$e741e9ec924242dd.DIRECTORY);
    }
    $bguNN.default($bf020c4ba4602f5e$export$d6925643f2f9f008, [
        {
            key: "getHandle",
            value: function getHandle() {
                return this.handle;
            }
        },
        {
            key: "print",
            value: function print() {
                var indent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : '';
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry;
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                console.log("".concat(indent).concat(_this.getName(), " (").concat(_this.getType().substring(0, 1), ")"));
                                indent += '|  ';
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                _ctx.prev = 3;
                                _ctx.next = 6;
                                return _this.getEntries();
                            case 6:
                                _ctx.t0 = Symbol.iterator;
                                _iterator = _ctx.sent[_ctx.t0]();
                            case 8:
                                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                    _ctx.next = 19;
                                    break;
                                }
                                entry = _step.value;
                                if (!(entry instanceof $bf020c4ba4602f5e$export$d6925643f2f9f008)) {
                                    _ctx.next = 15;
                                    break;
                                }
                                _ctx.next = 13;
                                return entry.print(indent);
                            case 13:
                                _ctx.next = 16;
                                break;
                            case 15:
                                console.log("".concat(indent).concat(entry.getName(), " (").concat(entry.getType().substring(0, 1), ")"));
                            case 16:
                                _iteratorNormalCompletion = true;
                                _ctx.next = 8;
                                break;
                            case 19:
                                _ctx.next = 25;
                                break;
                            case 21:
                                _ctx.prev = 21;
                                _ctx.t1 = _ctx["catch"](3);
                                _didIteratorError = true;
                                _iteratorError = _ctx.t1;
                            case 25:
                                _ctx.prev = 25;
                                _ctx.prev = 26;
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            case 28:
                                _ctx.prev = 28;
                                if (!_didIteratorError) {
                                    _ctx.next = 31;
                                    break;
                                }
                                throw _iteratorError;
                            case 31:
                                return _ctx.finish(28);
                            case 32:
                                return _ctx.finish(25);
                            case 33:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee, null, [
                        [
                            3,
                            21,
                            25,
                            33
                        ],
                        [
                            26,
                            ,
                            28,
                            32
                        ]
                    ]);
                }))();
            }
        }
    ]);
    return $bf020c4ba4602f5e$export$d6925643f2f9f008;
}($bf020c4ba4602f5e$export$1e78234312a5cf64);
var $bf020c4ba4602f5e$export$5b52ad4b875197ac = /*#__PURE__*/ function($bf020c4ba4602f5e$export$1e78234312a5cf64) {
    "use strict";
    $fBBi7.default($bf020c4ba4602f5e$export$5b52ad4b875197ac, $bf020c4ba4602f5e$export$1e78234312a5cf64);
    var _super = $eHKgn.default($bf020c4ba4602f5e$export$5b52ad4b875197ac);
    function $bf020c4ba4602f5e$export$5b52ad4b875197ac(storage, parent, handle) {
        $347Dd.default(this, $bf020c4ba4602f5e$export$5b52ad4b875197ac);
        return _super.call(this, storage, parent, handle, $bf020c4ba4602f5e$export$e741e9ec924242dd.FILE);
    }
    $bguNN.default($bf020c4ba4602f5e$export$5b52ad4b875197ac, [
        {
            key: "getParent",
            value: function getParent() {
                return this.parent;
            }
        },
        {
            key: "getHandle",
            value: function getHandle() {
                return this.handle;
            }
        },
        {
            key: "readJSON",
            value: function readJSON() {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.t0 = JSON;
                                _ctx.next = 3;
                                return _this.readText();
                            case 3:
                                _ctx.t1 = _ctx.sent;
                                return _ctx.abrupt("return", _ctx.t0.parse.call(_ctx.t0, _ctx.t1));
                            case 5:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "writeJSON",
            value: function writeJSON(content) {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return _this.writeText(JSON.stringify(content));
                            case 2:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        }
    ]);
    return $bf020c4ba4602f5e$export$5b52ad4b875197ac;
}($bf020c4ba4602f5e$export$1e78234312a5cf64);
var _serialize = $2xfx7.serialize, _deserialize = $2xfx7.deserialize;
var $bf020c4ba4602f5e$export$bf2a15d34f3c441c = /*#__PURE__*/ function() {
    "use strict";
    function $bf020c4ba4602f5e$export$bf2a15d34f3c441c(id) {
        $347Dd.default(this, $bf020c4ba4602f5e$export$bf2a15d34f3c441c);
        this.id = id || $h2c7q.default();
    }
    $bguNN.default($bf020c4ba4602f5e$export$bf2a15d34f3c441c, [
        {
            key: "getID",
            value: function getID() {
                return this.id;
            }
        },
        {
            key: "getType",
            value: function getType() {
                return this.constructor.getType();
            }
        },
        {
            key: "getName",
            value: function getName() {
                return this.constructor.getName();
            }
        },
        {
            key: _serialize,
            value: function value() {
                // @ts-expect-error: Technically a subclass could not override this method, which could cause type incompatibilities in the child,
                //                   but this should not happen in practice.
                return {
                    id: this.getID()
                };
            }
        },
        {
            key: _deserialize,
            value: function value(data) {
                this.id = data.id;
            }
        },
        {
            key: "getEntry",
            value: function getEntry(path) {
                var _this = this;
                return $gTmwS.default((/*@__PURE__*/$parcel$interopDefault($9dvvU)).mark(function _callee() {
                    var current, i, entry;
                    return (/*@__PURE__*/$parcel$interopDefault($9dvvU)).wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                _ctx.next = 2;
                                return _this.getRoot();
                            case 2:
                                current = _ctx.sent;
                                i = 0;
                            case 4:
                                if (!(i < path.length)) {
                                    _ctx.next = 19;
                                    break;
                                }
                                _ctx.next = 7;
                                return current.getEntry(path[i]);
                            case 7:
                                entry = _ctx.sent;
                                if (entry) {
                                    _ctx.next = 10;
                                    break;
                                }
                                return _ctx.abrupt("return", undefined);
                            case 10:
                                if (!(i < path.length - 1)) {
                                    _ctx.next = 15;
                                    break;
                                }
                                if (entry instanceof $bf020c4ba4602f5e$export$d6925643f2f9f008) {
                                    _ctx.next = 13;
                                    break;
                                }
                                throw new $bf020c4ba4602f5e$export$697502632950e9d3('Entry "'.concat(path[i], '" in path "').concat(path.join('/'), '" is not a directory.'));
                            case 13:
                                current = entry;
                                return _ctx.abrupt("continue", 16);
                            case 15:
                                return _ctx.abrupt("return", entry);
                            case 16:
                                i++;
                                _ctx.next = 4;
                                break;
                            case 19:
                                return _ctx.abrupt("return", current);
                            case 20:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        }
    ], [
        {
            key: "getType",
            value: function getType() {
                throw new Error('Not implemented.');
            }
        },
        {
            key: "getName",
            value: function getName() {
                return this.name.replace('Storage', '');
            }
        },
        {
            key: "getAddText",
            value: function getAddText() {
                return "Add ".concat(this.getName(), " storage");
            }
        }
    ]);
    return $bf020c4ba4602f5e$export$bf2a15d34f3c441c;
}();

});
parcelRequire.register("h2c7q", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $c66c0618bbd40ef5$export$2e2bcd8739ae039; });

var $erPYR = parcelRequire("erPYR");

var $7kxg4 = parcelRequire("7kxg4");
function $c66c0618bbd40ef5$var$v4(options, buf, offset) {
    options = options || {};
    var rnds = options.random || (options.rng || $erPYR.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided
    if (buf) {
        offset = offset || 0;
        for(var i = 0; i < 16; ++i)buf[offset + i] = rnds[i];
        return buf;
    }
    return $7kxg4.default(rnds);
}
var $c66c0618bbd40ef5$export$2e2bcd8739ae039 = $c66c0618bbd40ef5$var$v4;

});
parcelRequire.register("erPYR", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $a84be89732fe9e59$export$2e2bcd8739ae039; });
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var $a84be89732fe9e59$var$getRandomValues;
var $a84be89732fe9e59$var$rnds8 = new Uint8Array(16);
function $a84be89732fe9e59$export$2e2bcd8739ae039() {
    // lazy load so that environments that need to polyfill have a chance to do so
    if (!$a84be89732fe9e59$var$getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
        // find the complete implementation of crypto (msCrypto) on IE11.
        $a84be89732fe9e59$var$getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);
        if (!$a84be89732fe9e59$var$getRandomValues) throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
    return $a84be89732fe9e59$var$getRandomValues($a84be89732fe9e59$var$rnds8);
}

});

parcelRequire.register("7kxg4", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $5564330eb0eab583$export$2e2bcd8739ae039; });

var $dufL0 = parcelRequire("dufL0");
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ var $5564330eb0eab583$var$byteToHex = [];
for(var $5564330eb0eab583$var$i = 0; $5564330eb0eab583$var$i < 256; ++$5564330eb0eab583$var$i)$5564330eb0eab583$var$byteToHex.push(($5564330eb0eab583$var$i + 0x100).toString(16).substr(1));
function $5564330eb0eab583$var$stringify(arr) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    var uuid = ($5564330eb0eab583$var$byteToHex[arr[offset + 0]] + $5564330eb0eab583$var$byteToHex[arr[offset + 1]] + $5564330eb0eab583$var$byteToHex[arr[offset + 2]] + $5564330eb0eab583$var$byteToHex[arr[offset + 3]] + '-' + $5564330eb0eab583$var$byteToHex[arr[offset + 4]] + $5564330eb0eab583$var$byteToHex[arr[offset + 5]] + '-' + $5564330eb0eab583$var$byteToHex[arr[offset + 6]] + $5564330eb0eab583$var$byteToHex[arr[offset + 7]] + '-' + $5564330eb0eab583$var$byteToHex[arr[offset + 8]] + $5564330eb0eab583$var$byteToHex[arr[offset + 9]] + '-' + $5564330eb0eab583$var$byteToHex[arr[offset + 10]] + $5564330eb0eab583$var$byteToHex[arr[offset + 11]] + $5564330eb0eab583$var$byteToHex[arr[offset + 12]] + $5564330eb0eab583$var$byteToHex[arr[offset + 13]] + $5564330eb0eab583$var$byteToHex[arr[offset + 14]] + $5564330eb0eab583$var$byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields
    if (!$dufL0.default(uuid)) throw TypeError('Stringified UUID is invalid');
    return uuid;
}
var $5564330eb0eab583$export$2e2bcd8739ae039 = $5564330eb0eab583$var$stringify;

});
parcelRequire.register("dufL0", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $9d1a4cbb11e6d981$export$2e2bcd8739ae039; });

var $kKYHT = parcelRequire("kKYHT");
function $9d1a4cbb11e6d981$var$validate(uuid) {
    return typeof uuid === 'string' && $kKYHT.default.test(uuid);
}
var $9d1a4cbb11e6d981$export$2e2bcd8739ae039 = $9d1a4cbb11e6d981$var$validate;

});
parcelRequire.register("kKYHT", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $f1c731af45026d6b$export$2e2bcd8739ae039; });
var $f1c731af45026d6b$export$2e2bcd8739ae039 = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

});








parcelRequire.register("1IjS8", function(module, exports) {

$parcel$export(module.exports, "debug", function () { return $6a8c19656f9b3ec4$export$1c9f709888824e05; });
$parcel$export(module.exports, "addDebugLogging", function () { return $6a8c19656f9b3ec4$export$b0b02e1603632d7; });
parcelRequire("6vt9n");
var $1Q8JB = parcelRequire("1Q8JB");
var $Kg1DN = parcelRequire("Kg1DN");
var $6a8c19656f9b3ec4$var$DEBUG_NAMESPACES = {
    fs: true
};
var $6a8c19656f9b3ec4$export$1c9f709888824e05 = function(namespace) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        args[_key - 1] = arguments[_key];
    }
    var _console;
    if ($6a8c19656f9b3ec4$var$DEBUG_NAMESPACES[namespace]) (_console = console).debug.apply(_console, $1Q8JB.default(args));
};
var $6a8c19656f9b3ec4$export$b0b02e1603632d7 = function(namespace, name, obj) {
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        var _loop = function(_iterator, _step) {
            var _value = $Kg1DN.default(_step.value, 2), key = _value[0], value = _value[1];
            if (typeof value === 'function') obj[key] = function() {
                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                    args[_key] = arguments[_key];
                }
                $6a8c19656f9b3ec4$export$1c9f709888824e05.apply(void 0, [
                    namespace,
                    "[".concat(name, ".").concat(key, " args]")
                ].concat($1Q8JB.default(args)));
                try {
                    var result = value.apply(void 0, $1Q8JB.default(args));
                    $6a8c19656f9b3ec4$export$1c9f709888824e05(namespace, "[".concat(name, ".").concat(key, " result]"), result);
                    return result;
                } catch (err) {
                    $6a8c19656f9b3ec4$export$1c9f709888824e05(namespace, "[".concat(name, ".").concat(key, " error]"), err);
                    throw err;
                }
            };
            else if (typeof value === 'object' && value) obj[key] = $6a8c19656f9b3ec4$export$b0b02e1603632d7(namespace, name, value);
        };
        for(var _iterator = Object.entries(obj)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return obj;
};

});

parcelRequire.register("aghNo", function(module, exports) {

$parcel$export(module.exports, "BLOCK_SIZE", function () { return $110f2aec7afa7c04$export$b2e3d6d444266a5c; });
$parcel$export(module.exports, "INDEX_FS_LOCK", function () { return $110f2aec7afa7c04$export$184b6c1a2519928d; });
$parcel$export(module.exports, "INDEX_WORKER_LOCK", function () { return $110f2aec7afa7c04$export$38bceeeabd1235c5; });
$parcel$export(module.exports, "INDEX_WORKER_NOTIFY", function () { return $110f2aec7afa7c04$export$35bd0991cab0563e; });
$parcel$export(module.exports, "INDEX_DATA", function () { return $110f2aec7afa7c04$export$cc08ca8bb9c1d12a; });
var $110f2aec7afa7c04$export$b2e3d6d444266a5c = 4096;
var $110f2aec7afa7c04$export$184b6c1a2519928d = 0;
var $110f2aec7afa7c04$export$38bceeeabd1235c5 = 1;
var $110f2aec7afa7c04$export$35bd0991cab0563e = 2;
var $110f2aec7afa7c04$export$cc08ca8bb9c1d12a = 3;
var $110f2aec7afa7c04$export$191ce3c85debeef1 = ($110f2aec7afa7c04$export$cc08ca8bb9c1d12a + 1) * 4 + $110f2aec7afa7c04$export$b2e3d6d444266a5c;

});

parcelRequire.register("hq89M", function(module, exports) {

$parcel$export(module.exports, "Data", function () { return $f4d5475bdb18edf2$export$2d0294657ab35f1b; });
parcelRequire("6vt9n");
var $347Dd = parcelRequire("347Dd");
var $bguNN = parcelRequire("bguNN");
var $f4d5475bdb18edf2$var$TEXT_ENCODER = new TextEncoder();
var $f4d5475bdb18edf2$var$TEXT_DECODER = new TextDecoder();
var $f4d5475bdb18edf2$export$2d0294657ab35f1b = /*#__PURE__*/ function() {
    "use strict";
    function $f4d5475bdb18edf2$export$2d0294657ab35f1b(buffer) {
        var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        $347Dd.default(this, $f4d5475bdb18edf2$export$2d0294657ab35f1b);
        this.buffer = buffer;
        this.dataView = new DataView(buffer);
        this.arrayUint8 = new Uint8Array(this.buffer);
        this.originalOffset = offset;
        this.offset = offset;
    }
    $bguNN.default($f4d5475bdb18edf2$export$2d0294657ab35f1b, [
        {
            key: "getLength",
            value: function getLength() {
                return this.buffer.byteLength - this.originalOffset;
            }
        },
        {
            key: "getOffset",
            value: function getOffset() {
                return this.offset;
            }
        },
        {
            key: "setOffset",
            value: function setOffset(offset) {
                this.offset = offset;
            }
        },
        {
            key: "resetOffset",
            value: function resetOffset() {
                this.offset = this.originalOffset;
            }
        },
        {
            key: "readUint8",
            value: function readUint8() {
                var data = this.dataView.getUint8(this.offset);
                this.offset += 1;
                return data;
            }
        },
        {
            key: "readInt8",
            value: function readInt8() {
                var data = this.dataView.getInt8(this.offset);
                this.offset += 1;
                return data;
            }
        },
        {
            key: "readUint32",
            value: function readUint32() {
                var data = this.dataView.getUint32(this.offset);
                this.offset += 4;
                return data;
            }
        },
        {
            key: "readInt32",
            value: function readInt32() {
                var data = this.dataView.getInt32(this.offset);
                this.offset += 4;
                return data;
            }
        },
        {
            key: "readUint8Array",
            value: function readUint8Array() {
                var length = this.readUint32();
                var data = this.arrayUint8.slice(this.offset, this.offset + length);
                this.offset += length;
                return data;
            }
        },
        {
            key: "readString",
            value: function readString() {
                var array = this.readUint8Array();
                return $f4d5475bdb18edf2$var$TEXT_DECODER.decode(array);
            }
        },
        {
            key: "readStringArray",
            value: function readStringArray() {
                var length = this.readUint32();
                var array = new Array(length);
                for(var i = 0; i < length; i++)array[i] = this.readString();
                return array;
            }
        },
        {
            key: "writeUint8",
            value: function writeUint8(data) {
                this.dataView.setUint8(this.offset, data);
                this.offset += 1;
            }
        },
        {
            key: "writeInt8",
            value: function writeInt8(data) {
                this.dataView.setInt8(this.offset, data);
                this.offset += 1;
            }
        },
        {
            key: "writeUint32",
            value: function writeUint32(data) {
                this.dataView.setUint32(this.offset, data);
                this.offset += 4;
            }
        },
        {
            key: "writeInt32",
            value: function writeInt32(data) {
                this.dataView.setInt32(this.offset, data);
                this.offset += 4;
            }
        },
        {
            key: "writeUint8Array",
            value: function writeUint8Array(data) {
                this.writeUint32(data.byteLength);
                this.arrayUint8.set(data, this.offset);
                this.offset += data.byteLength;
            }
        },
        {
            key: "writeString",
            value: function writeString(data) {
                var array = $f4d5475bdb18edf2$var$TEXT_ENCODER.encode(data);
                this.writeUint8Array(array);
            }
        },
        {
            key: "writeStringArray",
            value: function writeStringArray(data) {
                this.writeUint32(data.length);
                for(var i = 0; i < data.length; i++)this.writeString(data[i]);
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.arrayUint8.set(new Uint8Array(), this.originalOffset);
                this.resetOffset();
            }
        }
    ]);
    return $f4d5475bdb18edf2$export$2d0294657ab35f1b;
}();

});

parcelRequire.register("4aKPk", function(module, exports) {

$parcel$export(module.exports, "createStorageFS", function () { return $fc80651a2906577b$export$43e91fd7f668d009; });
parcelRequire("6vt9n");
var $Kg1DN = parcelRequire("Kg1DN");

var $1IjS8 = parcelRequire("1IjS8");

var $aghNo = parcelRequire("aghNo");
var $fc80651a2906577b$var$ENOENT = 2;
var $fc80651a2906577b$var$EINVAL = 22;
var $fc80651a2906577b$var$S_IFDIR = 0o40000;
var $fc80651a2906577b$var$S_IFREG = 0o100000;
var $fc80651a2906577b$var$S_IRWXU = 0o700;
var $fc80651a2906577b$var$S_IRWXG = 0o070;
var $fc80651a2906577b$var$S_IRWXO = 0o007;
var $fc80651a2906577b$var$S_IRWX = $fc80651a2906577b$var$S_IRWXU | $fc80651a2906577b$var$S_IRWXG | $fc80651a2906577b$var$S_IRWXO;
var $fc80651a2906577b$var$SEEK_CUR = 1;
var $fc80651a2906577b$var$SEEK_END = 2;
var $fc80651a2906577b$var$nodeToPath = function(node) {
    if (node.name === '/') return [];
    return $fc80651a2906577b$var$nodeToPath(node.parent).concat(node.name);
};
var $fc80651a2906577b$export$43e91fd7f668d009 = function(FS, tool) {
    // Storage FS is based on MEMFS from the Emscripten standard library
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */ var STORAGE_FS = {
        ops_table: null,
        mount: function(_mount) {
            return STORAGE_FS.createNode(null, '/', $fc80651a2906577b$var$S_IFDIR | $fc80651a2906577b$var$S_IRWX, 0);
        },
        createNode: function(parent, name, mode, dev, size) {
            if (!STORAGE_FS.ops_table) STORAGE_FS.ops_table = {
                dir: {
                    node: {
                        getattr: STORAGE_FS.node_ops.getattr,
                        setattr: STORAGE_FS.node_ops.setattr,
                        lookup: STORAGE_FS.node_ops.lookup,
                        mknod: STORAGE_FS.node_ops.mknod,
                        rename: STORAGE_FS.node_ops.rename,
                        unlink: STORAGE_FS.node_ops.unlink,
                        rmdir: STORAGE_FS.node_ops.rmdir,
                        readdir: STORAGE_FS.node_ops.readdir,
                        symlink: STORAGE_FS.node_ops.symlink
                    },
                    stream: {
                        llseek: STORAGE_FS.stream_ops.llseek
                    }
                },
                file: {
                    node: {
                        getattr: STORAGE_FS.node_ops.getattr,
                        setattr: STORAGE_FS.node_ops.setattr
                    },
                    stream: {
                        llseek: STORAGE_FS.stream_ops.llseek,
                        read: STORAGE_FS.stream_ops.read,
                        write: STORAGE_FS.stream_ops.write,
                        allocate: STORAGE_FS.stream_ops.allocate,
                        mmap: STORAGE_FS.stream_ops.mmap,
                        msync: STORAGE_FS.stream_ops.msync
                    }
                }
            };
            if (FS.isBlkdev(mode)) throw new Error('Storage FS does not support blkdev nodes.');
            else if (FS.isFIFO(mode)) throw new Error('Storage FS does not support fifo nodes.');
            else if (FS.isLink(mode)) throw new Error('Storage FS does not support link nodes.');
            else if (FS.isChrdev(mode)) throw new Error('Storage FS does not support chrdev nodes.');
            var node = FS.createNode(parent, name, mode, dev);
            if (FS.isDir(node.mode)) {
                node.node_ops = STORAGE_FS.ops_table.dir.node;
                node.stream_ops = STORAGE_FS.ops_table.dir.stream;
                node.lastSize = size || 4096;
            } else if (FS.isFile(node.mode)) {
                node.node_ops = STORAGE_FS.ops_table.file.node;
                node.stream_ops = STORAGE_FS.ops_table.file.stream;
                node.lastSize = size || 0;
            }
            node.timestamp = Date.now();
            if (parent) parent.timestamp = node.timestamp;
            return node;
        },
        syncfs: function(_mount, _populate, _callback) {
            throw new Error('Not implemented.');
        },
        node_ops: {
            getattr: function(node) {
                var attr = {
                    ino: node.id,
                    mode: node.mode,
                    nlink: 1,
                    uid: 0,
                    gid: 0,
                    rdev: node.rdev,
                    atime: new Date(node.timestamp),
                    mtime: new Date(node.timestamp),
                    ctime: new Date(node.timestamp),
                    size: node.lastSize || 0,
                    blksize: $aghNo.BLOCK_SIZE,
                    blocks: 0
                };
                attr.blocks = Math.ceil(attr.size / attr.blksize);
                return attr;
            },
            setattr: function(node, attr) {
                // if (attr.mode !== undefined) {
                //     node.mode = attr.mode;
                // }
                if (attr.timestamp !== undefined) node.timestamp = attr.timestamp;
            },
            lookup: function(parent, name) {
                var ref = $Kg1DN.default(tool.callFs(parent.mount.opts.storageId, $fc80651a2906577b$var$nodeToPath(parent).concat(name), 'stat'), 2), type = ref[0], size = ref[1];
                if (type === 0) throw new FS.ErrnoError($fc80651a2906577b$var$ENOENT);
                var mode = $fc80651a2906577b$var$S_IRWX;
                if (type === 1) mode |= $fc80651a2906577b$var$S_IFDIR;
                else if (type === 2) mode |= $fc80651a2906577b$var$S_IFREG;
                return STORAGE_FS.createNode(parent, name, mode, 0, size);
            },
            mknod: function(parent, name, mode, dev) {
                return STORAGE_FS.createNode(parent, name, mode, dev);
            },
            rename: function(oldNode, newDir, newName) {
                throw new Error('Not implemented.');
            },
            unlink: function(parent, name) {
                tool.callFs(parent.mount.opts.storageId, $fc80651a2906577b$var$nodeToPath(parent).concat(name), 'unlink');
                parent.timestamp = Date.now();
            },
            rmdir: function(parent, name) {
                tool.callFs(parent.mount.opts.storageId, $fc80651a2906577b$var$nodeToPath(parent).concat(name), 'rmdir');
                parent.timestamp = Date.now();
            },
            readdir: function(node) {
                return [
                    '.',
                    '..'
                ].concat(tool.callFs(node.mount.opts.storageId, $fc80651a2906577b$var$nodeToPath(node), 'readdir'));
            },
            symlink: function(_parent, _newName, _oldPath) {
                throw new Error('Storage FS does not support link nodes.');
            },
            readlink: function(_node) {
                throw new Error('Storage FS does not support link nodes.');
            }
        },
        stream_ops: {
            read: function(stream, buffer, offset, length, position) {
                var data = tool.callFs(stream.node.mount.opts.storageId, $fc80651a2906577b$var$nodeToPath(stream.node), 'read', {
                    start: position,
                    end: position + length
                });
                buffer.set(data, offset);
                return data.length;
            },
            write: function(stream, buffer, offset, length, position, canOwn) {
                throw new Error('Not implemented.');
            },
            llseek: function(stream, offset, whence) {
                var position = offset;
                if (whence === $fc80651a2906577b$var$SEEK_CUR) position += stream.position;
                else if (whence === $fc80651a2906577b$var$SEEK_END) {
                    if (FS.isFile(stream.node.mode)) position += stream.node.lastSize || 0;
                }
                if (position < 0) throw new FS.ErrnoError($fc80651a2906577b$var$EINVAL);
                return position;
            },
            allocate: function(stream, offset, length) {
                throw new Error('Not implemented.');
            },
            mmap: function(stream, length, position, prot, flags) {
                throw new Error('Not implemented.');
            },
            msync: function(stream, buffer, offset, length, mmapFlags) {
                throw new Error('Not implemented.');
            }
        }
    };
    return $1IjS8.addDebugLogging('fs', 'StorageFS', STORAGE_FS);
};

});

parcelRequire.register("eAxv7", function(module, exports) {

$parcel$export(module.exports, "Mutex", function () { return $6dabeb21012c0f3e$export$ca12f2943758ef55; });
parcelRequire("6vt9n");
var $347Dd = parcelRequire("347Dd");
var $bguNN = parcelRequire("bguNN");
var $6dabeb21012c0f3e$export$ca12f2943758ef55 = /*#__PURE__*/ function() {
    "use strict";
    function $6dabeb21012c0f3e$export$ca12f2943758ef55(array, index) {
        $347Dd.default(this, $6dabeb21012c0f3e$export$ca12f2943758ef55);
        this.array = array;
        this.index = index;
    }
    $bguNN.default($6dabeb21012c0f3e$export$ca12f2943758ef55, [
        {
            key: "acquire",
            value: function acquire() {
                var c;
                if ((c = Atomics.compareExchange(this.array, this.index, 0, 1)) !== 0) {
                    do if (c == 2 || Atomics.compareExchange(this.array, this.index, 1, 2) !== 0) Atomics.wait(this.array, this.index, 2);
                    while ((c = Atomics.compareExchange(this.array, this.index, 0, 2)) !== 0)
                }
            }
        },
        {
            key: "release",
            value: function release() {
                var value = Atomics.sub(this.array, this.index, 1);
                if (value !== 1) {
                    Atomics.store(this.array, this.index, 0);
                    Atomics.notify(this.array, this.index, 1);
                }
            }
        }
    ]);
    return $6dabeb21012c0f3e$export$ca12f2943758ef55;
}();

});


})();
